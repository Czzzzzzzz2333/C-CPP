(this["webpackJsonpleetcode-cheat"]=this["webpackJsonpleetcode-cheat"]||[]).push([[0],{183:function(n,e,t){n.exports=t(560)},188:function(n,e,t){},399:function(n,e,t){},560:function(n,e,t){"use strict";t.r(e);var i=t(0),r=t.n(i),o=t(14),l=t.n(o),a=(t(188),t(103)),s=t(181),u=t(563),m=t(564),c=t(51),d=t(566),p=t(565),g=t(66),f=t(562),h=t(125),b=t.n(h),x=t(155),k=t.n(x),v=(t(397),t(156));var y=["magenta","red","volcano","orange","gold","lime","green","cyan","blue","geekblue","purple"];function w(n){var e,t=0,i=Object(v.a)(n);try{for(i.s();!(e=i.n()).done;){t+=e.value.charCodeAt()}}catch(r){i.e(r)}finally{i.f()}return y[t%y.length]}var j={"two-sum":{id:"1",name:"two-sum",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"\u6c42\u548c\u8f6c\u6362\u4e3a\u6c42\u5dee",link:null,color:"blue"},{text:"\u501f\u52a9Map\u7ed3\u6784\u5c06\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ca\u5176\u7d22\u5f15\u76f8\u4e92\u5bf9\u5e94",link:null,color:"blue"},{text:"\u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u5c06\u67e5\u627e\u65f6\u95f4\u4eceO(N)\u964d\u4f4e\u5230O(1)",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"adobe"},{name:"airbnb"},{name:"amazon"},{name:"apple"},{name:"bloomberg"},{name:"dropbox"},{name:"facebook"},{name:"linkedin"},{name:"microsoft"},{name:"uber"},{name:"yahoo"},{name:"yelp"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1.two-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1.two-sum.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nconst twoSum = function (nums, target) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const diff = target - nums[i];\n    if (map.has(diff)) {\n      return [map.get(diff), i];\n    }\n    map.set(nums[i], i);\n  }\n};\n"}]},"add-two-numbers":{id:"2",name:"add-two-numbers",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u89e3\u67901.\u94fe\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u7279\u70b9\u548c\u4f7f\u75282.\u7528\u4e00\u4e2acarried\u53d8\u91cf\u6765\u5b9e\u73b0\u8fdb\u4f4d\u7684\u529f\u80fd\uff0c\u6bcf\u6b21\u76f8\u52a0\u4e4b\u540e\u8ba1\u7b97carried\uff0c\u5e76\u7528\u4e8e\u4e0b\u4e00\u4f4d\u7684\u8ba1\u7b97",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/2.add-two-numbers.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/2.add-two-numbers.md",code:[{language:"js",text:"\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  if (l1 === null || l2 === null) return null;\n\n  // \u4f7f\u7528dummyHead\u53ef\u4ee5\u7b80\u5316\u5bf9\u94fe\u8868\u7684\u5904\u7406\uff0cdummyHead.next\u6307\u5411\u65b0\u94fe\u8868\n  let dummyHead = new ListNode(0);\n  let cur1 = l1;\n  let cur2 = l2;\n  let cur = dummyHead; // cur\u7528\u4e8e\u8ba1\u7b97\u65b0\u94fe\u8868\n  let carry = 0; // \u8fdb\u4f4d\u6807\u5fd7\n\n  while (cur1 !== null || cur2 !== null) {\n    let val1 = cur1 !== null ? cur1.val : 0;\n    let val2 = cur2 !== null ? cur2.val : 0;\n    let sum = val1 + val2 + carry;\n    let newNode = new ListNode(sum % 10); // sum%10\u53d6\u6a21\u7ed3\u679c\u8303\u56f4\u4e3a0~9\uff0c\u5373\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u503c\n    carry = sum >= 10 ? 1 : 0; // sum>=10\uff0ccarry=1\uff0c\u8868\u793a\u6709\u8fdb\u4f4d\n    cur.next = newNode;\n    cur = cur.next;\n\n    if (cur1 !== null) {\n      cur1 = cur1.next;\n    }\n\n    if (cur2 !== null) {\n      cur2 = cur2.next;\n    }\n  }\n\n  if (carry > 0) {\n    // \u5982\u679c\u6700\u540e\u8fd8\u6709\u8fdb\u4f4d\uff0c\u65b0\u52a0\u4e00\u4e2a\u8282\u70b9\n    cur.next = new ListNode(carry);\n  }\n\n  return dummyHead.next;\n};\n"},{language:"cpp",text:"\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* ret = nullptr;\n        ListNode* cur = nullptr;\n        int carry = 0;\n        while (l1 != nullptr || l2 != nullptr || carry != 0) {\n            carry += (l1 == nullptr ? 0 : l1->val) + (l2 == nullptr ? 0 : l2->val);\n            auto temp = new ListNode(carry % 10);\n            carry /= 10;\n            if (ret == nullptr) {\n                ret = temp;\n                cur = ret;\n            }\n            else {\n                cur->next = temp;\n                cur = cur->next;\n            }\n            l1 = l1 == nullptr ? nullptr : l1->next;\n            l2 = l2 == nullptr ? nullptr : l2->next;\n        }\n        return ret;\n    }\n};\n"}]},"longest-substring-without-repeating-characters":{id:"3",name:"longest-substring-without-repeating-characters",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/slide-window.md",color:"purple"}],keyPoints:[{text:"1.\u7528\u4e00\u4e2amapper\u8bb0\u5f55\u51fa\u73b0\u8fc7\u5e76\u4e14\u6ca1\u6709\u88ab\u5220\u9664\u7684\u5b57\u7b262.\u7528\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u8bb0\u5f55\u5f53\u524dindex\u5f00\u59cb\u7684\u6700\u5927\u7684\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\u5e8f\u52173.\u7528res\u53bb\u8bb0\u5f55\u76ee\u524d\u4f4d\u7f6e\u6700\u5927\u7684\u957f\u5ea6\uff0c\u6bcf\u6b21\u6ed1\u52a8\u7a97\u53e3\u66f4\u65b0\u5c31\u53bb\u51b3\u5b9a\u662f\u5426\u9700\u8981\u66f4\u65b0res",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/3.longest-substring-without-repeating-characters.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/3.longest-substring-without-repeating-characters.md",code:[{language:"py",text:"\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        l = 0\n        ans = 0\n        counter = defaultdict(lambda: 0)\n\n        for r in range(len(s)):\n            while counter.get(s[r], 0) != 0:\n                counter[s[l]] = counter.get(s[l], 0) - 1\n                l += 1\n            counter[s[r]] += 1\n            ans = max(ans, r - l + 1)\n\n        return ans\n"}]},"median-of-two-sorted-array":{id:"4",name:"median-of-two-sorted-array",pre:[{text:"\u4e2d\u4f4d\u6570",link:null,color:"cyan"},{text:"\u5206\u6cbb\u6cd5",link:null,color:"volcano"},{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"magenta"}],keyPoints:[{text:"\u5206\u67901.\u66b4\u529b\u6c42\u89e3\uff0c\u5728\u7ebf\u6027\u65f6\u95f4\u5185merge\u4e24\u4e2a\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u6210\u4e00\u4e2a\u6570\u7ec4\u30022.\u4e8c\u5206\u67e5\u627e\uff0c\u5173\u952e\u70b9\u5728\u4e8e",link:null,color:"blue"},{text:"\u8981partition\u4e24\u4e2a\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u6210\u5de6\u53f3\u4e24\u7b49\u4efd\uff0cpartition\u9700\u8981\u6ee1\u8db3`len(Aleft)+len(Bleft)=(m+n+1)/2",link:null,color:"blue"},{text:"m\u662f\u6570\u7ec4A\u7684\u957f\u5ea6\uff0cn\u662f\u6570\u7ec4B\u7684\u957f\u5ea6`",link:null,color:"blue"},{text:"\u5e76\u4e14partition\u540eA\u5de6\u8fb9\u6700\u5927(`maxLeftA`),A\u53f3\u8fb9\u6700\u5c0f\uff08`minRightA`),B\u5de6\u8fb9\u6700\u5927\uff08`maxLeftB`),B\u53f3\u8fb9\u6700\u5c0f\uff08`minRightB`)\u6ee1\u8db3`(maxLeftA<=minRightB&&maxLeftB<=minRightA)`\u6709\u4e86\u8fd9\u4e24\u4e2a\u6761\u4ef6\uff0c\u90a3\u4e48median\u5c31\u5728\u8fd9\u56db\u4e2a\u6570\u4e2d\uff0c\u6839\u636e\u5947\u6570\u6216\u8005\u662f\u5076\u6570\uff0c```\u5947\u6570\uff1amedian=max(maxLeftA,maxLeftB)\u5076\u6570\uff1amedian=(max(maxLeftA,maxLeftB)+min(minRightA,minRightB))/2```",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/4.median-of-two-sorted-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/4.median-of-two-sorted-array.md",code:[{language:"java",text:" []\nclass MedianTwoSortedArrayBruteForce {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n      int[] newArr = mergeTwoSortedArray(nums1, nums2);\n      int n = newArr.length;\n      if (n % 2 == 0) {\n        // even\n        return (double) (newArr[n / 2] + newArr[n / 2 - 1]) / 2;\n      } else {\n        // odd\n        return (double) newArr[n / 2];\n      }\n    }\n    private int[] mergeTwoSortedArray(int[] nums1, int[] nums2) {\n      int m = nums1.length;\n      int n = nums2.length;\n      int[] res = new int[m + n];\n      int i = 0;\n      int j = 0;\n      int idx = 0;\n      while (i < m && j < n) {\n        if (nums1[i] <= nums2[j]) {\n          res[idx++] = nums1[i++];\n        } else {\n          res[idx++] = nums2[j++];\n        }\n      }\n      while (i < m) {\n        res[idx++] = nums1[i++];\n      }\n      while (j < n) {\n        res[idx++] = nums2[j++];\n      }\n      return res;\n    }\n}\n"},{language:"java",text:" []\nclass MedianSortedTwoArrayBinarySearch {\n  public static double findMedianSortedArraysBinarySearch(int[] nums1, int[] nums2) {\n     // do binary search for shorter length array, make sure time complexity log(min(m,n)).\n     if (nums1.length > nums2.length) {\n        return findMedianSortedArraysBinarySearch(nums2, nums1);\n      }\n      int m = nums1.length;\n      int n = nums2.length;\n      int lo = 0;\n      int hi = m;\n      while (lo <= hi) {\n        // partition A position i\n        int i = lo + (hi - lo) / 2;\n        // partition B position j\n        int j = (m + n + 1) / 2 - i;\n\n        int maxLeftA = i == 0 ? Integer.MIN_VALUE : nums1[i - 1];\n        int minRightA = i == m ? Integer.MAX_VALUE : nums1[i];\n\n        int maxLeftB = j == 0 ? Integer.MIN_VALUE : nums2[j - 1];\n        int minRightB = j == n ? Integer.MAX_VALUE : nums2[j];\n\n        if (maxLeftA <= minRightB && maxLeftB <= minRightA) {\n          // total length is even\n          if ((m + n) % 2 == 0) {\n            return (double) (Math.max(maxLeftA, maxLeftB) + Math.min(minRightA, minRightB)) / 2;\n          } else {\n            // total length is odd\n            return (double) Math.max(maxLeftA, maxLeftB);\n          }\n        } else if (maxLeftA > minRightB) {\n          // binary search left half\n          hi = i - 1;\n        } else {\n          // binary search right half\n          lo = i + 1;\n        }\n      }\n      return 0.0;\n    }\n}\n"},{language:"js",text:" []\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function (nums1, nums2) {\n  // \u5f52\u5e76\u6392\u5e8f\n  const merged = [];\n  let i = 0;\n  let j = 0;\n  while (i < nums1.length && j < nums2.length) {\n    if (nums1[i] < nums2[j]) {\n      merged.push(nums1[i++]);\n    } else {\n      merged.push(nums2[j++]);\n    }\n  }\n  while (i < nums1.length) {\n    merged.push(nums1[i++]);\n  }\n  while (j < nums2.length) {\n    merged.push(nums2[j++]);\n  }\n\n  const { length } = merged;\n  return length % 2 === 1\n    ? merged[Math.floor(length / 2)]\n    : (merged[length / 2] + merged[length / 2 - 1]) / 2;\n};\n"},{language:"js",text:" []\n/**\n * \u4e8c\u5206\u89e3\u6cd5\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function (nums1, nums2) {\n  // make sure to do binary search for shorten array\n  if (nums1.length > nums2.length) {\n    [nums1, nums2] = [nums2, nums1];\n  }\n  const m = nums1.length;\n  const n = nums2.length;\n  let low = 0;\n  let high = m;\n  while (low <= high) {\n    const i = low + Math.floor((high - low) / 2);\n    const j = Math.floor((m + n + 1) / 2) - i;\n\n    const maxLeftA = i === 0 ? -Infinity : nums1[i - 1];\n    const minRightA = i === m ? Infinity : nums1[i];\n    const maxLeftB = j === 0 ? -Infinity : nums2[j - 1];\n    const minRightB = j === n ? Infinity : nums2[j];\n\n    if (maxLeftA <= minRightB && minRightA >= maxLeftB) {\n      return (m + n) % 2 === 1\n        ? Math.max(maxLeftA, maxLeftB)\n        : (Math.max(maxLeftA, maxLeftB) + Math.min(minRightA, minRightB)) / 2;\n    } else if (maxLeftA > minRightB) {\n      high = i - 1;\n    } else {\n      low = low + 1;\n    }\n  }\n};\n"}]},"longest-palindromic-substring":{id:"5",name:"longest-palindromic-substring",pre:[{text:"\u56de\u6587",link:null,color:"lime"}],keyPoints:[{text:"\u201d\u5ef6\u4f38\u201c\uff08extend\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/5.longest-palindromic-substring.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/5.longest-palindromic-substring.md",code:[{language:"js",text:"\nif (s[i] === s[j] && dp[i + 1][j - 1]) {\n  dp[i][j] = true;\n}\n"},{language:"js",text:'\n/*\n * @lc app=leetcode id=5 lang=javascript\n *\n * [5] Longest Palindromic Substring\n */\n/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n  // babad\n  // tag : dp\n  if (!s || s.length === 0) return "";\n  let res = s[0];\n\n  const dp = [];\n\n  // \u5012\u7740\u904d\u5386\u7b80\u5316\u64cd\u4f5c\uff0c \u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662fdp[i][..]\u4f9d\u8d56\u4e8edp[i + 1][..]\n  for (let i = s.length - 1; i >= 0; i--) {\n    dp[i] = [];\n    for (let j = i; j < s.length; j++) {\n      if (j - i === 0) dp[i][j] = true;\n      // specail case 1\n      else if (j - i === 1 && s[i] === s[j]) dp[i][j] = true;\n      // specail case 2\n      else if (s[i] === s[j] && dp[i + 1][j - 1]) {\n        // state transition\n        dp[i][j] = true;\n      }\n\n      if (dp[i][j] && j - i + 1 > res.length) {\n        // update res\n        res = s.slice(i, j + 1);\n      }\n    }\n  }\n\n  return res;\n};\n'},{language:"py",text:'\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        n = len(s)\n        if n == 0:\n            return ""\n        res = s[0]\n        def extend(i, j, s):\n            while(i >= 0 and j < len(s) and s[i] == s[j]):\n                i -= 1\n                j += 1\n            return s[i + 1:j]\n\n        for i in range(n - 1):\n            e1 = extend(i, i, s)\n            e2 = extend(i, i + 1, s)\n            if max(len(e1), len(e2)) > len(res):\n                res = e1 if len(e1) > len(e2) else e2\n        return res\n'}]},"container-with-most-water":{id:"11",name:"container-with-most-water",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u53cc\u6307\u9488\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u963f\u91cc\u5df4\u5df4"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/11.container-with-most-water.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/11.container-with-most-water.md",code:[{language:"js",text:"\nlet max = 0;\nfor (let i = 0; i < height.length; i++) {\n  for (let j = i + 1; j < height.length; j++) {\n    const currentArea = Math.abs(i - j) * Math.min(height[i], height[j]);\n    if (currentArea > max) {\n      max = currentArea;\n    }\n  }\n}\nreturn max;\n"},{language:"js",text:"\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function (height) {\n  if (!height || height.length <= 1) return 0;\n\n  let leftPos = 0;\n  let rightPos = height.length - 1;\n  let max = 0;\n  while (leftPos < rightPos) {\n    const currentArea =\n      Math.abs(leftPos - rightPos) *\n      Math.min(height[leftPos], height[rightPos]);\n    if (currentArea > max) {\n      max = currentArea;\n    }\n    // \u66f4\u65b0\u5c0f\u7684\n    if (height[leftPos] < height[rightPos]) {\n      leftPos++;\n    } else {\n      // \u5982\u679c\u76f8\u7b49\u5c31\u968f\u4fbf\u4e86\n      rightPos--;\n    }\n  }\n\n  return max;\n};\n"},{language:"py",text:"\nclass Solution:\n    def maxArea(self, heights):\n        l, r =  0, len(heights) - 1\n        ans = 0\n        while l < r:\n            ans = max(ans, (r - l) * min(heights[l], heights[r]))\n            if heights[r] > heights[l]:\n                l += 1\n            else:\n                r -= 1\n        return ans\n"}]},"3-sum":{id:"15",name:"3-sum",pre:[{text:"\u6392\u5e8f",link:null,color:"purple"},{text:"\u53cc\u6307\u9488",link:null,color:"green"},{text:"\u5206\u6cbb",link:null,color:"gold"}],keyPoints:[{text:"\u6392\u5e8f\u4e4b\u540e\uff0c\u7528\u53cc\u6307\u9488",link:null,color:"blue"},{text:"\u5206\u6cbb",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/15.3-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/15.3-sum.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=15 lang=javascript\n *\n * [15] 3Sum\n *\n * https://leetcode.com/problems/3sum/description/\n *\n * algorithms\n * Medium (23.51%)\n * Total Accepted:    531.5K\n * Total Submissions: 2.2M\n * Testcase Example:  '[-1,0,1,2,-1,-4]'\n *\n * Given an array nums of n integers, are there elements a, b, c in nums such\n * that a + b + c = 0? Find all unique triplets in the array which gives the\n * sum of zero.\n *\n * Note:\n *\n * The solution set must not contain duplicate triplets.\n *\n * Example:\n *\n *\n * Given array nums = [-1, 0, 1, 2, -1, -4],\n *\n * A solution set is:\n * [\n * \u2060 [-1, 0, 1],\n * \u2060 [-1, -1, 2]\n * ]\n *\n *\n */\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function (nums) {\n  if (nums.length < 3) return [];\n  const list = [];\n  nums.sort((a, b) => a - b);\n  for (let i = 0; i < nums.length; i++) {\n    //nums is sorted,so it's impossible to have a sum = 0\n    if (nums[i] > 0) break;\n    // skip duplicated result without set\n    if (i > 0 && nums[i] === nums[i - 1]) continue;\n    let left = i + 1;\n    let right = nums.length - 1;\n\n    // for each index i\n    // we want to find the triplet [i, left, right] which sum to 0\n    while (left < right) {\n      // since left < right, and left > i, no need to compare i === left and i === right.\n      if (nums[left] + nums[right] + nums[i] === 0) {\n        list.push([nums[left], nums[right], nums[i]]);\n        // skip duplicated result without set\n        while (nums[left] === nums[left + 1]) {\n          left++;\n        }\n        left++;\n        // skip duplicated result without set\n        while (nums[right] === nums[right - 1]) {\n          right--;\n        }\n        right--;\n        continue;\n      } else if (nums[left] + nums[right] + nums[i] > 0) {\n        right--;\n      } else {\n        left++;\n      }\n    }\n  }\n  return list;\n};\n"}]},"Letter-Combinations-of-a-Phone-Number":{id:"17",name:"Letter-Combinations-of-a-Phone-Number",pre:[{text:"\u56de\u6eaf",link:null,color:"green"}],keyPoints:[{text:"\u56de\u6eaf",link:null,color:"blue"},{text:"\u56de\u6eaf\u6a21\u677f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/17.Letter-Combinations-of-a-Phone-Number.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/17.Letter-Combinations-of-a-Phone-Number.md",code:[{language:"js",text:'\n/**\n * @param {string} digits\n * @return {string[]}\n */\nconst letterCombinations = function (digits) {\n  if (!digits) {\n    return [];\n  }\n  const len = digits.length;\n  const map = new Map();\n  map.set("2", "abc");\n  map.set("3", "def");\n  map.set("4", "ghi");\n  map.set("5", "jkl");\n  map.set("6", "mno");\n  map.set("7", "pqrs");\n  map.set("8", "tuv");\n  map.set("9", "wxyz");\n  const result = [];\n\n  function generate(i, str) {\n    if (i == len) {\n      result.push(str);\n      return;\n    }\n    const tmp = map.get(digits[i]);\n    for (let r = 0; r < tmp.length; r++) {\n      generate(i + 1, str + tmp[r]);\n    }\n  }\n  generate(0, "");\n  return result;\n};\n'}]},removeNthNodeFromEndofList:{id:"19",name:"removeNthNodeFromEndofList",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u89e3\u67901.\u94fe\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u7279\u70b9\u548c\u4f7f\u75282.\u4f7f\u7528\u53cc\u6307\u94883.\u4f7f\u7528\u4e00\u4e2adummyHead\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/19.removeNthNodeFromEndofList.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/19.removeNthNodeFromEndofList.md",code:[{language:"java",text:"\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        TreeNode dummy = new TreeNode(0);\n        dummy.next = head;\n        TreeNode first = dummy;\n        TreeNode second = dummy;\n\n        if (int i=0; i<=n; i++) {\n            first = first.next;\n        }\n\n        while (first != null) {\n            first = first.next;\n            second = second.next;\n        }\n\n        second.next = second.next.next;\n\n        return dummy.next;\n    }\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=19 lang=javascript\n *\n * [19] Remove Nth Node From End of List\n *\n * https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/\n *\n * algorithms\n * Medium (34.03%)\n * Total Accepted:    360.1K\n * Total Submissions: 1.1M\n * Testcase Example:  '[1,2,3,4,5]\\n2'\n *\n * Given a linked list, remove the n-th node from the end of list and return\n * its head.\n *\n * Example:\n *\n *\n * Given linked list: 1->2->3->4->5, and n = 2.\n *\n * After removing the second node from the end, the linked list becomes\n * 1->2->3->5.\n *\n *\n * Note:\n *\n * Given n will always be valid.\n *\n * Follow up:\n *\n * Could you do this in one pass?\n *\n */\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function (head, n) {\n  let i = -1;\n  const noop = {\n    next: null,\n  };\n\n  const dummyHead = new ListNode(); // \u589e\u52a0\u4e00\u4e2adummyHead \u7b80\u5316\u64cd\u4f5c\n  dummyHead.next = head;\n\n  let currentP1 = dummyHead;\n  let currentP2 = dummyHead;\n\n  while (currentP1) {\n    if (i === n) {\n      currentP2 = currentP2.next;\n    }\n\n    if (i !== n) {\n      i++;\n    }\n\n    currentP1 = currentP1.next;\n  }\n\n  currentP2.next = ((currentP2 || noop).next || noop).next;\n\n  return dummyHead.next;\n};\n"}]},"valid-parentheses":{id:"20",name:"valid-parentheses",pre:[{text:"\u6808",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"red"}],keyPoints:[{text:"\u89e3\u67901.\u6808\u7684\u57fa\u672c\u7279\u70b9\u548c\u64cd\u4f5c2.\u5982\u679c\u4f60\u7528\u7684\u662fJS\u6ca1\u6709\u73b0\u6210\u7684\u6808\uff0c\u53ef\u4ee5\u7528\u6570\u7ec4\u6765\u6a21\u62df\u5165\uff1apush\u51fa\uff1apop>\u5165\uff1apush\u51fashift\u5c31\u662f\u961f\u5217",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"airbnb"},{name:"amazon"},{name:"bloomberg"},{name:"facebook"},{name:"google"},{name:"microsoft"},{name:"twitter"},{name:"zenefits"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/20.valid-parentheses.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/20.valid-parentheses.md",code:[{language:"js",text:'\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function (s) {\n  let valid = true;\n  const stack = [];\n  const mapper = {\n    "{": "}",\n    "[": "]",\n    "(": ")",\n  };\n\n  for (let i in s) {\n    const v = s[i];\n    if (["(", "[", "{"].indexOf(v) > -1) {\n      stack.push(v);\n    } else {\n      const peak = stack.pop();\n      if (v !== mapper[peak]) {\n        return false;\n      }\n    }\n  }\n\n  if (stack.length > 0) return false;\n\n  return valid;\n};\n'},{language:"js",text:'\nvar isValid = function (s) {\n  while (s.includes("[]") || s.includes("()") || s.includes("{}")) {\n    s = s.replace("[]", "").replace("()", "").replace("{}", "");\n  }\n  s = s.replace("[]", "").replace("()", "").replace("{}", "");\n  return s.length === 0;\n};\n'},{language:"cpp",text:"\nclass Solution {\npublic:\n    bool isValid(string s) {\n        int top = -1;\n        for(int i =0;i<s.length();++i){\n            if(top<0 || !isMatch(s[top], s[i])){\n                ++top;\n                s[top] = s[i];\n            }else{\n                --top;\n            }\n        }\n        return top == -1;\n    }\n    bool isMatch(char c1, char c2){\n        if(c1 == '(' && c2 == ')') return true;\n        if(c1 == '[' && c2 == ']') return true;\n        if(c1 == '{' && c2 == '}') return true;\n        return false;\n    }\n};\n"},{language:"py",text:'\n    class Solution:\n        def isValid(self,s):\n          stack = []\n          map = {\n            "{":"}",\n            "[":"]",\n            "(":")"\n          }\n          for x in s:\n            if x in map:\n              stack.append(map[x])\n            else:\n              if len(stack)!=0:\n                top_element = stack.pop()\n                if x != top_element:\n                  return False\n                else:\n                  continue\n              else:\n                return False\n          return len(stack) == 0\n'},{language:"py",text:"\nclass Solution:\n     def isValid(self, s):\n\n        while '[]' in s or '()' in s or '{}' in s:\n            s = s.replace('[]','').replace('()','').replace('{}','')\n        return not len(s)\n"}]},"merge-two-sorted-lists":{id:"21",name:"merge-two-sorted-lists",pre:[{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"orange"},{text:"\u94fe\u8868",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"magenta"}],keyPoints:[{text:"\u638c\u63e1\u94fe\u8868\u6570\u636e\u7ed3\u6784",link:null,color:"blue"},{text:"\u8003\u8651\u8fb9\u754c\u60c5\u51b52",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u817e\u8baf"},{name:"amazon"},{name:"apple"},{name:"linkedin"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/21.merge-two-sorted-lists.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/21.merge-two-sorted-lists.md",code:[{language:"js",text:"\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nconst mergeTwoLists = function (l1, l2) {\n  if (l1 === null) {\n    return l2;\n  }\n  if (l2 === null) {\n    return l1;\n  }\n  if (l1.val < l2.val) {\n    l1.next = mergeTwoLists(l1.next, l2);\n    return l1;\n  } else {\n    l2.next = mergeTwoLists(l1, l2.next);\n    return l2;\n  }\n};\n"}]},"generate-parentheses":{id:"22",name:"generate-parentheses",pre:[{text:"DFS",link:null,color:"red"},{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u5f53l<r\u65f6\u8bb0\u5f97\u526a\u679d",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/22.generate-parentheses.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/22.generate-parentheses.md",code:[{language:"js",text:'\n/**\n * @param {number} n\n * @return {string[]}\n * @param l \u5de6\u62ec\u53f7\u5df2\u7ecf\u7528\u4e86\u51e0\u4e2a\n * @param r \u53f3\u62ec\u53f7\u5df2\u7ecf\u7528\u4e86\u51e0\u4e2a\n * @param str \u5f53\u524d\u9012\u5f52\u5f97\u5230\u7684\u62fc\u63a5\u5b57\u7b26\u4e32\u7ed3\u679c\n * @param res \u7ed3\u679c\u96c6\n */\nconst generateParenthesis = function (n) {\n  const res = [];\n\n  function dfs(l, r, str) {\n    if (l == n && r == n) {\n      return res.push(str);\n    }\n    // l \u5c0f\u4e8e r \u65f6\u4e0d\u6ee1\u8db3\u6761\u4ef6 \u526a\u679d\n    if (l < r) {\n      return;\n    }\n    // l \u5c0f\u4e8e n \u65f6\u53ef\u4ee5\u63d2\u5165\u5de6\u62ec\u53f7\uff0c\u6700\u591a\u53ef\u4ee5\u63d2\u5165 n \u4e2a\n    if (l < n) {\n      dfs(l + 1, r, str + "(");\n    }\n    // r < l \u65f6 \u53ef\u4ee5\u63d2\u5165\u53f3\u62ec\u53f7\n    if (r < l) {\n      dfs(l, r + 1, str + ")");\n    }\n  }\n  dfs(0, 0, "");\n  return res;\n};\n'}]},"merge-k-sorted-lists":{id:"23",name:"merge-k-sorted-lists",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"\u5f52\u5e76\u6392\u5e8f",link:null,color:"cyan"}],keyPoints:[{text:"\u5206\u6cbb",link:null,color:"blue"},{text:"\u5f52\u5e76\u6392\u5e8f(mergesort)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/23.merge-k-sorted-lists.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/23.merge-k-sorted-lists.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=23 lang=javascript\n *\n * [23] Merge k Sorted Lists\n *\n * https://leetcode.com/problems/merge-k-sorted-lists/description/\n *\n */\nfunction mergeTwoLists(l1, l2) {\n  const dummyHead = {};\n  let current = dummyHead;\n  // l1: 1 -> 3 -> 5\n  // l2: 2 -> 4 -> 6\n  while (l1 !== null && l2 !== null) {\n    if (l1.val < l2.val) {\n      current.next = l1; // \u628a\u5c0f\u7684\u6dfb\u52a0\u5230\u7ed3\u679c\u94fe\u8868\n      current = current.next; // \u79fb\u52a8\u7ed3\u679c\u94fe\u8868\u7684\u6307\u9488\n      l1 = l1.next; // \u79fb\u52a8\u5c0f\u7684\u90a3\u4e2a\u94fe\u8868\u7684\u6307\u9488\n    } else {\n      current.next = l2;\n      current = current.next;\n      l2 = l2.next;\n    }\n  }\n\n  if (l1 === null) {\n    current.next = l2;\n  } else {\n    current.next = l1;\n  }\n  return dummyHead.next;\n}\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n  // \u56fe\u53c2\u8003\uff1a https://zhuanlan.zhihu.com/p/61796021\n  if (lists.length === 0) return null;\n  if (lists.length === 1) return lists[0];\n  if (lists.length === 2) {\n    return mergeTwoLists(lists[0], lists[1]);\n  }\n\n  const mid = lists.length >> 1;\n  const l1 = [];\n  for (let i = 0; i < mid; i++) {\n    l1[i] = lists[i];\n  }\n\n  const l2 = [];\n  for (let i = mid, j = 0; i < lists.length; i++, j++) {\n    l2[j] = lists[i];\n  }\n\n  return mergeTwoLists(mergeKLists(l1), mergeKLists(l2));\n};\n"}]},swapNodesInPairs:{id:"24",name:"swapNodesInPairs",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u89e3\u67901.\u94fe\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u7279\u70b9\u548c\u4f7f\u75282.dummyHead\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/24.swapNodesInPairs.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/24.swapNodesInPairs.md",code:[{language:"js",text:"\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n  const dummy = new ListNode(0);\n  dummy.next = head;\n  let current = dummy;\n  while (current.next != null && current.next.next != null) {\n    // \u521d\u59cb\u5316\u53cc\u6307\u9488\n    const first = current.next;\n    const second = current.next.next;\n    \n    // \u66f4\u65b0\u53cc\u6307\u9488\u548c current \u6307\u9488\n    first.next = second.next;\n    second.next = first;\n    current.next = second;\n\n    // \u66f4\u65b0\u6307\u9488\n    current = current.next.next;\n  }\n  return dummy.next;\n};\n\n"},{language:"py",text:'\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        """\n        \u7528\u9012\u5f52\u5b9e\u73b0\u94fe\u8868\u76f8\u90bb\u4e92\u6362\uff1a\n        \u7b2c\u4e00\u4e2a\u8282\u70b9\u7684 next \u662f\u7b2c\u4e09\u3001\u7b2c\u56db\u4e2a\u8282\u70b9\u4ea4\u6362\u7684\u7ed3\u679c\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684 next \u662f\u7b2c\u4e00\u4e2a\u8282\u70b9\uff1b\n        \u7b2c\u4e09\u4e2a\u8282\u70b9\u7684 next \u662f\u7b2c\u4e94\u3001\u7b2c\u516d\u4e2a\u8282\u70b9\u4ea4\u6362\u7684\u7ed3\u679c\uff0c\u7b2c\u56db\u4e2a\u8282\u70b9\u7684 next \u662f\u7b2c\u4e09\u4e2a\u8282\u70b9\uff1b\n        \u4ee5\u6b64\u7c7b\u63a8\n        :param ListNode head\n        :return ListNode\n        """\n        # \u5982\u679c\u4e3a None \u6216 next \u4e3a None\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        if not head or not head.next:\n            return head\n\n        _next = head.next\n        head.next = self.swapPairs(_next.next)\n        _next.next = head\n        return _next\n'}]},"reverse-nodes-in-k-groups-cn":{id:"25",name:"reverse-nodes-in-k-groups-cn",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u5206\u67901.\u521b\u5efa\u4e00\u4e2adummynode2.\u5bf9\u94fe\u8868\u4ee5k\u4e3a\u5355\u4f4d\u8fdb\u884c\u5206\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e00\u7ec4\u7684\u8d77\u59cb\u548c\u6700\u540e\u8282\u70b9\u4f4d\u7f6e3.\u5bf9\u6bcf\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u66f4\u6362\u8d77\u59cb\u548c\u6700\u540e\u7684\u4f4d\u7f6e4.\u8fd4\u56de`dummy.next`.",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/25.reverse-nodes-in-k-groups-cn.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/25.reverse-nodes-in-k-groups-cn.md",code:[{language:"java",text:"\nclass ReverseKGroupsLinkedList {\n  public ListNode reverseKGroup(ListNode head, int k) {\n      if (head == null || k == 1) {\n        return head;\n      }\n      ListNode dummy = new ListNode(0);\n      dummy.next = head;\n\n      ListNode start = dummy;\n      ListNode end = head;\n      int count = 0;\n      while (end != null) {\n        count++;\n        // group\n        if (count % k == 0) {\n          // reverse linked list (start, end]\n          start = reverse(start, end.next);\n          end = start.next;\n        } else {\n          end = end.next;\n        }\n      }\n      return dummy.next;\n    }\n\n    /**\n     * reverse linked list from range (start, end), return last node.\n     * for example:\n     * 0->1->2->3->4->5->6->7->8\n     * |           |\n     * start       end\n     *\n     * After call start = reverse(start, end)\n     *\n     * 0->3->2->1->4->5->6->7->8\n     *          |  |\n     *       start end\n     *       first\n     *\n     */\n    private ListNode reverse(ListNode start, ListNode end) {\n      ListNode curr = start.next;\n      ListNode prev = start;\n      ListNode first = curr;\n      while (curr != end){\n        ListNode temp = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = temp;\n      }\n      start.next = prev;\n      first.next = curr;\n      return first;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar reverseKGroup = function (head, k) {\n  // \u6807\u5175\n  let dummy = new ListNode();\n  dummy.next = head;\n  let [start, end] = [dummy, dummy.next];\n  let count = 0;\n  while (end) {\n    count++;\n    if (count % k === 0) {\n      start = reverseList(start, end.next);\n      end = start.next;\n    } else {\n      end = end.next;\n    }\n  }\n  return dummy.next;\n\n  // \u7ffb\u8f6cstat -> end\u7684\u94fe\u8868\n  function reverseList(start, end) {\n    let [pre, cur] = [start, start.next];\n    const first = cur;\n    while (cur !== end) {\n      let next = cur.next;\n      cur.next = pre;\n      pre = cur;\n      cur = next;\n    }\n    start.next = pre;\n    first.next = cur;\n    return first;\n  }\n};\n"},{language:"py",text:"\nclass Solution:\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        if head is None or k < 2:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        start = dummy\n        end = head\n        count = 0\n        while end:\n            count += 1\n            if count % k == 0:\n                start = self.reverse(start, end.next)\n                # end \u8c03\u5230\u4e0b\u4e00\u4e2a\n                end = start.next\n            else:\n                end = end.next\n        return dummy.next\n    # (start, end\uff09 \u5de6\u53f3\u90fd\u5f00\u653e\n\n    def reverse(self, start, end):\n        prev, curr = start, start.next\n        first = curr\n        # \u53cd\u8f6c\n        while curr != end:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        # \u5c06\u53cd\u8f6c\u540e\u7684\u94fe\u8868\u6dfb\u52a0\u5230\u539f\u94fe\u8868\u4e2d\n        start.next = prev\n        first.next = end\n        # \u8fd4\u56de\u53cd\u8f6c\u524d\u7684\u5934\uff0c \u4e5f\u5c31\u662f\u53cd\u8f6c\u540e\u7684\u5c3e\u90e8\n        return first\n\n"},{language:"py",text:"\n\nclass Solution:\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        if head is None or k < 2:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        cur = head\n        count = 0\n        while cur:\n            count += 1\n            if count % k == 0:\n                pre = self.reverse(pre, cur.next)\n                # end \u8c03\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n                cur = pre.next\n            else:\n                cur = cur.next\n        return dummy.next\n    # (p1, p4\uff09 \u5de6\u53f3\u90fd\u5f00\u653e\n\n    def reverse(self, p1, p4):\n        prev, curr = p1, p1.next\n        p2 = curr\n        # \u53cd\u8f6c\n        while curr != p4:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        # \u5c06\u53cd\u8f6c\u540e\u7684\u94fe\u8868\u6dfb\u52a0\u5230\u539f\u94fe\u8868\u4e2d\n        # prev \u76f8\u5f53\u4e8e p3\n        p1.next = prev\n        p2.next = p4\n        # \u8fd4\u56de\u53cd\u8f6c\u524d\u7684\u5934\uff0c \u4e5f\u5c31\u662f\u53cd\u8f6c\u540e\u7684\u5c3e\u90e8\n        return p2\n\n# @lc code=end\n\n"}]},"remove-duplicates-from-sorted-array":{id:"26",name:"remove-duplicates-from-sorted-array",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u53cc\u6307\u9488\u8fd9\u9053\u9898\u5982\u679c\u4e0d\u8981\u6c42\uff0cO(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0cO(1)\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u8bdd\uff0c\u4f1a\u5f88\u7b80\u5355\u3002\u4f46\u662f\u8fd9\u9053\u9898\u662f\u8981\u6c42\u7684\uff0c\u8fd9\u79cd\u9898\u7684\u601d\u8def\u4e00\u822c\u90fd\u662f\u91c7\u7528\u53cc\u6307\u9488",link:null,color:"blue"},{text:"\u5982\u679c\u662f\u6570\u636e\u662f\u65e0\u5e8f\u7684\uff0c\u5c31\u4e0d\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u4e86\uff0c\u4ece\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u770b\u51fa\u6392\u5e8f\u5728\u7b97\u6cd5\u4e2d\u7684\u57fa\u7840\u6027\u548c\u91cd\u8981\u6027\u3002",link:null,color:"blue"},{text:"\u6ce8\u610fnums\u4e3a\u7a7a\u65f6\u7684\u8fb9\u754c\u6761\u4ef6\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"bloomberg"},{name:"facebook"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/26.remove-duplicates-from-sorted-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/26.remove-duplicates-from-sorted-array.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    const size = nums.length;\n    if(size==0) return 0;\n    let slowP = 0;\n    for (let fastP = 0; fastP < size; fastP++) {\n        if (nums[fastP] !== nums[slowP]) {\n            slowP++;\n            nums[slowP] = nums[fastP]\n        }\n    }\n    return slowP + 1;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if(nums.empty()) return 0;\n        int fast,slow;\n        fast=slow=0;\n        while(fast!=nums.size()){\n            if(nums[fast]==nums[slow]) fast++;\n            else {\n                slow++;\n                nums[slow]=nums[fast];\n                fast++;\n            }\n        }\n        return slow+1;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        if nums:\n            slow = 0\n            for fast in range(1, len(nums)):\n                if nums[fast] != nums[slow]:\n                    slow += 1\n                    nums[slow] = nums[fast]\n            return slow + 1\n        else:\n            return 0\n"}]},"divide-two-integers":{id:"29",name:"divide-two-integers",pre:[{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"blue"},{text:"\u6b63\u8d1f\u6570\u7684\u5224\u65ad\u4e2d\uff0c\u8fd9\u6837\u5224\u65ad\u66f4\u7b80\u5355\u3002```jsconstisNegative=dividend>0!==divisor>0;```",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/29.divide-two-integers.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/29.divide-two-integers.md",code:[{language:"js",text:"\n  let acc = divisor;\n  let count = 0;\n\n  while (dividend - acc >= 0) {\n    acc += divisor;\n    count++;\n  }\n\n  return count;\n\n"},{language:"js",text:"\nconst isNegative = dividend > 0 !== divisor > 0;\n"},{language:"js",text:"\n\n\n/*\n * @lc app=leetcode id=29 lang=javascript\n *\n * [29] Divide Two Integers\n */\n/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n  if (divisor === 1) return dividend;\n\n  // \u8fd9\u79cd\u65b9\u6cd5\u5f88\u5de7\u5999\uff0c\u5373\u7b26\u53f7\u76f8\u540c\u5219\u4e3a\u6b63\uff0c\u4e0d\u540c\u5219\u4e3a\u8d1f\n  const isNegative = dividend > 0 !== divisor > 0;\n\n  const MAX_INTERGER = Math.pow(2, 31);\n\n  const res = helper(Math.abs(dividend), Math.abs(divisor));\n\n  // overflow\n  if (res > MAX_INTERGER - 1 || res < -1 * MAX_INTERGER) {\n    return MAX_INTERGER - 1;\n  }\n\n  return isNegative ? -1 * res : res;\n};\n\nfunction helper(dividend, divisor) {\n  // \u4e8c\u5206\u6cd5\n  if (dividend <= 0) return 0;\n  if (dividend < divisor) return 0;\n  if (divisor === 1) return dividend;\n\n  let acc = 2 * divisor;\n  let count = 1;\n\n  while (dividend - acc > 0) {\n    acc += acc;\n    count += count;\n  }\n  // \u76f4\u63a5\u4f7f\u7528\u4f4d\u79fb\u8fd0\u7b97\uff0c\u6bd4\u5982acc >> 1\u4f1a\u6709\u95ee\u9898\n  const last = dividend - Math.floor(acc / 2);\n\n  return count + helper(last, divisor);\n}\n"},{language:"py",text:'\nclass Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        """\n        \u4e8c\u5206\u6cd5\n        :param int divisor\n        :param int dividend\n        :return int\n        """\n        # \u9519\u8bef\u5904\u7406\n        if divisor == 0:\n            raise ZeroDivisionError\n        if abs(divisor) == 1:\n            result = dividend if 1 == divisor else -dividend\n            return min(2**31-1, max(-2**31, result))\n\n        # \u786e\u5b9a\u7ed3\u679c\u7684\u7b26\u53f7\n        sign = ((dividend >= 0) == (divisor >= 0))\n        \n        result = 0\n        # abs\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199\u5728while\u6761\u4ef6\u4e2d\uff0c\u4e0d\u8fc7\u53ef\u80fd\u4f1a\u591a\u8ba1\u7b97\u51e0\u6b21\n        _divisor = abs(divisor)\n        _dividend = abs(dividend)\n        \n        while _divisor <= _dividend:\n            r, _dividend = self._multi_divide(_divisor, _dividend)\n            result += r\n        \n        result = result if sign else -result\n\n        # \u6ce8\u610f\u8fd4\u56de\u503c\u4e0d\u80fd\u8d85\u8fc732\u4f4d\u6709\u7b26\u53f7\u6570\u7684\u8868\u793a\u8303\u56f4\n        return min(2**31-1, max(-2**31, result))\n    \n    def _multi_divide(self, divisor, dividend):\n        """\n        \u7ffb\u500d\u9664\u6cd5\uff0c\u5982\u679c\u53ef\u4ee5\u88ab\u9664\uff0c\u5219\u4e0b\u4e00\u6b65\u9664\u6570\u7ffb\u500d\uff0c\u76f4\u81f3\u9664\u6570\u5927\u4e8e\u88ab\u9664\u6570\uff0c\n        \u8fd4\u56de\u5546\u52a0\u603b\u7684\u7ed3\u679c\u4e0e\u88ab\u9664\u6570\u7684\u5269\u4f59\u503c\uff1b\n        \u8fd9\u91cc\u5c31\u4e0d\u505a\u5f02\u5e38\u5904\u7406\u4e86\uff1b\n        :param int divisor\n        :param int dividend\n        :return tuple result, left_dividend\n        """\n        result = 0\n        times_count = 1\n        while divisor <= dividend:\n            dividend -= divisor\n            result += times_count\n            times_count += times_count\n            divisor += divisor\n        return result, dividend\n'}]},"substring-with-concatenation-of-all-words":{id:"30",name:"substring-with-concatenation-of-all-words",pre:[{text:"\u5b57\u7b26\u4e32",link:null,color:"green"},{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"Counter",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/30.substring-with-concatenation-of-all-words.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/30.substring-with-concatenation-of-all-words.md",code:[{language:"py",text:"\nfrom collections import Counter\n\n\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words:\n            return []\n        res = []\n        n = len(words)\n        word_len = len(words[0])\n        window_len = word_len * n\n        target = Counter(words)\n        i = 0\n        while i < len(s) - window_len + 1:\n            sliced = []\n            start = i\n            for _ in range(n):\n                sliced.append(s[start:start + word_len])\n                start += word_len\n            if Counter(sliced) == target:\n                res.append(i)\n            i += 1\n        return res\n"}]},"next-permutation":{id:"31",name:"next-permutation",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u5199\u51e0\u4e2a\u4f8b\u5b50\u901a\u5e38\u4f1a\u5e2e\u52a9\u7406\u89e3\u95ee\u9898\u7684\u89c4\u5f8b",link:null,color:"blue"},{text:"\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u9996\u5c3e\u6307\u9488\u4e0d\u65ad\u4ea4\u6362\u4f4d\u7f6e\u5373\u53ef\u5b9e\u73b0reverse",link:null,color:"blue"},{text:"\u627e\u5230\u4ece\u53f3\u8fb9\u8d77`\u7b2c\u4e00\u4e2a\u5927\u4e8enums[i]\u7684`\uff0c\u5e76\u5c06\u5176\u548cnums[i]\u8fdb\u884c\u4ea4\u6362",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/31.next-permutation.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/31.next-permutation.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=31 lang=javascript\n *\n * [31] Next Permutation\n */\n\nfunction reverseRange(A, i, j) {\n  while (i < j) {\n    const temp = A[i];\n    A[i] = A[j];\n    A[j] = temp;\n    i++;\n    j--;\n  }\n}\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar nextPermutation = function(nums) {\n  // \u65f6\u95f4\u590d\u6742\u5ea6O(n) \u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n  if (nums == null || nums.length <= 1) return;\n\n  let i = nums.length - 2;\n  // \u4ece\u540e\u5f80\u524d\u627e\u5230\u7b2c\u4e00\u4e2a\u964d\u5e8f\u7684,\u76f8\u5f53\u4e8e\u627e\u5230\u4e86\u6211\u4eec\u7684\u56de\u6eaf\u70b9\n  while (i > -1 && nums[i + 1] <= nums[i]) i--;\n\n  // \u5982\u679c\u627e\u4e86\u5c31swap\n  if (i > -1) {\n    let j = nums.length - 1;\n    // \u627e\u5230\u4ece\u53f3\u8fb9\u8d77\u7b2c\u4e00\u4e2a\u5927\u4e8enums[i]\u7684\uff0c\u5e76\u5c06\u5176\u548cnums[i]\u8fdb\u884c\u4ea4\u6362\n    // \u56e0\u4e3a\u5982\u679c\u4ea4\u6362\u7684\u6570\u5b57\u6bd4nums[i]\u8fd8\u8981\u5c0f\u80af\u5b9a\u4e0d\u7b26\u5408\u9898\u610f\n    while (nums[j] <= nums[i]) j--;\n    const temp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = temp;\n  }\n\n  // \u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5269\u4e0b\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\uff0c\u4f9d\u6b21\u586b\u5165\u5f53\u524d\u6700\u5c0f\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u662f\u5927\u4e8e\u5f53\u524d\u6392\u5217\u7684\u6700\u5c0f\u503c\u4e86\n  // [i + 1, A.length -1]\u7684\u5143\u7d20\u8fdb\u884c\u53cd\u8f6c\n\n  reverseRange(nums, i + 1, nums.length - 1);\n};\n"},{language:"py",text:'\nclass Solution:\n    def nextPermutation(self, nums):\n        """\n        Do not return anything, modify nums in-place instead.\n        :param list nums\n        """\n        # \u7b2c\u4e00\u6b65\uff0c\u4ece\u540e\u5f80\u524d\uff0c\u627e\u5230\u4e0b\u964d\u70b9\n        down_index = None\n        for i in range(len(nums)-2, -1, -1):\n            if nums[i] < nums[i+1]:\n                down_index = i\n                break\n        # \u5982\u679c\u6ca1\u6709\u4e0b\u964d\u70b9\uff0c\u91cd\u65b0\u6392\u5217\n        if down_index is None:\n            nums.reverse()\n        # \u5982\u679c\u6709\u4e0b\u964d\u70b9\n        else:\n            # \u7b2c\u4e8c\u6b65\uff0c\u4ece\u540e\u5f80\u524d\uff0c\u627e\u5230\u6bd4\u4e0b\u964d\u70b9\u5927\u7684\u6570\uff0c\u5bf9\u6362\u4f4d\u7f6e\n            for i in range(len(nums)-1, i, -1):\n                if nums[down_index] < nums[i]:\n                    nums[down_index], nums[i] = nums[i], nums[down_index]\n                    break\n            # \u7b2c\u4e09\u90e8\uff0c\u91cd\u65b0\u6392\u5217\u4e0b\u964d\u70b9\u4e4b\u540e\u7684\u6570\n            i, j = down_index+1, len(nums)-1\n            while i < j:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j -= 1\n'},{language:"py",text:'\nclass Solution:\n    def nextPermutation(self, nums):\n        """\n        Do not return anything, modify nums in-place instead.\n        :param list nums\n        """\n        # \u7b2c\u4e00\u6b65\uff0c\u4ece\u540e\u5f80\u524d\uff0c\u627e\u5230\u4e0b\u964d\u70b9\n        down_index = None\n        for i in range(len(nums)-2, -1, -1):\n            if nums[i] < nums[i+1]:\n                down_index = i\n                break\n        # \u5982\u679c\u6ca1\u6709\u4e0b\u964d\u70b9\uff0c\u91cd\u65b0\u6392\u5217\n        if down_index is None:\n            nums.reverse()\n        # \u5982\u679c\u6709\u4e0b\u964d\u70b9\n        else:\n            # \u7b2c\u4e8c\u6b65\uff0c\u4ece\u540e\u5f80\u524d\uff0c\u627e\u5230\u6bd4\u4e0b\u964d\u70b9\u5927\u7684\u6570\uff0c\u5bf9\u6362\u4f4d\u7f6e\n            for i in range(len(nums)-1, i, -1):\n                if nums[down_index] < nums[i]:\n                    nums[down_index], nums[i] = nums[i], nums[down_index]\n                    break\n            # \u7b2c\u4e09\u6b65\uff0c\u91cd\u65b0\u6392\u5217\u4e0b\u964d\u70b9\u4e4b\u540e\u7684\u6570\n            i, j = down_index+1, len(nums)-1\n            while i < j:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j -= 1\n'}]},"longest-valid-parentheses":{id:"32",name:"longest-valid-parentheses",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u89e3\u67901.\u7b2c3\u70b9\u7279\u5f81,\u9700\u8981\u68c0\u67e5\u7684\u5b57\u7b26\u662fs[i",link:null,color:"blue"},{text:"1]\u548cs[i",link:null,color:"blue"},{text:"2",link:null,color:"blue"},{text:"dp[i",link:null,color:"blue"},{text:"1]],\u6839\u636e\u5b9a\u4e49\u53ef\u77e5:i",link:null,color:"blue"},{text:"1>=dp[i",link:null,color:"blue"},{text:"1],\u4f46\u662fi",link:null,color:"blue"},{text:"2\u4e0d\u4e00\u5b9a\u5927\u4e8edp[i",link:null,color:"blue"},{text:"1],\u56e0\u6b64,\u9700\u8981\u68c0\u67e5\u8d8a\u754c;2.\u7b2c4\u70b9\u7279\u5f81\u6700\u5bb9\u6613\u9057\u6f0f,\u8fd8\u6709\u5c31\u662f\u4e0d\u9700\u8981\u68c0\u67e5\u8d8a\u754c,\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u53ef\u77e5:i>=dp[i],\u6240\u4ee5dp[i",link:null,color:"blue"},{text:"dp[i]]\u7684\u8fb9\u754c\u60c5\u51b5\u662fdp[0];",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/32.longest-valid-parentheses.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/32.longest-valid-parentheses.md",code:[{language:"java",text:"\npublic class Solution {\n    public int longestValidParentheses(String s) {\n        int left = 0, right = 0, maxlength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = Math.max(maxlength, left + right);\n            }\n            if (right > left) {\n                left = right = 0;\n            }\n        }\n        left = right = 0;\n        for (int i = s.length() - 1; i >= 0; i--) {\n            if (s.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = Math.max(maxlength, left + right);\n            }\n            if (left > right) {\n                left = right = 0;\n            }\n        }\n        return maxlength;\n    }\n}\n"},{language:"js",text:'\n// \u7528\u6808\u6765\u89e3\nvar longestValidParentheses = function (s) {\n  let stack = new Array();\n  let longest = 0;\n  stack.push(-1);\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === "(") {\n      stack.push(i);\n    } else {\n      stack.pop();\n      if (stack.length === 0) {\n        stack.push(i);\n      } else {\n        longest = Math.max(longest, i - stack[stack.length - 1]);\n      }\n    }\n  }\n  return longest;\n};\n'},{language:"py",text:"\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        n = len(s)\n        ans = 0\n\n        def validCnt(start):\n            # cnt \u4e3a ) \u7684\u6570\u91cf\u51cf\u53bb ( \u7684\u6570\u91cf\n            cnt = 0\n            ans = 0\n            for i in range(start, n):\n                if s[i] == '(':\n                    cnt += 1\n                if s[i] == ')':\n                    cnt -= 1\n                if cnt < 0:\n                    return i - start\n                if cnt == 0:\n                    ans = max(ans, i - start + 1)\n            return ans\n        for i in range(n):\n            ans = max(ans, validCnt(i))\n\n        return ans\n"},{language:"py",text:'\n\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        if not s:\n            return 0\n        res = 0\n        stack = [-1]\n        for i in range(len(s)):\n            if s[i] == "(":\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    res = max(res, i - stack[-1])\n        return res\n'},{language:"py",text:"\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        ans = l = r = 0\n        for c in s:\n            if c == '(':\n                l += 1\n            else:\n                r += 1\n            if l == r:\n                ans = max(ans, l + r)\n            if r > l:\n                l = r = 0\n        l = r = 0\n        for c in s[::-1]:\n            if c == '(':\n                l += 1\n            else:\n                r += 1\n            if l == r:\n                ans = max(ans, l + r)\n            if r < l:\n                l = r = 0\n\n        return ans\n"},{language:"py",text:"\ns = '(())())'\n"},{language:"py",text:"\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        mlen = 0\n        slen = len(s)\n        dp = [0] * (slen + 1)\n        for i in range(1, len(s) + 1):\n            # \u6709\u6548\u7684\u62ec\u53f7\u5bf9\u4e0d\u53ef\u80fd\u4f1a\u4ee5'('\u7ed3\u5c3e\u7684\n            if s[i - 1] == '(':\n                continue\n\n            left_paren = i - 2 - dp[i - 1]\n            if left_paren >= 0 and s[left_paren] == '(':\n                dp[i] = dp[i - 1] + 2\n\n                # \u62fc\u63a5\u6709\u6548\u62ec\u53f7\u5bf9\n                if dp[i - dp[i]]:\n                    dp[i] += dp[i - dp[i]]\n\n                # \u66f4\u65b0\u6700\u5927\u6709\u6548\u6269\u5bf9\u957f\u5ea6\n                if dp[i] > mlen:\n                    mlen = dp[i]\n\n        return mlen\n"}]},"search-in-rotated-sorted-array":{id:"33",name:"search-in-rotated-sorted-array",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"},{text:"\u627e\u51fa\u6709\u5e8f\u533a\u95f4\uff0c\u7136\u540e\u6839\u636etarget\u662f\u5426\u5728\u6709\u5e8f\u533a\u95f4\u820d\u5f03\u4e00\u534a\u5143\u7d20",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/33.search-in-rotated-sorted-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/33.search-in-rotated-sorted-array.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=33 lang=javascript\n *\n * [33] Search in Rotated Sorted Array\n */\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n  // \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn)\n  // \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n  // [6,7,8,1,2,3,4,5]\n  let start = 0;\n  let end = nums.length - 1;\n\n  while (start <= end) {\n    const mid = start + ((end - start) >> 1);\n    if (nums[mid] === target) return mid;\n\n    // [start, mid]\u6709\u5e8f\n\n    // \ufe0f\u26a0\ufe0f\u6ce8\u610f\u8fd9\u91cc\u7684\u7b49\u53f7\n    if (nums[mid] >= nums[start]) {\n      //target \u5728 [start, mid] \u4e4b\u95f4\n\n      // \u5176\u5b9etarget\u4e0d\u53ef\u80fd\u7b49\u4e8enums[mid]\uff0c \u4f46\u662f\u4e3a\u4e86\u5bf9\u79f0\uff0c\u6211\u8fd8\u662f\u52a0\u4e0a\u4e86\u7b49\u53f7\n      if (target >= nums[start] && target <= nums[mid]) {\n        end = mid - 1;\n      } else {\n        //target \u4e0d\u5728 [start, mid] \u4e4b\u95f4\n        start = mid + 1;\n      }\n    } else {\n      // [mid, end]\u6709\u5e8f\n\n      // target \u5728 [mid, end] \u4e4b\u95f4\n      if (target >= nums[mid] && target <= nums[end]) {\n        start = mid + 1;\n      } else {\n        // target \u4e0d\u5728 [mid, end] \u4e4b\u95f4\n        end = mid - 1;\n      }\n    }\n  }\n\n  return -1;\n};\n"},{language:"py",text:'\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        """\u7528\u4e8c\u5206\u6cd5\uff0c\u5148\u5224\u65ad\u5de6\u53f3\u4e24\u8fb9\u54ea\u4e00\u8fb9\u662f\u6709\u5e8f\u7684\uff0c\u518d\u5224\u65ad\u662f\u5426\u5728\u6709\u5e8f\u7684\u5217\u8868\u4e4b\u5185"""\n        if len(nums) <= 0:\n            return -1\n\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = (right - left) // 2 + left\n            if nums[mid] == target:\n                return mid\n            \n            # \u5982\u679c\u4e2d\u95f4\u7684\u503c\u5927\u4e8e\u6700\u5de6\u8fb9\u7684\u503c\uff0c\u8bf4\u660e\u5de6\u8fb9\u6709\u5e8f\n            if nums[mid] > nums[left]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid\n                else:\n                    # \u8fd9\u91cc +1\uff0c\u56e0\u4e3a\u4e0a\u9762\u662f <= \u7b26\u53f7\n                    left = mid + 1\n            # \u5426\u5219\u53f3\u8fb9\u6709\u5e8f\n            else:\n                # \u6ce8\u610f\uff1a\u8fd9\u91cc\u5fc5\u987b\u662f mid+1\uff0c\u56e0\u4e3a\u6839\u636e\u6211\u4eec\u7684\u6bd4\u8f83\u65b9\u5f0f\uff0cmid\u5c5e\u4e8e\u5de6\u8fb9\u7684\u5e8f\u5217\n                if nums[mid+1] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid\n                    \n        return left if nums[left] == target else -1\n'}]},"combination-sum":{id:"39",name:"combination-sum",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/39.combination-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/39.combination-sum.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=39 lang=javascript\n *\n * [39] Combination Sum\n *\n * https://leetcode.com/problems/combination-sum/description/\n *\n * algorithms\n * Medium (46.89%)\n * Total Accepted:    326.7K\n * Total Submissions: 684.2K\n * Testcase Example:  '[2,3,6,7]\\n7'\n *\n * Given a set of candidate numbers (candidates) (without duplicates) and a\n * target number (target), find all unique combinations in candidates\xa0where the\n * candidate numbers sums to target.\n *\n * The same repeated number may be chosen from candidates\xa0unlimited number of\n * times.\n *\n * Note:\n *\n *\n * All numbers (including target) will be positive integers.\n * The solution set must not contain duplicate combinations.\n *\n *\n * Example 1:\n *\n *\n * Input: candidates = [2,3,6,7], target = 7,\n * A solution set is:\n * [\n * \u2060 [7],\n * \u2060 [2,2,3]\n * ]\n *\n *\n * Example 2:\n *\n *\n * Input: candidates = [2,3,5], target = 8,\n * A solution set is:\n * [\n * [2,2,2,2],\n * [2,3,3],\n * [3,5]\n * ]\n *\n */\n\nfunction backtrack(list, tempList, nums, remain, start) {\n  if (remain < 0) return;\n  else if (remain === 0) return list.push([...tempList]);\n  for (let i = start; i < nums.length; i++) {\n    tempList.push(nums[i]);\n    backtrack(list, tempList, nums, remain - nums[i], i); // \u6570\u5b57\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c i + 1\u4ee3\u8868\u4e0d\u53ef\u4ee5\u91cd\u590d\u5229\u7528\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n  const list = [];\n  backtrack(list, [], candidates.sort((a, b) => a - b), target, 0);\n  return list;\n};\n"},{language:"py",text:'\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        """\n        \u56de\u6eaf\u6cd5\uff0c\u5c42\u5c42\u9012\u51cf\uff0c\u5f97\u5230\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\u5c31\u52a0\u5165\u7ed3\u679c\u96c6\u4e2d\uff0c\u8d85\u51fa\u5219\u526a\u679d\uff1b\n        \u4e3b\u8981\u662f\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff0c\u907f\u514d\u91cd\u590d\u7b49\uff1b\n        """\n        size = len(candidates)\n        if size <= 0:\n            return []\n        \n        # \u5148\u6392\u5e8f\uff0c\u4fbf\u4e8e\u540e\u9762\u526a\u679d\n        candidates.sort()\n        \n        path = []\n        res = []\n        self._find_path(target, path, res, candidates, 0, size)\n        \n        return res\n        \n    def _find_path(self, target, path, res, candidates, begin, size):\n        """\u6cbf\u7740\u8def\u5f84\u5f80\u4e0b\u8d70"""\n        if target == 0:\n            res.append(path.copy())\n        else:\n            for i in range(begin, size):\n                left_num = target - candidates[i]\n                # \u5982\u679c\u5269\u4f59\u503c\u4e3a\u8d1f\u6570\uff0c\u8bf4\u660e\u8d85\u8fc7\u4e86\uff0c\u526a\u679d\n                if left_num < 0:\n                    break\n                # \u5426\u5219\u628a\u5f53\u524d\u503c\u52a0\u5165\u8def\u5f84\n                path.append(candidates[i])\n                # \u4e3a\u907f\u514d\u91cd\u590d\u89e3\uff0c\u6211\u4eec\u628a\u6bd4\u5f53\u524d\u503c\u5c0f\u7684\u53c2\u6570\u4e5f\u4ece\u4e0b\u4e00\u6b21\u5bfb\u627e\u4e2d\u5254\u9664\uff0c\n                # \u56e0\u4e3a\u6839\u636e\u4ed6\u4eec\u5f97\u51fa\u7684\u89e3\u4e00\u5b9a\u5728\u4e4b\u524d\u5c31\u627e\u5230\u8fc7\u4e86\n                self._find_path(left_num, path, res, candidates, i, size)\n                # \u8bb0\u5f97\u628a\u5f53\u524d\u503c\u79fb\u51fa\u8def\u5f84\uff0c\u624d\u80fd\u8fdb\u5165\u4e0b\u4e00\u4e2a\u503c\u7684\u8def\u5f84\n                path.pop()\n'}]},"combination-sum-ii":{id:"40",name:"combination-sum-ii",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/40.combination-sum-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/40.combination-sum-ii.md",code:[{language:"js",text:"\nfunction backtrack(list, tempList, nums, remain, start) {\n    if (remain < 0) return;\n    else if (remain === 0) return list.push([...tempList]);\n    for (let i = start; i < nums.length; i++) {\n      // \u548c39.combination-sum \u7684\u5176\u4e2d\u4e00\u4e2a\u533a\u522b\u5c31\u662f\u8fd9\u9053\u9898candidates\u53ef\u80fd\u6709\u91cd\u590d\n      // \u4ee3\u7801\u8868\u793a\u5c31\u662f\u4e0b\u9762\u8fd9\u4e00\u884c\n      if(i > start && nums[i] == nums[i-1]) continue; // skip duplicates\n      tempList.push(nums[i]);\n      backtrack(list, tempList, nums, remain - nums[i], i + 1); // i + 1\u4ee3\u8868\u4e0d\u53ef\u4ee5\u91cd\u590d\u5229\u7528\uff0c i \u4ee3\u8868\u6570\u5b57\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528 \n      tempList.pop();\n    }\n  }\n/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function(candidates, target) {\n    const list = [];\n    backtrack(list, [], candidates.sort((a, b) => a - b), target, 0);\n    return list;\n};\n"},{language:"py",text:'\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        """\n        \u4e0e39\u9898\u7684\u533a\u522b\u662f\u4e0d\u80fd\u91cd\u7528\u5143\u7d20\uff0c\u800c\u5143\u7d20\u53ef\u80fd\u6709\u91cd\u590d\uff1b\n        \u4e0d\u80fd\u91cd\u7528\u597d\u89e3\u51b3\uff0c\u56de\u6eaf\u7684index\u5f80\u4e0b\u4e00\u4e2a\u5c31\u884c\uff1b\n        \u5143\u7d20\u53ef\u80fd\u6709\u91cd\u590d\uff0c\u5c31\u8ba9\u7ed3\u679c\u7684\u53bb\u91cd\u9ebb\u70e6\u4e00\u4e9b\uff1b\n        """\n        size = len(candidates)\n        if size == 0:\n            return []\n        \n        # \u8fd8\u662f\u5148\u6392\u5e8f\uff0c\u4e3b\u8981\u662f\u65b9\u4fbf\u53bb\u91cd\n        candidates.sort()\n        \n        path = []\n        res = []\n        self._find_path(candidates, path, res, target, 0, size)\n        \n        return res\n    \n    def _find_path(self, candidates, path, res, target, begin, size):\n        if target == 0:\n            res.append(path.copy())\n        else:\n            for i in range(begin, size):\n                left_num = target - candidates[i]\n                if left_num < 0:\n                    break\n                # \u5982\u679c\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\uff0c\u524d\u4e00\u4e2a\u5143\u7d20\u5df2\u7ecf\u904d\u5386\u4e86\u540e\u4e00\u4e2a\u5143\u7d20\u4e0e\u4e4b\u540e\u5143\u7d20\u7ec4\u5408\u7684\u6240\u6709\u53ef\u80fd\n                if i > begin and candidates[i] == candidates[i-1]:\n                    continue\n                path.append(candidates[i])\n                # \u5f00\u59cb\u7684 index \u5f80\u540e\u79fb\u4e86\u4e00\u683c\n                self._find_path(candidates, path, res, left_num, i+1, size)\n                path.pop()\n'}]},"trapping-rain-water":{id:"42",name:"trapping-rain-water",pre:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"geekblue"},{text:"\u53cc\u6307\u9488",link:null,color:"green"},{text:"\u5355\u8c03\u6808",link:null,color:"purple"}],keyPoints:[{text:"\u5efa\u6a21`h[i]=Math.min(\u5de6\u8fb9\u67f1\u5b50\u6700\u5927\u503c,\u53f3\u8fb9\u67f1\u5b50\u6700\u5927\u503c)`(h\u4e3a\u4e0b\u96e8\u4e4b\u540e\u7684\u6c34\u4f4d)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/42.trapping-rain-water.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/42.trapping-rain-water.md",code:[{language:"js",text:"\nfor (let i = 0; i < height.length; i++) {\n  area += (h[i] - height[i]) * 1; // h\u4e3a\u4e0b\u96e8\u4e4b\u540e\u7684\u6c34\u4f4d\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=42 lang=javascript\n *\n * [42] Trapping Rain Water\n *\n */\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function (height) {\n  let max = 0;\n  let volume = 0;\n  const leftMax = [];\n  const rightMax = [];\n\n  for (let i = 0; i < height.length; i++) {\n    leftMax[i] = max = Math.max(height[i], max);\n  }\n\n  max = 0;\n\n  for (let i = height.length - 1; i >= 0; i--) {\n    rightMax[i] = max = Math.max(height[i], max);\n  }\n\n  for (let i = 0; i < height.length; i++) {\n    volume = volume + Math.min(leftMax[i], rightMax[i]) - height[i];\n  }\n\n  return volume;\n};\n"},{language:"cpp",text:"\nint trap(vector<int>& heights)\n{\n\tif(heights == null)\n\t\treturn 0;\n    int ans = 0;\n    int size = heights.size();\n    vector<int> left_max(size), right_max(size);\n    left_max[0] = heights[0];\n    for (int i = 1; i < size; i++) {\n        left_max[i] = max(heights[i], left_max[i - 1]);\n    }\n    right_max[size - 1] = heights[size - 1];\n    for (int i = size - 2; i >= 0; i--) {\n        right_max[i] = max(heights[i], right_max[i + 1]);\n    }\n    for (int i = 1; i < size - 1; i++) {\n        ans += min(left_max[i], right_max[i]) - heights[i];\n    }\n    return ans;\n}\n\n"},{language:"cpp",text:"\n\nclass Solution {\npublic:\n    int trap(vector<int>& heights)\n{\n    int left = 0, right = heights.size() - 1;\n    int ans = 0;\n    int left_max = 0, right_max = 0;\n    while (left < right) {\n        if (heights[left] < heights[right]) {\n            heights[left] >= left_max ? (left_max = heights[left]) : ans += (left_max - heights[left]);\n            ++left;\n        }\n        else {\n            heights[right] >= right_max ? (right_max = heights[right]) : ans += (right_max - heights[right]);\n            --right;\n        }\n    }\n    return ans;\n}\n\n};\n"},{language:"py",text:"\nclass Solution:\n    def trap(self, heights: List[int]) -> int:\n        n = len(heights)\n        l, r = [0] * (n + 1), [0] * (n + 1)\n        ans = 0\n        for i in range(1, len(heights) + 1):\n            l[i] = max(l[i - 1], heights[i - 1])\n        for i in range(len(heights) - 1, 0, -1):\n            r[i] = max(r[i + 1], heights[i])\n        for i in range(len(heights)):\n            ans += max(0, min(l[i + 1], r[i]) - heights[i])\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def trap(self, heights: List[int]) -> int:\n        n = len(heights)\n        l_max = r_max = 0\n        l, r = 0, n - 1\n        ans = 0\n        while l < r:\n            if heights[l] < heights[r]:\n                if heights[l] < l_max:\n                    ans += l_max - heights[l]\n                else:\n                    l_max = heights[l]\n                l += 1\n            else:\n                if heights[r] < r_max:\n                    ans += r_max - heights[r]\n                else:\n                    r_max = heights[r]\n                r -= 1\n        return ans\n"}]},permutations:{id:"46",name:"permutations",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/46.permutations.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/46.permutations.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=46 lang=javascript\n *\n * [46] Permutations\n *\n * https://leetcode.com/problems/permutations/description/\n *\n * algorithms\n * Medium (53.60%)\n * Total Accepted:    344.6K\n * Total Submissions: 642.9K\n * Testcase Example:  '[1,2,3]'\n *\n * Given a collection of distinct integers, return all possible permutations.\n *\n * Example:\n *\n *\n * Input: [1,2,3]\n * Output:\n * [\n * \u2060 [1,2,3],\n * \u2060 [1,3,2],\n * \u2060 [2,1,3],\n * \u2060 [2,3,1],\n * \u2060 [3,1,2],\n * \u2060 [3,2,1]\n * ]\n *\n *\n */\nfunction backtrack(list, tempList, nums) {\n  if (tempList.length === nums.length) return list.push([...tempList]);\n  for (let i = 0; i < nums.length; i++) {\n    if (tempList.includes(nums[i])) continue;\n    tempList.push(nums[i]);\n    backtrack(list, tempList, nums);\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function (nums) {\n  const list = [];\n  backtrack(list, [], nums);\n  return list;\n};\n"}]},"permutations-ii":{id:"47",name:"permutations-ii",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/47.permutations-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/47.permutations-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=47 lang=javascript\n *\n * [47] Permutations II\n *\n * https://leetcode.com/problems/permutations-ii/description/\n *\n * algorithms\n * Medium (39.29%)\n * Total Accepted:    234.1K\n * Total Submissions: 586.2K\n * Testcase Example:  '[1,1,2]'\n *\n * Given a collection of numbers that might contain duplicates, return all\n * possible unique permutations.\n *\n * Example:\n *\n *\n * Input: [1,1,2]\n * Output:\n * [\n * \u2060 [1,1,2],\n * \u2060 [1,2,1],\n * \u2060 [2,1,1]\n * ]\n *\n *\n */\nfunction backtrack(list, nums, tempList, visited) {\n  if (tempList.length === nums.length) return list.push([...tempList]);\n  for (let i = 0; i < nums.length; i++) {\n    // \u548c46.permutations\u7684\u533a\u522b\u662f\u8fd9\u9053\u9898\u7684nums\u662f\u53ef\u4ee5\u91cd\u590d\u7684\n    // \u6211\u4eec\u9700\u8981\u8fc7\u6ee4\u8fd9\u79cd\u60c5\u51b5\n    if (visited[i]) continue; // \u4e0d\u80fd\u7528tempList.includes(nums[i])\u4e86\uff0c\u56e0\u4e3a\u6709\u91cd\u590d\n    // visited[i - 1] \u8fd9\u4e2a\u5224\u65ad\u5bb9\u6613\u5ffd\u7565\n    if (i > 0 && nums[i] === nums[i - 1] && visited[i - 1]) continue;\n\n    visited[i] = true;\n    tempList.push(nums[i]);\n    backtrack(list, nums, tempList, visited);\n    visited[i] = false;\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permuteUnique = function (nums) {\n  const list = [];\n  backtrack(\n    list,\n    nums.sort((a, b) => a - b),\n    [],\n    []\n  );\n  return list;\n};\n"}]},"rotate-image":{id:"48",name:"rotate-image",pre:[{text:"\u539f\u5730\u7b97\u6cd5",link:null,color:"orange"},{text:"\u77e9\u9635",link:null,color:"gold"}],keyPoints:[{text:"\u77e9\u9635\u65cb\u8f6c\u64cd\u4f5c",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/48.rotate-image.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/48.rotate-image.md",code:[{language:"js",text:"\nvar rotate = function (matrix) {\n  // \u65f6\u95f4\u590d\u6742\u5ea6O(n^2) \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n  const oMatrix = JSON.parse(JSON.stringify(matrix)); // clone\n  const n = oMatrix.length;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      matrix[j][n - i - 1] = oMatrix[i][j];\n    }\n  }\n};\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=48 lang=javascript\n *\n * [48] Rotate Image\n */\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function (matrix) {\n  // \u65f6\u95f4\u590d\u6742\u5ea6O(n^2) \u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n\n  // \u505a\u6cd5\uff1a \u5148\u6cbf\u7740\u5bf9\u89d2\u7ebf\u7ffb\u8f6c\uff0c\u7136\u540e\u6cbf\u7740\u6c34\u5e73\u7ebf\u7ffb\u8f6c\n  const n = matrix.length;\n  function swap(arr, [i, j], [m, n]) {\n    const temp = arr[i][j];\n    arr[i][j] = arr[m][n];\n    arr[m][n] = temp;\n  }\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i; j++) {\n      swap(matrix, [i, j], [n - j - 1, n - i - 1]);\n    }\n  }\n\n  for (let i = 0; i < n / 2; i++) {\n    for (let j = 0; j < n; j++) {\n      swap(matrix, [i, j], [n - i - 1, j]);\n    }\n  }\n};\n"}]},"group-anagrams":{id:"49",name:"group-anagrams",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"},{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[{text:"\u6876\u6392\u5e8f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/49.group-anagrams.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/49.group-anagrams.md",code:[{language:"js",text:'\nvar groupAnagrams = function (strs) {\n  const hashTable = {};\n\n  function sort(str) {\n    return str.split("").sort().join("");\n  }\n\n  // \u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u662f\u5f88\u4f18\uff0c\u4f46\u662f\u5f88\u76f4\u89c2\uff0c\u5bb9\u6613\u60f3\u5230\n  for (let i = 0; i < strs.length; i++) {\n    const str = strs[i];\n    const key = sort(str);\n    if (!hashTable[key]) {\n      hashTable[key] = [str];\n    } else {\n      hashTable[key].push(str);\n    }\n  }\n\n  return Object.values(hashTable);\n};\n'},{language:"js",text:'\n/*\n * @lc app=leetcode id=49 lang=javascript\n *\n * [49] Group Anagrams\n */\n/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function (strs) {\n  // \u7c7b\u4f3c\u6876\u6392\u5e8f\n\n  let counts = [];\n  const hashTable = {};\n  for (let i = 0; i < strs.length; i++) {\n    const str = strs[i];\n    counts = Array(26).fill(0);\n    for (let j = 0; j < str.length; j++) {\n      counts[str[j].charCodeAt(0) - "a".charCodeAt(0)]++;\n    }\n    const key = counts.join("");\n    if (!hashTable[key]) {\n      hashTable[key] = [str];\n    } else {\n      hashTable[key].push(str);\n    }\n  }\n\n  return Object.values(hashTable);\n};\n'}]},"pow-x-n":{id:"50",name:"pow-x-n",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"}],keyPoints:[{text:"\u8d85\u65f6\u5206\u6790",link:null,color:"blue"},{text:"hashtable",link:null,color:"blue"},{text:"\u6570\u5b66\u5206\u6790",link:null,color:"blue"},{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"\u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/50.pow-x-n.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/50.pow-x-n.md",code:[{language:"py",text:"\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        res = 1\n        for _ in range(n):\n            res *= x\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1\n        if n == 1:\n            return x\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        return self.myPow(x, n // 2) * self.myPow(x, n - n // 2)\n"},{language:"py",text:"\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1\n        if n == 1:\n            return x\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        return self.myPow(x _ x, n // 2) if n % 2 == 0 else x _ self.myPow(x, n - 1)\n"},{language:"py",text:"\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        res = 1\n        while n:\n            if n & 1 == 1:\n                res *= x\n            x *= x\n            n >>= 1\n        return res\n"}]},"N-Queens-II":{id:"52",name:"N-Queens-II",pre:[{text:"\u56de\u6eaf",link:null,color:"green"},{text:"\u6df1\u5ea6\u4f18\u5148\u904d\u5386",link:null,color:"geekblue"}],keyPoints:[{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"DFS\uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/52.N-Queens-II.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/52.N-Queens-II.md",code:[{language:"js",text:"\n/**\n * @param {number} n\n * @return {number}\n * @param row \u5f53\u524d\u5c42\n * @param cols \u5217\n * @param pie \u5de6\u659c\u7ebf\n * @param na \u53f3\u659c\u7ebf\n */\nconst totalNQueens = function (n) {\n    let res = 0;\n    const dfs = (n, row, cols, pie, na) => {\n        if (row >= n) {\n            res++;\n            return;\n        }\n        // \u5c06\u6240\u6709\u80fd\u653e\u7f6e Q \u7684\u4f4d\u7f6e\u7531 0 \u53d8\u6210 1\uff0c\u4ee5\u4fbf\u8fdb\u884c\u540e\u7eed\u7684\u4f4d\u904d\u5386\n        // \u4e5f\u5c31\u662f\u5f97\u5230\u5f53\u524d\u6240\u6709\u7684\u7a7a\u4f4d\n        let bits = (~(cols | pie | na)) & ((1 << n) - 1);\n        while (bits) {\n            // \u53d6\u6700\u4f4e\u4f4d\u76841\n            let p = bits & -bits;\n            // \u628aP\u4f4d\u7f6e\u4e0a\u653e\u5165\u7687\u540e\n            bits = bits & (bits - 1);\n            // row + 1 \u641c\u7d22\u4e0b\u4e00\u884c\u53ef\u80fd\u7684\u4f4d\u7f6e\n            // cols \uff5c p \u76ee\u524d\u6240\u6709\u653e\u7f6e\u7687\u540e\u7684\u5217\n            // (pie | p) << 1 \u548c (na | p) >> 1) \u4e0e\u5df2\u653e\u7f6e\u8fc7\u7687\u540e\u7684\u4f4d\u7f6e \u4f4d\u4e8e\u4e00\u6761\u659c\u7ebf\u4e0a\u7684\u4f4d\u7f6e\n            dfs(n, row + 1, cols | p, (pie | p) << 1, (na | p) >> 1);\n        }\n    }\n    dfs(n, 0, 0, 0, 0);\n    return res;\n};\n"}]},"maximum-sum-subarray-cn":{id:"53",name:"maximum-sum-subarray-cn",pre:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/slide-window.md",color:"purple"},{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"}],keyPoints:[{text:"\u5206\u67901.\u66b4\u529b\u89e3\uff0c\u5217\u4e3e\u6240\u6709\u7ec4\u5408\u5b50\u5e8f\u5217\u9996\u5c3e\u4f4d\u7f6e\u7684\u7ec4\u5408\uff0c\u6c42\u89e3\u6700\u5927\u7684\u5b50\u5e8f\u5217\u548c,\u4f18\u5316\u53ef\u4ee5\u9884\u5148\u5904\u7406\uff0c\u5f97\u5230\u524d\u7f00\u548c2.\u5206\u6cbb\u6cd5\uff0c\u6bcf\u6b21\u4ece\u4e2d\u95f4\u4f4d\u7f6e\u628a\u6570\u7ec4\u5206\u4e3a\u5de6\u53f3\u4e2d\u4e09\u90e8\u5206\uff0c\u5206\u522b\u6c42\u51fa\u5de6\u53f3\u4e2d\uff08\u8fd9\u91cc\u4e2d\u662f\u5305\u62ec\u4e2d\u95f4\u5143\u7d20\u7684\u5b50\u5e8f\u5217\uff09\u6700\u5927\u548c\u3002\u5bf9\u5de6\u53f3\u5206\u522b\u6df1\u5ea6\u9012\u5f52\uff0c\u4e09\u8005\u4e2d\u6700\u5927\u503c\u5373\u4e3a\u5f53\u524d\u6700\u5927\u5b50\u5e8f\u5217\u548c\u30023.\u52a8\u6001\u89c4\u5212\uff0c\u627e\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6c42\u5230\u5f53\u524d\u4f4d\u7f6e\u6700\u5927\u548c\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u817e\u8baf"},{name:"bloomberg"},{name:"linkedin"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/53.maximum-sum-subarray-cn.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/53.maximum-sum-subarray-cn.md",code:[{language:"java",text:"\nclass MaximumSubarrayPrefixSum {\n  public int maxSubArray(int[] nums) {\n      int len = nums.length;\n      int maxSum = Integer.MIN_VALUE;\n      int sum = 0;\n      for (int i = 0; i < len; i++) {\n        sum = 0;\n        for (int j = i; j < len; j++) {\n          sum += nums[j];\n          maxSum = Math.max(maxSum, sum);\n        }\n      }\n      return maxSum;\n  }\n}\n"},{language:"java",text:"\nclass MaxSumSubarray {\n  public int maxSubArray3(int[] nums) {\n      int maxSum = nums[0];\n      int sum = 0;\n      int minSum = 0;\n      for (int num : nums) {\n        // prefix Sum\n        sum += num;\n        // update maxSum\n        maxSum = Math.max(maxSum, sum - minSum);\n        // update minSum\n        minSum = Math.min(minSum, sum);\n      }\n      return maxSum;\n  }\n}\n"},{language:"java",text:"\nclass MaximumSubarrayDivideConquer {\n  public int maxSubArrayDividConquer(int[] nums) {\n      if (nums == null || nums.length == 0) return 0;\n      return helper(nums, 0, nums.length - 1);\n    }\n    private int helper(int[] nums, int l, int r) {\n      if (l > r) return Integer.MIN_VALUE;\n      int mid = (l + r) >>> 1;\n      int left = helper(nums, l, mid - 1);\n      int right = helper(nums, mid + 1, r);\n      int leftMaxSum = 0;\n      int sum = 0;\n      // left surfix maxSum start from index mid - 1 to l\n      for (int i = mid - 1; i >= l; i--) {\n        sum += nums[i];\n        leftMaxSum = Math.max(leftMaxSum, sum);\n      }\n      int rightMaxSum = 0;\n      sum = 0;\n      // right prefix maxSum start from index mid + 1 to r\n      for (int i = mid + 1; i <= r; i++) {\n        sum += nums[i];\n        rightMaxSum = Math.max(sum, rightMaxSum);\n      }\n      // max(left, right, crossSum)\n      return Math.max(leftMaxSum + rightMaxSum + nums[mid], Math.max(left, right));\n    }\n}\n"},{language:"java",text:"\nclass MaximumSubarrayDP {\n   public int maxSubArray(int[] nums) {\n      int currMaxSum = nums[0];\n      int maxSum = nums[0];\n      for (int i = 1; i < nums.length; i++) {\n        currMaxSum = Math.max(currMaxSum + nums[i], nums[i]);\n        maxSum = Math.max(maxSum, currMaxSum);\n      }\n      return maxSum;\n   }\n}\n"},{language:"js",text:"\nfunction LSS(list) {\n  const len = list.length;\n  let max = -Number.MAX_VALUE;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum = 0;\n    for (let j = i; j < len; j++) {\n      sum += list[j];\n      if (sum > max) {\n        max = sum;\n      }\n    }\n  }\n\n  return max;\n}\n"},{language:"js",text:"\nfunction LSS(list) {\n  const len = list.length;\n  let max = list[0];\n  let min = 0;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += list[i];\n    if (sum - min > max) max = sum - min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n\n  return max;\n}\n"},{language:"js",text:"\nfunction helper(list, m, n) {\n  if (m === n) return list[m];\n  let sum = 0;\n  let lmax = -Number.MAX_VALUE;\n  let rmax = -Number.MAX_VALUE;\n  const mid = ((n - m) >> 1) + m;\n  const l = helper(list, m, mid);\n  const r = helper(list, mid + 1, n);\n  for (let i = mid; i >= m; i--) {\n    sum += list[i];\n    if (sum > lmax) lmax = sum;\n  }\n\n  sum = 0;\n\n  for (let i = mid + 1; i <= n; i++) {\n    sum += list[i];\n    if (sum > rmax) rmax = sum;\n  }\n\n  return Math.max(l, r, lmax + rmax);\n}\n\nfunction LSS(list) {\n  return helper(list, 0, list.length - 1);\n}\n"},{language:"js",text:"\nfunction LSS(list) {\n  const len = list.length;\n  let max = list[0];\n  for (let i = 1; i < len; i++) {\n    list[i] = Math.max(0, list[i - 1]) + list[i];\n    if (list[i] > max) max = list[i];\n  }\n\n  return max;\n}\n"},{language:"py",text:"\nimport sys\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        maxSum = -sys.maxsize\n        sum = 0\n        for i in range(n):\n            sum = 0\n            for j in range(i, n):\n                sum += nums[j]\n                maxSum = max(maxSum, sum)\n        \n        return maxSum\n"},{language:"py",text:"\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        maxSum = nums[0]\n        minSum = sum = 0\n        for i in range(n):\n            sum += nums[i]\n            maxSum = max(maxSum, sum - minSum)\n            minSum = min(minSum, sum)\n            \n        return maxSum\n"},{language:"py",text:"\nimport sys\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        return self.helper(nums, 0, len(nums) - 1)\n    def helper(self, nums, l, r):\n        if l > r:\n            return -sys.maxsize\n        mid = (l + r) // 2\n        left = self.helper(nums, l, mid - 1)\n        right = self.helper(nums, mid + 1, r)\n        left_suffix_max_sum = right_prefix_max_sum = 0\n        sum = 0\n        for i in reversed(range(l, mid)):\n            sum += nums[i]\n            left_suffix_max_sum = max(left_suffix_max_sum, sum)\n        sum = 0\n        for i in range(mid + 1, r + 1):\n            sum += nums[i]\n            right_prefix_max_sum = max(right_prefix_max_sum, sum)\n        cross_max_sum = left_suffix_max_sum + right_prefix_max_sum + nums[mid]\n        return max(cross_max_sum, left, right)\n"},{language:"py",text:"\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        max_sum_ending_curr_index = max_sum = nums[0]\n        for i in range(1, n):\n            max_sum_ending_curr_index = max(max_sum_ending_curr_index + nums[i], nums[i])\n            max_sum = max(max_sum_ending_curr_index, max_sum)\n            \n        return max_sum\n"}]},"jump-game":{id:"55",name:"jump-game",pre:[{text:"\u8d2a\u5fc3",link:null,color:"purple"}],keyPoints:[{text:"\u5efa\u6a21(\u8bb0\u5f55\u548c\u66f4\u65b0\u5f53\u524d\u4f4d\u7f6e\u80fd\u591f\u5230\u8fbe\u7684\u6700\u5927\u7684\u7d22\u5f15\u5373\u53ef)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/55.jump-game.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/55.jump-game.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function (nums) {\n  let max = 0; // \u80fd\u591f\u8d70\u5230\u7684\u6570\u7ec4\u4e0b\u6807\n\n  for (let i = 0; i < nums.length; i++) {\n    if (max < i) return false; // \u5f53\u524d\u8fd9\u4e00\u6b65\u90fd\u8d70\u4e0d\u5230\uff0c\u540e\u9762\u66f4\u8d70\u4e0d\u5230\u4e86\n    max = Math.max(nums[i] + i, max);\n  }\n\n  return max >= nums.length - 1;\n};\n"}]},"merge-intervals":{id:"56",name:"merge-intervals",pre:[{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[{text:"\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5982\u679c\u4e0d\u6392\u5e8f\uff0c\u9700\u8981\u501f\u52a9\u4e00\u4e9bhack,\u8fd9\u91cc\u4e0d\u4ecb\u7ecd\u4e86",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/56.merge-intervals.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/56.merge-intervals.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=56 lang=javascript\n *\n * [56] Merge Intervals\n */\n/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\n\nfunction intersected(a, b) {\n  if (a[0] > b[1] || a[1] < b[0]) return false;\n  return true;\n}\n\nfunction mergeTwo(a, b) {\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\n}\nvar merge = function (intervals) {\n  // \u8fd9\u79cd\u7b97\u6cd5\u9700\u8981\u5148\u6392\u5e8f\n  intervals.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < intervals.length - 1; i++) {\n    const cur = intervals[i];\n    const next = intervals[i + 1];\n\n    if (intersected(cur, next)) {\n      intervals[i] = undefined;\n      intervals[i + 1] = mergeTwo(cur, next);\n    }\n  }\n  return intervals.filter((q) => q);\n};\n"}]},"permutation-sequence":{id:"60",name:"permutation-sequence",pre:[{text:"\u6570\u5b66",link:null,color:"geekblue"},{text:"\u56de\u6eaf",link:null,color:"green"},{text:"factorial",link:null,color:"orange"}],keyPoints:[{text:"\u627e\u89c4\u5f8b",link:null,color:"blue"},{text:"\u6392\u5217\u7ec4\u5408",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"Twitter"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/60.permutation-sequence.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/60.permutation-sequence.md",code:[{language:"py",text:'\nimport math\n\nclass Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        res = ""\n        candidates = [str(i) for i in range(1, n + 1)]\n\n        while n != 0:\n            facto = math.factorial(n - 1)\n            # i \u8868\u793a\u524d\u9762\u88ab\u6211\u4eec\u6392\u9664\u7684\u7ec4\u6570\uff0c\u4e5f\u5c31\u662fk\u6240\u5728\u7684\u7ec4\u7684\u4e0b\u6807\n            # k // facto \u662f\u4e0d\u884c\u7684\uff0c \u6bd4\u5982\u5728 k % facto == 0\u7684\u60c5\u51b5\u4e0b\u5c31\u4f1a\u6709\u95ee\u9898\n            i = math.ceil(k / facto) - 1\n            # \u6211\u4eec\u628acandidates[i]\u52a0\u5165\u5230\u7ed3\u679c\u96c6\uff0c\u7136\u540e\u5c06\u5176\u5f39\u51facandidates\uff08\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u5143\u7d20\uff09\n            res += candidates[i]\n            candidates.pop(i)\n            # k \u7f29\u5c0f\u4e86 facto *  i\n            k -= facto * i\n            # \u6bcf\u6b21\u8fed\u4ee3\u6211\u4eec\u5b9e\u9645\u4e0a\u5c31\u5904\u7406\u4e86\u4e00\u4e2a\u5143\u7d20\uff0cn \u51cf\u53bb 1\uff0c\u5f53n == 0 \u8bf4\u660e\u5168\u90e8\u5904\u7406\u5b8c\u6210\uff0c\u6211\u4eec\u9000\u51fa\u5faa\u73af\n            n -= 1\n        return res\n'}]},"unique-paths":{id:"62",name:"unique-paths",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"},{text:"\u57fa\u672c\u52a8\u6001\u89c4\u5212\u95ee\u9898",link:null,color:"blue"},{text:"\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u5230O(n),\u8fd9\u4f1a\u662f\u4e00\u4e2a\u8003\u70b9",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/62.unique-paths.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/62.unique-paths.md",code:[{language:"js",text:"\nconst dp = [];\nfor (let i = 0; i < m + 1; i++) {\n  dp[i] = [];\n  dp[i][0] = 0;\n}\nfor (let i = 0; i < n + 1; i++) {\n  dp[0][i] = 0;\n}\nfor (let i = 1; i < m + 1; i++) {\n  for (let j = 1; j < n + 1; j++) {\n    dp[i][j] = j === 1 ? 1 : dp[i - 1][j] + dp[i][j - 1]; // \u8f6c\u79fb\u65b9\u7a0b\n  }\n}\n\nreturn dp[m][n];\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=62 lang=javascript\n *\n * [62] Unique Paths\n *\n * https://leetcode.com/problems/unique-paths/description/\n */\n/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n  const dp = Array(n).fill(1);\n\n  for (let i = 1; i < m; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[j] = dp[j] + dp[j - 1];\n    }\n  }\n\n  return dp[n - 1];\n};\n"},{language:"py",text:"\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        d = [[1] * n for _ in range(m)]\n\n        for col in range(1, m):\n            for row in range(1, n):\n                d[col][row] = d[col - 1][row] + d[col][row - 1]\n\n        return d[m - 1][n - 1]\n"},{language:"py",text:"\nclass Solution:\n    visited = dict()\n\n    def uniquePaths(self, m: int, n: int) -> int:\n        if (m, n) in self.visited:\n            return self.visited[(m, n)]\n        if m == 1 or n == 1:\n            return 1\n        cnt = self.uniquePaths(m - 1, n) + self.uniquePaths(m, n - 1)\n        self.visited[(m, n)] = cnt\n        return cnt\n"},{language:"py",text:"\nclass Solution:\n\n    def uniquePaths(self, m: int, n: int) -> int:\n        dp = [1] * n\n        for _ in range(1, m):\n            for j in range(1, n):\n                dp[j] += dp[j - 1]\n        return dp[n - 1]\n"}]},"unique-paths-ii":{id:"63",name:"unique-paths-ii",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"},{text:"\u57fa\u672c\u52a8\u6001\u89c4\u5212\u95ee\u9898",link:null,color:"blue"},{text:"\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u5230O(n),\u8fd9\u4f1a\u662f\u4e00\u4e2a\u8003\u70b9",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/63.unique-paths-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/63.unique-paths-ii.md",code:[{language:"py",text:"\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        if obstacleGrid[0][0]:\n            return 0\n\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[1][1] = 1\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if i == 1 and j == 1:\n                    continue\n                if obstacleGrid[i - 1][j - 1] == 0:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                else:\n                    dp[i][j] = 0\n        return dp[m][n]\n"},{language:"py",text:"\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        if obstacleGrid[0][0]:\n            return 0\n\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if obstacleGrid[i - 1][j - 1] == 0:\n                    dp[j] += dp[j - 1]\n                else:\n                    dp[j] = 0\n        return dp[-1]\n"}]},"set-matrix-zeroes":{id:"73",name:"set-matrix-zeroes",pre:[{text:"\u72b6\u6001\u538b\u7f29",link:null,color:"green"}],keyPoints:[{text:"\u4f7f\u7528\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u6765\u66ff\u4ee3\u6211\u4eecm+n\u6570\u7ec4",link:null,color:"blue"},{text:"\u5148\u8bb0\u5f55\u4e0b\u201d\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u662f\u5426\u5168\u662f0\u201c\u8fd9\u6837\u7684\u4e00\u4e2a\u6570\u636e\uff0c\u5426\u5219\u4f1a\u56e0\u4e3a\u540e\u7eed\u5bf9\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u7684\u66f4\u65b0\u9020\u6210\u6570\u636e\u4e22\u5931",link:null,color:"blue"},{text:"\u6700\u540e\u66f4\u65b0\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/73.set-matrix-zeroes.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/73.set-matrix-zeroes.md",code:[{language:"js",text:"\nvar setZeroes = function (matrix) {\n  if (matrix.length === 0) return matrix;\n  const m = matrix.length;\n  const n = matrix[0].length;\n  const zeroes = Array(m + n).fill(false);\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const item = matrix[i][j];\n\n      if (item === 0) {\n        zeroes[i] = true;\n        zeroes[m + j] = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < m; i++) {\n    if (zeroes[i]) {\n      matrix[i] = Array(n).fill(0);\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    if (zeroes[m + i]) {\n      for (let j = 0; j < m; j++) {\n        matrix[j][i] = 0;\n      }\n    }\n  }\n\n  return matrix;\n};\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=73 lang=javascript\n *\n * [73] Set Matrix Zeroes\n */\n/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar setZeroes = function (matrix) {\n  if (matrix.length === 0) return matrix;\n  const m = matrix.length;\n  const n = matrix[0].length;\n\n  // \u65f6\u95f4\u590d\u6742\u5ea6 O(m * n), \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\n  let firstRow = false; // \u7b2c\u4e00\u884c\u662f\u5426\u5e94\u8be5\u5168\u90e8\u4e3a0\n  let firstCol = false; // \u7b2c\u4e00\u5217\u662f\u5426\u5e94\u8be5\u5168\u90e8\u4e3a0\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const item = matrix[i][j];\n      if (item === 0) {\n        if (i === 0) {\n          firstRow = true;\n        }\n        if (j === 0) {\n          firstCol = true;\n        }\n        matrix[0][j] = 0;\n        matrix[i][0] = 0;\n      }\n    }\n  }\n\n  for (let i = 1; i < m; i++) {\n    for (let j = 1; j < n; j++) {\n      const item = matrix[i][j];\n      if (matrix[0][j] == 0 || matrix[i][0] == 0) {\n        matrix[i][j] = 0;\n      }\n    }\n  }\n\n  // \u6700\u540e\u5904\u7406\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\n\n  if (firstRow) {\n    for (let i = 0; i < n; i++) {\n      matrix[0][i] = 0;\n    }\n  }\n\n  if (firstCol) {\n    for (let i = 0; i < m; i++) {\n      matrix[i][0] = 0;\n    }\n  }\n\n  return matrix;\n};\n"},{language:"py",text:'\nclass Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        """\n        Do not return anything, modify matrix in-place instead.\n        """\n        def setRowZeros(matrix: List[List[int]], i:int) -> None:\n            C = len(matrix[0])\n            matrix[i] = [0] * C\n\n        def setColZeros(matrix: List[List[int]], j:int) -> None:\n            R = len(matrix)\n            for i in range(R):\n                matrix[i][j] = 0\n\n        isCol = False\n        R = len(matrix)\n        C = len(matrix[0])\n\n        for i in range(R):\n            if matrix[i][0] == 0:\n                isCol = True\n            for j in range(1, C):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        for j in range(1, C):\n            if matrix[0][j] == 0:\n                setColZeros(matrix, j)\n\n        for i in range(R):\n            if matrix[i][0] == 0:\n                setRowZeros(matrix, i)\n\n        if isCol:\n            setColZeros(matrix, 0)\n\n'},{language:"py",text:'\nclass Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        """\n        \u8fd9\u9898\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\uff0c\u5fc5\u987b\u6709\u4e2a\u5730\u65b9\u8bb0\u5f55\u5224\u65ad\u7ed3\u679c\uff0c\u4f46\u53c8\u4e0d\u80fd\u5f71\u54cd\u4e0b\u4e00\u6b65\u7684\u5224\u65ad\u6761\u4ef6\uff1b\n        \u76f4\u63a5\u6539\u4e3a0\u7684\u8bdd\uff0c\u4f1a\u5f71\u54cd\u4e0b\u4e00\u6b65\u7684\u5224\u65ad\u6761\u4ef6\uff1b\n        \u56e0\u6b64\uff0c\u6709\u4e00\u79cd\u601d\u8def\u662f\u5148\u6539\u4e3aNone\uff0c\u6700\u540e\u518d\u5c06None\u6539\u4e3a0\uff1b\n        \u4ece\u6761\u4ef6\u4e0a\u770b\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u7b2c\u4e00\u884c\u3001\u7b2c\u4e8c\u884c\u4f5c\u4e3a\u8bb0\u5f55\u7a7a\u95f4\uff0c\u90a3\u4e48\uff0c\u7528None\u5e94\u8be5\u4e5f\u4e0d\u7b97\u8fdd\u80cc\u9898\u76ee\u6761\u4ef6\uff1b\n        """\n        rows = len(matrix)\n        cols = len(matrix[0])\n        # \u904d\u5386\u77e9\u9635\uff0c\u7528None\u8bb0\u5f55\u8981\u6539\u7684\u5730\u65b9\uff0c\u6ce8\u610f\u5982\u679c\u662f0\u5219\u8981\u4fdd\u7559\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u4e0b\u4e00\u6b65\u5224\u65ad\n        for r in range(rows):\n            for c in range(cols):\n                if matrix[r][c] is not None and matrix[r][c] == 0:\n                    # \u6539\u503c\n                    for i in range(rows):\n                        matrix[i][c] = None if matrix[i][c] != 0 else 0\n                    for j in range(cols):\n                        matrix[r][j] = None if matrix[r][j] != 0 else 0\n        # \u518d\u6b21\u904d\u5386\uff0c\u5c06None\u6539\u4e3a0\n        for r in range(rows):\n            for c in range(cols):\n                if matrix[r][c] is None:\n                    matrix[r][c] = 0\n'}]},"sort-colors":{id:"75",name:"sort-colors",pre:[{text:"\u8377\u5170\u56fd\u65d7\u95ee\u9898",link:"https://en.wikipedia.org/wiki/Dutch_national_flag_problem",color:"purple"},{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[{text:"\u8377\u5170\u56fd\u65d7\u95ee\u9898",link:null,color:"blue"},{text:"countingsort",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/75.sort-colors.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/75.sort-colors.md",code:[{language:"py",text:'\nclass Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        """\n        Do not return anything, modify nums in-place instead.\n        """\n        p0 = cur = 0\n        p2 = len(nums) - 1\n\n        while cur <= p2:\n            if nums[cur] == 0:\n                nums[cur], nums[p0] = nums[p0], nums[cur]\n                p0 += 1\n                cur += 1\n            elif nums[cur] == 2:\n                nums[cur], nums[p2] = nums[p2], nums[cur]\n                p2 -= 1\n            else:\n                cur += 1\n'}]},subsets:{id:"78",name:"subsets",pre:[{text:"\u56de\u6eaf",link:null,color:"green"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/78.subsets.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/78.subsets.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=78 lang=javascript\n *\n * [78] Subsets\n *\n * https://leetcode.com/problems/subsets/description/\n *\n * algorithms\n * Medium (51.19%)\n * Total Accepted:    351.6K\n * Total Submissions: 674.8K\n * Testcase Example:  '[1,2,3]'\n *\n * Given a set of distinct integers, nums, return all possible subsets (the\n * power set).\n *\n * Note: The solution set must not contain duplicate subsets.\n *\n * Example:\n *\n *\n * Input: nums = [1,2,3]\n * Output:\n * [\n * \u2060 [3],\n * [1],\n * [2],\n * [1,2,3],\n * [1,3],\n * [2,3],\n * [1,2],\n * []\n * ]\n *\n */\nfunction backtrack(list, tempList, nums, start) {\n  list.push([...tempList]);\n  for (let i = start; i < nums.length; i++) {\n    tempList.push(nums[i]);\n    backtrack(list, tempList, nums, i + 1);\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function (nums) {\n  const list = [];\n  backtrack(list, [], nums, 0);\n  return list;\n};\n"}]},"word-search":{id:"79",name:"word-search",pre:[{text:"\u56de\u6eaf",link:null,color:"green"}],keyPoints:[{text:"\u5206\u6790",link:null,color:"blue"},{text:"\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u627e\u5230\u8d77\u59cb\u70b9\u76f8\u540c\u7684\u5b57\u7b26\uff0c\u505aDFS",link:null,color:"blue"},{text:"DFS\u8fc7\u7a0b\u4e2d\uff0c\u8981\u8bb0\u5f55\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u9632\u6b62\u91cd\u590d\u904d\u5386\uff0c\u8fd9\u91cc\uff08JavaCode\u4e2d\uff09\u7528`*`\u8868\u793a\u5f53\u524d\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u7528Set\u6216\u8005\u662fboolean[][]\u6570\u7ec4\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u4f4d\u7f6e\u3002",link:null,color:"blue"},{text:"\u662f\u5426\u5339\u914d\u5f53\u524d\u5355\u8bcd\u4e2d\u7684\u5b57\u7b26\uff0c\u4e0d\u7b26\u5408\u56de\u6eaf\uff0c\u8fd9\u91cc\u8bb0\u5f97\u628a\u5f53\u524d`*`\u91cd\u65b0\u8bbe\u4e3a\u5f53\u524d\u5b57\u7b26\u3002\u5982\u679c\u7528Set\u6216\u8005\u662fboolean[][]\u6570\u7ec4\uff0c\u8bb0\u5f97\u628a\u5f53\u524d\u4f4d\u7f6e\u91cd\u8bbe\u4e3a\u6ca1\u6709\u8bbf\u95ee\u8fc7\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/79.word-search.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/79.word-search.md",code:[{language:"java",text:"\npublic class LC79WordSearch {\n  public boolean exist(char[][] board, String word) {\n    if (board == null || word == null) return false;\n    if (word.length() == 0) return true;\n    if (board.length == 0) return false;\n    int rows = board.length;\n    int cols = board[0].length;\n    for (int r = 0; r < rows; r++) {\n      for (int c = 0; c < cols; c++) {\n        // scan board, start with word first character\n        if (board[r][c] == word.charAt(0)) {\n          if (helper(board, word, r, c, 0)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  private boolean helper(char[][] board, String word, int r, int c, int start) {\n    // already match word all characters, return true\n    if (start == word.length()) return true;\n    if (!isValid(board, r, c) ||\n        board[r][c] != word.charAt(start)) return false;\n    // mark visited\n    board[r][c] = '*';\n    boolean res = helper(board, word, r - 1, c, start + 1) // \u4e0a\n        ||  helper(board, word, r + 1, c, start + 1)       // \u4e0b\n        ||  helper(board, word, r, c - 1, start + 1)       // \u5de6\n        ||  helper(board, word, r, c + 1, start + 1);      // \u53f3\n    // backtracking to start position\n    board[r][c] = word.charAt(start);\n    return res;\n  }\n\n  private boolean isValid(char[][] board, int r, int c) {\n    return r >= 0 && r < board.length && c >= 0 && c < board[0].length;\n  }\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=79 lang=javascript\n *\n * [79] Word Search\n */\nfunction DFS(board, row, col, rows, cols, word, cur) {\n  // \u8fb9\u754c\u68c0\u67e5\n  if (row >= rows || row < 0) return false;\n  if (col >= cols || col < 0) return false;\n\n  const item = board[row][col];\n\n  if (item !== word[cur]) return false;\n\n  if (cur + 1 === word.length) return true;\n\n  // \u5982\u679c\u4f60\u7528hashmap\u8bb0\u5f55\u8bbf\u95ee\u7684\u5b57\u6bcd\uff0c \u90a3\u4e48\u4f60\u9700\u8981\u6bcf\u6b21backtrack\u7684\u65f6\u5019\u624b\u52a8\u6e05\u9664hashmap\uff0c\u5e76\u4e14\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\n  // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e00\u4e2alittle trick\n\n  board[row][col] = null;\n\n  // \u4e0a\u4e0b\u5de6\u53f3\n  const res =\n    DFS(board, row + 1, col, rows, cols, word, cur + 1) ||\n    DFS(board, row - 1, col, rows, cols, word, cur + 1) ||\n    DFS(board, row, col - 1, rows, cols, word, cur + 1) ||\n    DFS(board, row, col + 1, rows, cols, word, cur + 1);\n\n  board[row][col] = item;\n\n  return res;\n}\n/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function (board, word) {\n  if (word.length === 0) return true;\n  if (board.length === 0) return false;\n\n  const rows = board.length;\n  const cols = board[0].length;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const hit = DFS(board, i, j, rows, cols, word, 0);\n      if (hit) return true;\n    }\n  }\n  return false;\n};\n"},{language:"py",text:"\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m = len(board)\n        n = len(board[0])\n\n        def dfs(board, r, c, word, index):\n            if index == len(word):\n                return True\n            if r < 0 or r >= m or c < 0 or c >= n or board[r][c] != word[index]:\n                return False\n            board[r][c] = '*'\n            res = dfs(board, r - 1, c, word, index + 1) or dfs(board, r + 1, c, word, index + 1) or dfs(board, r, c - 1, word, index + 1) or dfs(board, r, c + 1, word, index + 1)\n            board[r][c] = word[index]\n            return res\n\n        for r in range(m):\n            for c in range(n):\n                if board[r][c] == word[0]:\n                    if dfs(board, r, c, word, 0):\n                        return True\n"}]},"remove-duplicates-from-sorted-array-ii":{id:"80",name:"remove-duplicates-from-sorted-array-ii",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u5206\u6790",link:null,color:"blue"},{text:"\u5feb\u6162\u6307\u9488",link:null,color:"blue"},{text:"\u8bfb\u5199\u6307\u9488",link:null,color:"blue"},{text:"\u5220\u9664\u6392\u5e8f\u95ee\u9898",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/80.remove-duplicates-from-sorted-array-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/80.remove-duplicates-from-sorted-array-ii.md",code:[{language:"py",text:"\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        # \u5199\u6307\u9488\n        i = 0\n        K = 2\n        for num in nums:\n            if i < K or num != nums[i-K]:\n                nums[i] = num\n                i += 1\n        return i\n"}]},"largest-rectangle-in-histogram":{id:"84",name:"largest-rectangle-in-histogram",pre:[{text:"\u5355\u8c03\u6808",link:null,color:"purple"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/84.largest-rectangle-in-histogram.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/84.largest-rectangle-in-histogram.md",code:[{language:"py",text:"\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n, ans = len(heights), 0\n        if n != 0:\n            ans = heights[0]\n        for i in range(n):\n            height = heights[i]\n            for j in range(i, n):\n                height = min(height, heights[j])\n                ans = max(ans, (j - i + 1) * height)\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n = len(heights)\n        l, r, ans = [-1] * n, [n] * n, 0\n        for i in range(1, n):\n            j = i - 1\n            while j >= 0 and heights[j] >= heights[i]:\n                j -= 1\n            l[i] = j\n        for i in range(n - 2, -1, -1):\n            j = i + 1\n            while j < n and heights[j] >= heights[i]:\n                j += 1\n            r[i] = j\n        for i in range(n):\n            ans = max(ans, heights[i] * (r[i] - l[i] - 1))\n        return ans\n\n"},{language:"py",text:"\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n = len(heights)\n        l, r, ans = [-1] * n, [n] * n, 0\n\n        for i in range(1, n):\n            j = i - 1\n            while j >= 0 and heights[j] >= heights[i]:\n                j = l[j]\n            l[i] = j\n        for i in range(n - 2, -1, -1):\n            j = i + 1\n            while j < n and heights[j] >= heights[i]:\n                j = r[j]\n            r[i] = j\n        for i in range(n):\n            ans = max(ans, heights[i] * (r[i] - l[i] - 1))\n        return ans\n\n"},{language:"py",text:"\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n, heights, st, ans = len(heights), [0] + heights + [0], [], 0\n        for i in range(n + 2):\n            while st and heights[st[-1]] > heights[i]:\n                ans = max(ans, heights[st.pop(-1)] * (i - st[-1] - 1))\n            st.append(i)\n        return ans\n"},{language:"py",text:"\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n, heights, st, ans = len(heights),[0] + heights + [0], [], 0\n        for i in range(n + 2):\n            while st and heights[st[-1]] > heights[i]:\n                a = heights[st[-1]]\n                # \u5982\u679c\u6ca1\u6709\u524d\u9762\u7684\u54e8\u5175\uff0c\u8fd9\u91cc\u53ef\u80fd\u4f1a\u8d8a\u754c\u3002\n                st.pop()\n                ans = max(ans, a * (i - 1 - st[-1]))\n            st.append(i)\n        return ans\n"}]},"maximal-rectangle":{id:"85",name:"maximal-rectangle",pre:[{text:"\u5355\u8c03\u6808",link:null,color:"purple"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/85.maximal-rectangle.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/85.maximal-rectangle.md",code:[{language:"py",text:'\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n, heights, st, ans = len(heights), [0] + heights + [0], [], 0\n        for i in range(n + 2):\n            while st and heights[st[-1]] > heights[i]:\n                ans = max(ans, heights[st.pop(-1)] * (i - st[-1] - 1))\n            st.append(i)\n\n        return ans\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        m = len(matrix)\n        if m == 0: return 0\n        n = len(matrix[0])\n        heights = [0] * n\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == "0":\n                    heights[j] = 0\n                else:\n                    heights[j] += 1\n            ans = max(ans, self.largestRectangleArea(heights))\n        return ans\n\n'}]},"partition-list":{id:"86",name:"partition-list",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u904d\u5386\uff09",link:null,color:"blue"},{text:"\u865a\u62df\u8282\u70b9dummy\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u904d\u5386\u5b8c\u6210\u4e4b\u540e\u8bb0\u5f97`currentL1.next=null;`\u5426\u5219\u4f1a\u5185\u5b58\u6ea2\u51fa>\u5982\u679c\u5355\u7eaf\u7684\u904d\u5386\u662f\u4e0d\u9700\u8981\u4e0a\u9762\u64cd\u4f5c\u7684\uff0c\u4f46\u662f\u6211\u4eec\u7684\u904d\u5386\u4f1a\u5bfc\u81f4currentL1.next\u548ccurrentL2.next>\u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u4e0d\u662fnull\uff0c\u5982\u679c\u4e0d\u8fd9\u4e48\u64cd\u4f5c\u7684\u8bdd\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u94fe\u8868\u6210\u73af\uff0c\u9020\u6210\u6ea2\u51fa\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/86.partition-list.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/86.partition-list.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=86 lang=javascript\n *\n * [86] Partition List\n *\n * https://leetcode.com/problems/partition-list/description/\n *\n * algorithms\n * Medium (36.41%)\n * Total Accepted:    155.1K\n * Total Submissions: 425.1K\n * Testcase Example:  '[1,4,3,2,5,2]\\n3'\n *\n * Given a linked list and a value x, partition it such that all nodes less\n * than x come before nodes greater than or equal to x.\n *\n * You should preserve the original relative order of the nodes in each of the\n * two partitions.\n *\n * Example:\n *\n *\n * Input: head = 1->4->3->2->5->2, x = 3\n * Output: 1->2->2->4->3->5\n *\n *\n */\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} x\n * @return {ListNode}\n */\nvar partition = function (head, x) {\n  const dummyHead1 = {\n    next: null,\n  };\n  const dummyHead2 = {\n    next: null,\n  };\n\n  let current = {\n    next: head,\n  };\n  let currentL1 = dummyHead1;\n  let currentL2 = dummyHead2;\n  while (current.next) {\n    current = current.next;\n    if (current.val < x) {\n      currentL1.next = current;\n      currentL1 = current;\n    } else {\n      currentL2.next = current;\n      currentL2 = current;\n    }\n  }\n\n  currentL2.next = null;\n\n  currentL1.next = dummyHead2.next;\n\n  return dummyHead1.next;\n};\n"},{language:"py",text:'\nclass Solution:\n    def partition(self, head: ListNode, x: int) -> ListNode:\n        """\u5728\u539f\u94fe\u8868\u64cd\u4f5c\uff0c\u601d\u8def\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u662f\u901a\u8fc7\u6307\u9488\u8fdb\u884c\u533a\u5206\u800c\u5df2"""\n        # \u5728\u94fe\u8868\u6700\u524d\u9762\u8bbe\u5b9a\u4e00\u4e2a\u521d\u59cbnode\u4f5c\u4e3a\u951a\u70b9\uff0c\u65b9\u4fbf\u8fd4\u56de\u6700\u540e\u7684\u7ed3\u679c\n        first_node = ListNode(0)\n        first_node.next = head\n        # \u8bbe\u8ba1\u4e09\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u5c0f\u4e8ex\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5373\u524d\u540e\u5206\u79bb\u70b9\n        # \u4e00\u4e2a\u6307\u5411\u5f53\u524d\u904d\u5386\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n        # \u4e00\u4e2a\u6307\u5411\u5f53\u524d\u904d\u5386\u7684\u8282\u70b9\n        sep_node = first_node\n        pre_node = first_node\n        current_node = head\n\n        while current_node is not None:\n            if current_node.val < x:\n                # \u6ce8\u610f\u6709\u53ef\u80fd\u51fa\u73b0\u524d\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u5206\u79bb\u8282\u70b9\u7684\u60c5\u51b5\n                if pre_node is sep_node:\n                    pre_node = current_node\n                    sep_node = current_node\n                    current_node = current_node.next\n                else:\n                    # \u8fd9\u6bb5\u6b21\u5e8f\u6bd4\u8f83\u70e7\u8111\n                    pre_node.next = current_node.next\n                    current_node.next = sep_node.next\n                    sep_node.next = current_node\n                    sep_node = current_node\n                    current_node = pre_node.next\n            else:\n                pre_node = current_node\n                current_node = pre_node.next\n\n        return first_node.next\n'}]},"merge-sorted-array":{id:"88",name:"merge-sorted-array",pre:[{text:"\u5f52\u5e76\u6392\u5e8f",link:null,color:"cyan"}],keyPoints:[{text:"\u4ece\u540e\u5f80\u524d\u6bd4\u8f83\uff0c\u5e76\u4ece\u540e\u5f80\u524d\u63d2\u5165",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"loomberg"},{name:"facebook"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/88.merge-sorted-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/88.merge-sorted-array.md",code:[{language:"js",text:"\n// \u8fd9\u79cd\u89e3\u6cd5\u8fdem\u90fd\u7528\u4e0d\u5230\n// \u8fd9\u663e\u7136\u4e0d\u662f\u51fa\u9898\u4eba\u7684\u610f\u601d\nif (n === 0) return;\nlet current2 = 0;\nfor (let i = nums1.length - 1; i >= nums1.length - n; i--) {\n  nums1[i] = nums2[current2++];\n}\nnums1.sort((a, b) => a - b); // \u5f53\u7136\u4f60\u53ef\u4ee5\u81ea\u5df1\u5199\u6392\u5e8f\uff0c\u8fd9\u91cc\u61d2\u5f97\u5199\u4e86\uff0c\u56e0\u4e3a\u5df2\u7ecf\u504f\u79bb\u4e86\u9898\u76ee\u672c\u8eab\n"},{language:"js",text:"\n// \u5c06nums1 \u548c nums2 \u5408\u5e76\nfunction merge(nums1, nums2) {\n  let ret = [];\n  while (nums1.length || nums2.length) {\n    // \u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u4ee3\u7801\u6709\u70b9\u8d58\u4f59\n    if (nums1.length === 0) {\n      ret.push(nums2.shift());\n      continue;\n    }\n\n    if (nums2.length === 0) {\n      ret.push(nums1.shift());\n      continue;\n    }\n    const a = nums1[0];\n    const b = nums2[0];\n    if (a > b) {\n      ret.push(nums2.shift());\n    } else {\n      ret.push(nums1.shift());\n    }\n  }\n  return ret;\n}\n"},{language:"js",text:"\nvar merge = function (nums1, m, nums2, n) {\n  // \u8bbe\u7f6e\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u9488\u521d\u59cb\u5316\u6307\u5411nums1\u7684\u672b\u5c3e\uff08\u6839\u636e#62\uff0c\u5e94\u8be5\u662findex\u4e3a m+n-1 \u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3anums1\u7684\u957f\u5ea6\u6709\u53ef\u80fd\u66f4\u957f\uff09\n  // \u7136\u540e\u4e0d\u65ad\u5de6\u79fb\u6307\u9488\u66f4\u65b0\u5143\u7d20\n  let current = m + n - 1;\n\n  while (current >= 0) {\n    // \u6ca1\u5fc5\u8981\u7ee7\u7eed\u4e86\n    if (n === 0) return;\n\n    // \u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u4ee3\u7801\u6709\u70b9\u8d58\u4f59\n    if (m < 1) {\n      nums1[current--] = nums2[--n];\n      continue;\n    }\n\n    if (n < 1) {\n      nums1[current--] = nums1[--m];\n      continue;\n    }\n    // \u53d6\u5927\u7684\u586b\u5145 nums1\u7684\u672b\u5c3e\n    // \u7136\u540e\u66f4\u65b0 m \u6216\u8005 n\n    if (nums1[m - 1] > nums2[n - 1]) {\n      nums1[current--] = nums1[--m];\n    } else {\n      nums1[current--] = nums2[--n];\n    }\n  }\n};\n"},{language:"py",text:'\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        """\n        Do not return anything, modify nums1 in-place instead.\n        """\n        # \u6574\u4f53\u601d\u8def\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u6ca1\u6709\u4f7f\u7528 current \u6307\u9488\u8bb0\u5f55\u5f53\u524d\u586b\u8865\u4f4d\u7f6e\n        while m > 0 and n > 0:\n            if nums1[m-1] <= nums2[n-1]:\n                nums1[m+n-1] = nums2[n-1]\n                n -= 1\n            else:\n                nums1[m+n-1] = nums1[m-1]\n                m -=1\n        """\n        \u7531\u4e8e\u6ca1\u6709\u4f7f\u7528 current\uff0c\u7b2c\u4e00\u6b65\u6bd4\u8f83\u7ed3\u675f\u540e\u6709\u4e24\u79cd\u60c5\u51b5:\n            1. \u6307\u9488 m>0\uff0cn=0\uff0c\u6b64\u65f6\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u5904\u7406\n            2. \u6307\u9488 n>0\uff0cm=0\uff0c\u6b64\u65f6\u9700\u8981\u5c06 nums2 \u6307\u9488\u5de6\u4fa7\u5143\u7d20\u5168\u90e8\u62f7\u8d1d\u5230 nums1 \u7684\u524d n \u4f4d\n        """\n        if n > 0:\n            nums1[:n] = nums2[:n]\n'}]},"subsets-ii":{id:"90",name:"subsets-ii",pre:[{text:"\u56de\u6eaf",link:null,color:"green"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/90.subsets-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/90.subsets-ii.md",code:[{language:"js",text:"\nfunction backtrack(list, tempList, nums, start) {\n  list.push([...tempList]);\n  for (let i = start; i < nums.length; i++) {\n    // \u548c78.subsets\u7684\u533a\u522b\u5728\u4e8e\u8fd9\u9053\u9898nums\u53ef\u4ee5\u6709\u91cd\u590d\n    // \u56e0\u6b64\u9700\u8981\u8fc7\u6ee4\u8fd9\u79cd\u60c5\u51b5\n    if (i > start && nums[i] === nums[i - 1]) continue;\n    tempList.push(nums[i]);\n    backtrack(list, tempList, nums, i + 1);\n    tempList.pop();\n  }\n}\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsetsWithDup = function (nums) {\n  const list = [];\n  backtrack(\n    list,\n    [],\n    nums.sort((a, b) => a - b),\n    0,\n    []\n  );\n  return list;\n};\n"}]},"decode-ways":{id:"91",name:"decode-ways",pre:[{text:"\u722c\u697c\u68af\u95ee\u9898",link:null,color:"geekblue"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u722c\u697c\u68af\u95ee\u9898\uff08\u6211\u628a\u8fd9\u79cd\u9898\u76ee\u7edf\u79f0\u4e3a\u722c\u697c\u68af\u95ee\u9898\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/91.decode-ways.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/91.decode-ways.md",code:[{language:"js",text:'\n/*\n * @lc app=leetcode id=91 lang=javascript\n *\n * [91] Decode Ways\n *\n * https://leetcode.com/problems/decode-ways/description/\n *\n * algorithms\n * Medium (21.93%)\n * Total Accepted:    254.4K\n * Total Submissions: 1.1M\n * Testcase Example:  \'"12"\'\n *\n * A message containing letters from A-Z is being encoded to numbers using the\n * following mapping:\n *\n *\n * \'A\' -> 1\n * \'B\' -> 2\n * ...\n * \'Z\' -> 26\n *\n *\n * Given a non-empty string containing only digits, determine the total number\n * of ways to decode it.\n *\n * Example 1:\n *\n *\n * Input: "12"\n * Output: 2\n * Explanation:\xa0It could be decoded as "AB" (1 2) or "L" (12).\n *\n *\n * Example 2:\n *\n *\n * Input: "226"\n * Output: 3\n * Explanation:\xa0It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2\n * 6).\n *\n */\n/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function (s) {\n  if (s == null || s.length == 0) {\n    return 0;\n  }\n  const dp = Array(s.length + 1).fill(0);\n  dp[0] = 1;\n  dp[1] = s[0] !== "0" ? 1 : 0;\n  for (let i = 2; i < s.length + 1; i++) {\n    const one = +s.slice(i - 1, i);\n    const two = +s.slice(i - 2, i);\n\n    if (two >= 10 && two <= 26) {\n      dp[i] = dp[i - 2];\n    }\n\n    if (one >= 1 && one <= 9) {\n      dp[i] += dp[i - 1];\n    }\n  }\n\n  return dp[dp.length - 1];\n};\n'}]},"reverse-linked-list-ii":{id:"92",name:"reverse-linked-list-ii",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u56db\u70b9\u6cd5",link:null,color:"blue"},{text:"\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"\u8003\u8651\u7279\u6b8a\u60c5\u51b5m\u662f1\u6216\u8005n\u662f\u94fe\u8868\u957f\u5ea6\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u865a\u62df\u8282\u70b9dummy\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u7528\u56db\u4e2a\u53d8\u91cf\u8bb0\u5f55\u7279\u6b8a\u8282\u70b9\uff0c\u7136\u540e\u64cd\u4f5c\u8fd9\u56db\u4e2a\u8282\u70b9\u4f7f\u4e4b\u6309\u7167\u4e00\u5b9a\u65b9\u5f0f\u8fde\u63a5\u5373\u53ef\u3002",link:null,color:"blue"},{text:"\u6ce8\u610f\u66f4\u65b0current\u548cpre\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u6709\u53ef\u80fd\u51fa\u73b0\u6ea2\u51fa",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/92.reverse-linked-list-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/92.reverse-linked-list-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=92 lang=javascript\n *\n * [92] Reverse Linked List II\n *\n * https://leetcode.com/problems/reverse-linked-list-ii/description/\n */\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} m\n * @param {number} n\n * @return {ListNode}\n */\nvar reverseBetween = function (head, m, n) {\n  // \u865a\u62df\u8282\u70b9\uff0c\u7b80\u5316\u64cd\u4f5c\n  const dummyHead = {\n    next: head,\n  };\n\n  let cur = dummyHead.next; // \u5f53\u524d\u904d\u5386\u7684\u8282\u70b9\n  let pre = cur; // \u56e0\u4e3a\u8981\u53cd\u8f6c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u8bb0\u4f4f\u524d\u4e00\u4e2a\u8282\u70b9\n  let index = 0; // \u94fe\u8868\u7d22\u5f15\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u662f\u7279\u6b8a\u4f4d\u7f6e\uff08\u5934\u5c3e\u4f4d\u7f6e\uff09\n\n  // \u4e0a\u9762\u63d0\u5230\u7684\u56db\u4e2a\u7279\u6b8a\u8282\u70b9\n  let p1 = (p2 = p3 = p4 = null);\n\n  while (cur) {\n    const next = cur.next;\n    index++;\n\n    // \u5bf9 (m - n) \u8303\u56f4\u5185\u7684\u8282\u70b9\u8fdb\u884c\u53cd\u8f6c\n    if (index > m && index <= n) {\n      cur.next = pre;\n    }\n\n    // \u4e0b\u9762\u56db\u4e2aif\u90fd\u662f\u8fb9\u754c, \u7528\u4e8e\u66f4\u65b0\u56db\u4e2a\u7279\u6b8a\u8282\u70b9\u7684\u503c\n    if (index === m - 1) {\n      p1 = cur;\n    }\n    if (index === m) {\n      p2 = cur;\n    }\n\n    if (index === n) {\n      p3 = cur;\n    }\n\n    if (index === n + 1) {\n      p4 = cur;\n    }\n\n    pre = cur;\n\n    cur = next;\n  }\n\n  // \u4e24\u4e2a\u94fe\u8868\u5408\u5e76\u8d77\u6765\n  (p1 || dummyHead).next = p3; // \u7279\u6b8a\u60c5\u51b5\u9700\u8981\u8003\u8651\n  p2.next = p4;\n\n  return dummyHead.next;\n};\n"},{language:"py",text:"\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:\n        pre = None\n        cur = head\n        i = 0\n        p1 = p2 = p3 = p4 = None\n        # \u4e00\u5768\u903b\u8f91\n        if p1:\n            p1.next = p3\n        else:\n            dummy.next = p3\n        if p2:\n            p2.next = p4\n        return head\n"},{language:"py",text:"\nclass Solution:\n   def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:\n       pre = None\n       cur = head\n       i = 0\n       p1 = p2 = p3 = p4 = None\n       dummy = ListNode(0)\n       dummy.next = head\n       # \u4e00\u5768\u903b\u8f91\n       if p1:\n           p1.next = p3\n       else:\n           dummy.next = p3\n       if p2:\n           p2.next = p4\n\n       return dummy.next\n"},{language:"py",text:"\n    while cur:\n           i += 1\n           if i == m - 1:\n               p1 = cur\n           next = cur.next\n           if m < i <= n:\n               cur.next = pre\n\n           if i == m:\n               p2 = cur\n               p2.next = None\n\n           if i == n:\n               p3 = cur\n\n           if i == n + 1:\n               p4 = cur\n\n           pre = cur\n           cur = next\n"}]},"binary-tree-inorder-traversal":{id:"94",name:"binary-tree-inorder-traversal",pre:[{text:"\u4e8c\u53c9\u6811",link:null,color:"geekblue"},{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"\u4e8c\u53c9\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u904d\u5386\uff09>\u4e0d\u540c\u7684\u904d\u5386\u7b97\u6cd5\u5dee\u5f02\u8fd8\u662f\u86ee\u5927\u7684",link:null,color:"blue"},{text:"\u5982\u679c\u975e\u9012\u5f52\u7684\u8bdd\u5229\u7528\u6808\u6765\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5982\u679c\u6570\u636e\u89c4\u6a21\u4e0d\u5927\u7684\u8bdd\uff0c\u5efa\u8bae\u4f7f\u7528\u9012\u5f52",link:null,color:"blue"},{text:"\u9012\u5f52\u7684\u95ee\u9898\u9700\u8981\u6ce8\u610f\u4e24\u70b9\uff0c\u4e00\u4e2a\u662f\u7ec8\u6b62\u6761\u4ef6\uff0c\u4e00\u4e2a\u5982\u4f55\u7f29\u5c0f\u89c4\u6a211.\u7ec8\u6b62\u6761\u4ef6\uff0c\u81ea\u7136\u662f\u5f53\u524d\u8fd9\u4e2a\u5143\u7d20\u662fnull\uff08\u94fe\u8868\u4e5f\u662f\u4e00\u6837\uff092.\u7531\u4e8e\u4e8c\u53c9\u6811\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u9012\u5f52\u7ed3\u6784\uff0c\u6bcf\u6b21\u5904\u7406\u4e00\u4e2a\u5b50\u6811\u5176\u5b9e\u5c31\u662f\u7f29\u5c0f\u4e86\u89c4\u6a21\uff0c\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5408\u5e76\u7ed3\u679c\uff0c\u8fd9\u91cc\u7684\u5408\u5e76\u7ed3\u679c\u5176\u5b9e\u5c31\u662f`left.concat(mid).concat(right)`,mid\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u8282\u70b9\uff0cleft\u548cright`\u9012\u5f52\u6c42\u51fa\u5373\u53ef`",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/94.binary-tree-inorder-traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/94.binary-tree-inorder-traversal.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    List<Integer> res = new LinkedList<>();\n    public List<Integer> inorderTraversal(TreeNode root) {\n        inorder(root);\n        return res;\n    }\n\n    public void inorder (TreeNode root) {\n        if (root == null) return;\n\n        inorder(root.left);\n\n        res.add(root.val);\n\n        inorder(root.right);\n    }\n}\n"},{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<> ();\n        Stack<TreeNode> stack = new Stack<> ();\n\n        while (root != null || !stack.isEmpty()) {\n            while (root != null) {\n                stack.push(root);\n                root = root.left;\n            }\n            root = stack.pop();\n            res.add(root.val);\n            root = root.right;\n        }\n        return res;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function (root) {\n  // 1. Recursive solution\n  // if (!root) return [];\n  // const left = root.left ? inorderTraversal(root.left) : [];\n  // const right = root.right ? inorderTraversal(root.right) : [];\n  // return left.concat([root.val]).concat(right);\n\n  // 2. iterative solutuon\n  if (!root) return [];\n  const stack = [root];\n  const ret = [];\n  let left = root.left;\n\n  let item = null; // stack \u4e2d\u5f39\u51fa\u7684\u5f53\u524d\u9879\n\n  while (left) {\n    stack.push(left);\n    left = left.left;\n  }\n\n  while ((item = stack.pop())) {\n    ret.push(item.val);\n    let t = item.right;\n\n    while (t) {\n      stack.push(t);\n      t = t.left;\n    }\n  }\n\n  return ret;\n};\n"},{language:"cpp",text:"\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<TreeNode*> s;\n        vector<int> v;\n        while (root != NULL || !s.empty()) {\n            for (; root != NULL; root = root->left)\n                s.push_back(root);\n            v.push_back(s.back()->val);\n            root = s.back()->right;\n            s.pop_back();\n        }\n        return v;\n    }\n};\n"}]},"unique-binary-search-trees-ii":{id:"95",name:"unique-binary-search-trees-ii",pre:[{text:"\u4e8c\u53c9\u641c\u7d22\u6811",link:null,color:"geekblue"},{text:"\u5206\u6cbb",link:null,color:"gold"}],keyPoints:[{text:"\u5206\u6cbb\u6cd5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/95.unique-binary-search-trees-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/95.unique-binary-search-trees-ii.md",code:[]},"unique-binary-search-trees":{id:"96",name:"unique-binary-search-trees",pre:[{text:"\u4e8c\u53c9\u641c\u7d22\u6811",link:null,color:"geekblue"},{text:"\u5206\u6cbb",link:null,color:"gold"}],keyPoints:[{text:"\u5206\u6cbb\u6cd5",link:null,color:"blue"},{text:"\u7b1b\u5361\u5c14\u79ef",link:null,color:"blue"},{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/96.unique-binary-search-trees.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/96.unique-binary-search-trees.md",code:[{language:"py",text:"\nclass Solution:\n    def numTrees(self, n: int) -> int:\n        if n <= 1:\n            return 1\n        res = 0\n        for i in range(1, n + 1):\n            res += self.numTrees(i - 1) * self.numTrees(n - i)\n        return res\n"}]},"validate-binary-search-tree":{id:"98",name:"validate-binary-search-tree",pre:[{text:"\u4e2d\u5e8f\u904d\u5386",link:null,color:"red"}],keyPoints:[{text:"\u4e8c\u53c9\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u904d\u5386\uff09",link:null,color:"blue"},{text:"\u4e2d\u5e8f\u904d\u5386\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\uff08BST\uff09\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4",link:null,color:"blue"},{text:"\u5982\u679c\u4e00\u4e2a\u6811\u904d\u5386\u7684\u7ed3\u679c\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u90a3\u4e48\u4ed6\u4e5f\u662f\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811(BST)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/98.validate-binary-search-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/98.validate-binary-search-tree.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        Stack<Integer> stack = new Stack<> ();\n        TreeNode previous = null;\n\n        while (root != null || !stack.isEmpty()) {\n            while (root != null) {\n                stack.push(root);\n                root = root.left;\n            }\n            root = stack.pop();\n            if (previous != null && root.val <= previous.val ) return false;\n            previous = root;\n            root = root.right;\n        }\n        return true;\n    }\n}\n"},{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        return helper(root, null, null);\n    }\n\n    private boolean helper(TreeNode root, Integer lower, Integer higher) {\n        if (root == null) return true;\n\n        if (lower != null && root.val <= lower) return false;\n        if (higher != null && root.val >= higher) return false;\n\n        if (!helper(root.left, lower, root.val)) return false;\n        if (!helper(root.right, root.val, higher)) return false;\n\n        return true;\n    }\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=98 lang=javascript\n *\n * [98] Validate Binary Search Tree\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function (root) {\n  if (root === null) return true;\n  if (root.left === null && root.right === null) return true;\n  const stack = [root];\n  let cur = root;\n  let pre = null;\n\n  function insertAllLefts(cur) {\n    while (cur && cur.left) {\n      const l = cur.left;\n      stack.push(l);\n      cur = l;\n    }\n  }\n  insertAllLefts(cur);\n\n  while ((cur = stack.pop())) {\n    if (pre && cur.val <= pre.val) return false;\n    const r = cur.right;\n\n    if (r) {\n      stack.push(r);\n      insertAllLefts(r);\n    }\n    pre = cur;\n  }\n\n  return true;\n};\n"},{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function (root) {\n  if (!root) return true;\n  return valid(root);\n};\n\nfunction valid(root, min = -Infinity, max = Infinity) {\n  if (!root) return true;\n  const val = root.val;\n  if (val <= min) return false;\n  if (val >= max) return false;\n  return valid(root.left, min, val) && valid(root.right, val, max);\n}\n"},{language:"cpp",text:"\n// \u9012\u5f52\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        TreeNode* prev = nullptr;\n        return validateBstInorder(root, prev);\n    }\n\nprivate:\n    bool validateBstInorder(TreeNode* root, TreeNode*& prev) {\n        if (root == nullptr) return true;\n        if (!validateBstInorder(root->left, prev)) return false;\n        if (prev != nullptr && prev->val >= root->val) return false;\n        prev = root;\n        return validateBstInorder(root->right, prev);\n    }\n};\n\n// \u8fed\u4ee3\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        auto s = vector<TreeNode*>();\n        TreeNode* prev = nullptr;\n        while (root != nullptr || !s.empty()) {\n            while (root != nullptr) {\n                s.push_back(root);\n                root = root->left;\n            }\n            root = s.back();\n            s.pop_back();\n            if (prev != nullptr && prev->val >= root->val) return false;\n            prev = root;\n            root = root->right;\n        }\n        return true;\n    }\n};\n"}]},"symmetric-tree":{id:"101",name:"symmetric-tree",pre:[{text:"\u4e8c\u53c9\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"geekblue"},{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"orange"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"bloomberg"},{name:"linkedin"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/101.symmetric-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/101.symmetric-tree.md",code:[{language:"py",text:"\nseen = dict()\nfor i, num in enumerate(nums):\n    seen[i] = num\nfor i, num in enumerate(nums):\n    if  seen[len(nums) - 1 - i] != num:\n      return False\nreturn True\n"},{language:"py",text:"\nl = 0\nr = len(nums) - 1\n\nwhile l < r:\n   if nums[l] != nums[r]: return False\n   l += 1\n   r -= 1\nreturn True\n\n"},{language:"py",text:"\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        def dfs(root1, root2):\n            if root1 == root2: return True\n            if not root1 or not root2: return False\n            if root1.val != root2.val: return False\n            return dfs(root1.left, root2.right) and dfs(root1.right, root2.left)\n        if not root: return True\n        return dfs(root.left, root.right)\n"}]},"binary-tree-level-order-traversal":{id:"102",name:"binary-tree-level-order-traversal",pre:[{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u961f\u5217",link:null,color:"blue"},{text:"\u961f\u5217\u4e2d\u7528Null(\u4e00\u4e2a\u7279\u6b8a\u5143\u7d20)\u6765\u5212\u5206\u6bcf\u5c42",link:null,color:"blue"},{text:"\u6811\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"\u904d\u5386",link:null,color:"blue"},{text:"\u5c42\u6b21\u904d\u5386\uff08BFS\uff09",link:null,color:"blue"},{text:"\u6ce8\u610f\u585e\u5165null\u7684\u65f6\u5019\uff0c\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u4e0d\u7136\u4f1a\u65e0\u9650\u5faa\u73af",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/102.binary-tree-level-order-traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/102.binary-tree-level-order-traversal.md",code:[{language:"js",text:"\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n  if (!root) return [];\n  const items = []; // \u5b58\u653e\u6240\u6709\u8282\u70b9\n  const queue = [root, null]; // null \u7b80\u5316\u64cd\u4f5c\n  let levelNodes = []; // \u5b58\u653e\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\n\n  while (queue.length > 0) {\n    const t = queue.shift();\n\n    if (t) {\n      levelNodes.push(t.val)\n      if (t.left) {\n        queue.push(t.left);\n      }\n      if (t.right) {\n        queue.push(t.right);\n      }\n    } else { // \u4e00\u5c42\u5df2\u7ecf\u904d\u5386\u5b8c\u4e86\n      items.push(levelNodes);\n      levelNodes = [];\n      if (queue.length > 0) {\n        queue.push(null)\n      }\n    }\n  }\n\n  return items;\n};\n\n"},{language:"py",text:'\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        """\u9012\u5f52\u6cd5"""\n        if root is None:\n            return []\n        \n        result = []\n        \n        def add_to_result(level, node):\n            """\u9012\u5f52\u51fd\u6570\n            :param level int \u5f53\u524d\u5728\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\n            :param node TreeNode \u5f53\u524d\u8282\u70b9\n            """\n            if level > len(result) - 1:\n                result.append([])\n                \n            result[level].append(node.val)\n            if node.left:\n                add_to_result(level+1, node.left)\n            if node.right:\n                add_to_result(level+1, node.right)\n        \n        add_to_result(0, root)\n        return result\n'}]},"binary-tree-zigzag-level-order-traversal":{id:"103",name:"binary-tree-zigzag-level-order-traversal",pre:[{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u961f\u5217",link:null,color:"blue"},{text:"\u961f\u5217\u4e2d\u7528Null(\u4e00\u4e2a\u7279\u6b8a\u5143\u7d20)\u6765\u5212\u5206\u6bcf\u5c42",link:null,color:"blue"},{text:"\u6811\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"\u904d\u5386",link:null,color:"blue"},{text:"\u5c42\u6b21\u904d\u5386\uff08BFS\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/103.binary-tree-zigzag-level-order-traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/103.binary-tree-zigzag-level-order-traversal.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=103 lang=javascript\n *\n * [103] Binary Tree Zigzag Level Order Traversal\n *\n * https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/\n *\n * algorithms\n * Medium (40.57%)\n * Total Accepted:    201.2K\n * Total Submissions: 493.7K\n * Testcase Example:  '[3,9,20,null,null,15,7]'\n *\n * Given a binary tree, return the zigzag level order traversal of its nodes'\n * values. (ie, from left to right, then right to left for the next level and\n * alternate between).\n * \n * \n * For example:\n * Given binary tree [3,9,20,null,null,15,7],\n * \n * \u2060   3\n * \u2060  / \\\n * \u2060 9  20\n * \u2060   /  \\\n * \u2060  15   7\n * \n * \n * \n * return its zigzag level order traversal as:\n * \n * [\n * \u2060 [3],\n * \u2060 [20,9],\n * \u2060 [15,7]\n * ]\n * \n * \n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar zigzagLevelOrder = function(root) {\n  if (!root) return [];   \n  const items = [];\n  let isOdd = true;\n  let levelNodes = [];\n  \n  const queue = [root, null];\n\n\n  while(queue.length > 0) {\n      const t = queue.shift();\n\n      if (t) {\n          levelNodes.push(t.val)\n          if (t.left) {\n            queue.push(t.left)\n          }\n          if (t.right) {\n            queue.push(t.right)\n          }\n      } else {\n        if (!isOdd) {\n          levelNodes = levelNodes.reverse();\n        }\n        items.push(levelNodes)\n        levelNodes = [];\n        isOdd = !isOdd;\n        if (queue.length > 0) {\n            queue.push(null);\n        }\n      }\n  }\n\n  return items\n    \n};\n"}]},"maximum-depth-of-binary-tree":{id:"104",name:"maximum-depth-of-binary-tree",pre:[{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"orange"}],keyPoints:[{text:"\u961f\u5217",link:null,color:"blue"},{text:"\u961f\u5217\u4e2d\u7528Null(\u4e00\u4e2a\u7279\u6b8a\u5143\u7d20)\u6765\u5212\u5206\u6bcf\u5c42\uff0c\u6216\u8005\u5728\u5bf9\u6bcf\u5c42\u8fdb\u884c\u8fed\u4ee3\u4e4b\u524d\u4fdd\u5b58\u5f53\u524d\u961f\u5217\u5143\u7d20\u7684\u4e2a\u6570\uff08\u5373\u5f53\u524d\u5c42\u6240\u542b\u5143\u7d20\u4e2a\u6570\uff09",link:null,color:"blue"},{text:"\u6811\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"\u904d\u5386",link:null,color:"blue"},{text:"\u5c42\u6b21\u904d\u5386\uff08BFS\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"apple"},{name:"linkedin"},{name:"uber"},{name:"yahoo"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/104.maximum-depth-of-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/104.maximum-depth-of-binary-tree.md",code:[{language:"js",text:"\nvar maxDepth = function(root) {\n  if (!root) return 0;\n  if (!root.left && !root.right) return 1;\n  return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n};\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=104 lang=javascript\n *\n * [104] Maximum Depth of Binary Tree\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n  if (!root) return 0;\n  if (!root.left && !root.right) return 1;\n\n  // \u5c42\u6b21\u904d\u5386 BFS\n  let cur = root;\n  const queue = [root, null];\n  let depth = 1;\n\n  while ((cur = queue.shift()) !== undefined) {\n    if (cur === null) {\n      // \u6ce8\u610f\u26a0\ufe0f\uff1a \u4e0d\u5904\u7406\u4f1a\u65e0\u9650\u5faa\u73af\uff0c\u8fdb\u800c\u5806\u6808\u6ea2\u51fa\n      if (queue.length === 0) return depth;\n      depth++;\n      queue.push(null);\n      continue;\n    }\n    const l = cur.left;\n    const r = cur.right;\n\n    if (l) queue.push(l);\n    if (r) queue.push(r);\n  }\n\n  return depth;\n};\n"},{language:"py",text:"\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        if not root: return 0\n        q, depth = [root, None], 1\n        while q:\n            node = q.pop(0)\n            if node:\n                if node.left: q.append(node.left)\n                if node.right: q.append(node.right)\n            elif q:\n                q.append(None)\n                depth += 1\n        return depth\n"}]},"Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal":{id:"105",name:"Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal",pre:[{text:"\u4e8c\u53c9\u6811",link:null,color:"geekblue"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal.md",code:[{language:"java",text:"\npreorder = [3,9,20,15,7]\ninorder = [9,3,15,20,7]\n"},{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n  public TreeNode buildTree(int[] preorder, int[] inorder) {\n    if (preorder.length != inorder.length) return null;\n    \n    HashMap<Integer, Integer> map = new HashMap<> ();\n\n    for (int i=0; i<inorder.length; i++) {\n      map.put(inorder[i], i);\n    }\n\n    return helper(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1, map);\n  }\n\n  public TreeNode helper(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, HashMap<Integer, Integer> map) {\n    if (preStart>preEnd || inStart>inEnd) return null;\n    \n    TreeNode root = new TreeNode(preorder[prestart]);\n    int inRoot = map.get(preorder[preStart]);\n    int leftChldLen = inRoot - inStart;\n\n    root.left = helper(preorder, preStart+1, preStart+leftChldLen, inorder, inStart, inRoot-1, map);\n    root.left = helper(preorder, preStart+leftChldLen+1, preEnd, inorder, inRoot+1, inEnd, map);\n\n    return root;\n  }\n}\n"}]},"convert-sorted-array-to-binary-search-tree":{id:"108",name:"convert-sorted-array-to-binary-search-tree",pre:[{text:"\u4e8c\u53c9\u641c\u7d22\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"geekblue"},{text:"\u5e73\u8861\u4e8c\u53c9\u6811",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"geekblue"},{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"orange"}],keyPoints:[{text:"\u627e\u4e2d\u70b9",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"airbnb"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/108.convert-sorted-array-to-binary-search-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/108.convert-sorted-array-to-binary-search-tree.md",code:[{language:"java",text:"\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        return dfs(nums, 0, nums.length - 1);\n    }\n\n    private TreeNode dfs(int[] nums, int lo, int hi) {\n        if (lo > hi) {\n            return null;\n        }\n        int mid = lo + (hi - lo) / 2;\n        TreeNode root = new TreeNode(nums[mid]);\n        root.left = dfs(nums, lo, mid - 1);\n        root.right = dfs(nums, mid + 1, hi);\n        return root;\n    }\n}\n\n"},{language:"js",text:"\nvar sortedArrayToBST = function (nums) {\n  // \u7531\u4e8e\u6570\u7ec4\u662f\u6392\u5e8f\u597d\u7684\uff0c\u56e0\u6b64\u4e00\u4e2a\u601d\u8def\u5c31\u662f\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u534a\uff0c\u4e00\u534a\u662f\u5de6\u5b50\u6811\uff0c\u53e6\u4e00\u534a\u662f\u53f3\u5b50\u6811\n  // \u7136\u540e\u8fd0\u7528\u201c\u6811\u7684\u9012\u5f52\u6027\u8d28\u201d\u9012\u5f52\u5b8c\u6210\u64cd\u4f5c\u5373\u53ef\u3002\n  if (nums.length === 0) return null;\n  const mid = nums.length >> 1;\n  const root = new TreeNode(nums[mid]);\n\n  root.left = sortedArrayToBST(nums.slice(0, mid));\n  root.right = sortedArrayToBST(nums.slice(mid + 1));\n  return root;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        return reBuild(nums, 0, nums.size()-1);\n    }\n\n    TreeNode* reBuild(vector<int>& nums, int left, int right) \n    {\n        // \u7ec8\u6b62\u6761\u4ef6\uff1a\u4e2d\u5e8f\u904d\u5386\u4e3a\u7a7a\n        if(left > right)\n        {\n            return NULL;\n        }\n        // \u5efa\u7acb\u5f53\u524d\u5b50\u6811\u7684\u6839\u8282\u70b9\n        int mid = (left+right)/2;\n        TreeNode * root = new TreeNode(nums[mid]);\n       \n        // \u5de6\u5b50\u6811\u7684\u4e0b\u5c42\u9012\u5f52\n        root->left = reBuild(nums, left, mid-1);\n        // \u53f3\u5b50\u6811\u7684\u4e0b\u5c42\u9012\u5f52\n        root->right = reBuild(nums, mid+1, right);\n        // \u8fd4\u56de\u6839\u8282\u70b9\n        return root;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\n        if not nums: return None\n        mid = (len(nums) - 1) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        return root\n"},{language:"py",text:'\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: TreeNode\n        """\n        return self.reBuild(nums, 0, len(nums)-1)\n    \n    def reBuild(self, nums, left, right):\n         # \u7ec8\u6b62\u6761\u4ef6\uff1a\n        if left > right:\n            return\n        # \u5efa\u7acb\u5f53\u524d\u5b50\u6811\u7684\u6839\u8282\u70b9\n        mid = (left + right)//2\n        root = TreeNode(nums[mid])\n        # \u5de6\u53f3\u5b50\u6811\u7684\u4e0b\u5c42\u9012\u5f52\n        root.left = self.reBuild(nums, left, mid-1)\n        root.right = self.reBuild(nums, mid+1, right)\n        \n        return root\n'}]},"path-sum-ii":{id:"113",name:"path-sum-ii",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"},{text:"backtrack\u89e3\u9898\u516c\u5f0f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/113.path-sum-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/113.path-sum-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=113 lang=javascript\n *\n * [113] Path Sum II\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\nfunction backtrack(root, sum, res, tempList) {\n  if (root === null) return;\n  if (root.left === null && root.right === null && sum === root.val)\n    return res.push([...tempList, root.val]);\n\n  tempList.push(root.val);\n  backtrack(root.left, sum - root.val, res, tempList);\n\n  backtrack(root.right, sum - root.val, res, tempList);\n  tempList.pop();\n}\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number[][]}\n */\nvar pathSum = function(root, sum) {\n  if (root === null) return [];\n  const res = [];\n  backtrack(root, sum, res, []);\n  return res;\n};\n"},{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:\n        if not root:\n            return []\n        \n        result = []\n        \n        def trace_node(pre_list, left_sum, node):\n            new_list = pre_list.copy()\n            new_list.append(node.val)\n            if not node.left and not node.right:\n                # \u8fd9\u4e2a\u5224\u65ad\u53ef\u4ee5\u548c\u4e0a\u9762\u7684\u5408\u5e76\uff0c\u4f46\u5206\u5f00\u5199\u4f1a\u5feb\u51e0\u6beb\u79d2\uff0c\u53ef\u4ee5\u7701\u53bb\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u5224\u65ad\n                if left_sum == node.val:\n                    result.append(new_list)\n            else:\n                if node.left:\n                    trace_node(new_list, left_sum-node.val, node.left)\n                if node.right:\n                    trace_node(new_list, left_sum-node.val, node.right)\n        \n        trace_node([], sum, root)\n        return result\n"}]},"best-time-to-buy-and-sell-stock":{id:"121",name:"best-time-to-buy-and-sell-stock",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"}],keyPoints:[{text:"\u8fd9\u7c7b\u9898\u53ea\u8981\u4f60\u5728\u5fc3\u4e2d\uff08\u6216\u8005\u522b\u7684\u5730\u65b9\uff09\u753b\u51fa\u4e0a\u9762\u8fd9\u79cd\u56fe\u5c31\u5f88\u5bb9\u6613\u89e3\u51b3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"amazon"},{name:"bloomberg"},{name:"facebook"},{name:"microsoft"},{name:"uber"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/121.best-time-to-buy-and-sell-stock.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/121.best-time-to-buy-and-sell-stock.md",code:[{language:"java",text:"\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int minprice = Integer.MAX_VALUE;\n        int maxprofit = 0;\n        for (int price: prices) {\n            maxprofit = Math.max(maxprofit, price - minprice);\n             minprice = Math.min(price, minprice);\n        }\n        return maxprofit;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    let min = prices[0];\n    let profit = 0;\n    // 7 1 5 3 6 4\n    for(let i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i -1]) {\n            profit = Math.max(profit, prices[i] - min);\n        } else {\n            min = Math.min(min, prices[i]);;\n        }\n    }\n\n    return profit;\n};\n"},{language:"cpp",text:"\n/**\n * \u7cfb\u7edf\u4e0aC++\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u7684\u8f93\u5165\u6709[]\uff0c\u56e0\u6b64\u9700\u8981\u52a0\u4e00\u4e2a\u5224\u65ad\n */\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if (prices.empty()) return 0;\n        auto min = prices[0];\n        auto profit = 0;\n        for (auto i = 1; i < prices.size(); ++i) {\n            if (prices[i] > prices[i -1]) {\n                profit = max(profit, prices[i] - min);\n            } else {\n                min = std::min(min, prices[i]);;\n            }\n        }\n        return profit;\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def maxProfit(self, prices: 'List[int]') -> int:\n        if not prices: return 0\n\n        min_price = float('inf')\n        max_profit = 0\n\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif max_profit < price - min_price:\n                max_profit = price - min_price\n        return max_profit\n"}]},"best-time-to-buy-and-sell-stock-ii":{id:"122",name:"best-time-to-buy-and-sell-stock-ii",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"}],keyPoints:[{text:"\u8fd9\u7c7b\u9898\u53ea\u8981\u4f60\u5728\u5fc3\u4e2d\uff08\u6216\u8005\u522b\u7684\u5730\u65b9\uff09\u753b\u51fa\u4e0a\u9762\u8fd9\u79cd\u56fe\u5c31\u5f88\u5bb9\u6613\u89e3\u51b3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"bloomberg"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/122.best-time-to-buy-and-sell-stock-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/122.best-time-to-buy-and-sell-stock-ii.md",code:[{language:"java",text:"\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int res = 0;\n        for(int i=1;i<prices.length;i++)\n        {\n            if(prices[i] > prices[i-1])\n            {\n                res += prices[i] - prices[i-1];\n            }\n        }\n        return res;\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    let profit = 0;\n\n    for(let i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i -1]) {\n            profit  = profit + prices[i] - prices[i - 1];\n        }\n    }\n\n    return profit;\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int res = 0;\n        for(int i=1;i<prices.size();i++)\n        {\n            if(prices[i] > prices[i-1])\n            {\n                res += prices[i] - prices[i-1];\n            }\n        }\n        return res;\n    }\n};\n"}]},"binary-tree-maximum-path-sum":{id:"124",name:"binary-tree-maximum-path-sum",pre:[{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"\u9012\u5f52",link:null,color:"blue"},{text:"\u7406\u89e3\u9898\u76ee\u4e2d\u7684path\u5b9a\u4e49",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/124.binary-tree-maximum-path-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/124.binary-tree-maximum-path-sum.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n  int ans;\n  public int maxPathSum(TreeNode root) {\n    ans = Integer.MIN_VALUE;\n    helper(root);   // recursion\n    return ans;\n  }\n\n  public int helper(TreeNode root) {\n    if (root == null) return 0;\n    int leftMax = Math.max(0, helper(root.left));     // find the max sub-path sum in left sub-tree\n    int rightMax = Math.max(0, helper(root.right));   // find the max sub-path sum in right sub-tree\n    ans = Math.max(ans, leftMax+rightMax+root.val);   // find the max path sum at current node\n    return max(leftMax, rightMax) + root.val;         // according to the definition of path, the return value of current node can only be that the sum of current node value plus either left or right max path sum.\n  }\n}\n"},{language:"js",text:"\n\n\n/*\n * @lc app=leetcode id=124 lang=javascript\n *\n * [124] Binary Tree Maximum Path Sum\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\nfunction helper(node, payload) {\n  if (node === null) return 0;\n\n  const l = helper(node.left, payload);\n  const r = helper(node.right, payload);\n\n  payload.max = Math.max(\n    node.val + Math.max(0, l) + Math.max(0, r),\n    payload.max\n  );\n\n  return node.val + Math.max(l, r, 0);\n}\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function(root) {\n  if (root === null) return 0;\n  const payload = {\n    max: root.val\n  };\n  helper(root, payload);\n  return payload.max;\n};\n"},{language:"py",text:"\n\nclass Solution:\n    ans = float('-inf')\n    def maxPathSum(self, root: TreeNode) -> int:\n        def helper(node):\n            if not node: return 0\n            l = helper(node.left)\n            r = helper(node.right)\n            self.ans = max(self.ans, max(l,0) + max(r, 0) + node.val)\n            return max(l, r, 0) + node.val\n        helper(root)\n        return self.ans\n "}]},"valid-palindrome":{id:"125",name:"valid-palindrome",pre:[{text:"\u56de\u6587",link:null,color:"lime"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u53cc\u6307\u9488",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"facebook"},{name:"microsoft"},{name:"uber"},{name:"zenefits"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/125.valid-palindrome.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/125.valid-palindrome.md",code:[{language:"js",text:'\n\n/*\n * @lc app=leetcode id=125 lang=javascript\n *\n * [125] Valid Palindrome\n */\n// \u53ea\u5904\u7406\u82f1\u6587\u5b57\u7b26\uff08\u9898\u76ee\u5ffd\u7565\u5927\u5c0f\u5199\uff0c\u6211\u4eec\u524d\u9762\u5168\u90e8\u8f6c\u5316\u6210\u4e86\u5c0f\u5199\uff0c \u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u53ea\u5224\u65ad\u5c0f\u5199\uff09\u548c\u6570\u5b57\nfunction isValid(c) {\n  const charCode = c.charCodeAt(0);\n  const isDigit =\n    charCode >= "0".charCodeAt(0) && charCode <= "9".charCodeAt(0);\n  const isChar = charCode >= "a".charCodeAt(0) && charCode <= "z".charCodeAt(0);\n\n  return isDigit || isChar;\n}\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n  s = s.toLowerCase();\n  let left = 0;\n  let right = s.length - 1;\n\n  while (left < right) {\n    if (!isValid(s[left])) {\n      left++;\n      continue;\n    }\n    if (!isValid(s[right])) {\n      right--;\n      continue;\n    }\n\n    if (s[left] === s[right]) {\n      left++;\n      right--;\n    } else {\n      break;\n    }\n  }\n\n  return right <= left;\n};\n'},{language:"py",text:'\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s) - 1\n        while left < right:\n            if not s[left].isalnum():\n                left += 1\n                continue\n            if not s[right].isalnum():\n                right -= 1\n                continue\n            if s[left].lower() == s[right].lower():\n                left += 1\n                right -= 1\n            else:\n                break\n        return right <= left\n\n    def isPalindrome2(self, s: str) -> bool:\n        """\n        \u4f7f\u7528\u8bed\u8a00\u7279\u6027\u8fdb\u884c\u6c42\u89e3\n        """\n        s = \'\'.join(i for i in s if i.isalnum()).lower()\n        return s == s[::-1]\n'}]},"longest-consecutive-sequence":{id:"128",name:"longest-consecutive-sequence",pre:[{text:"hashmap",link:null,color:"red"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/128.longest-consecutive-sequence.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/128.longest-consecutive-sequence.md",code:[{language:"js",text:"\nif (nums.length === 0) return 0;\nlet count = 1;\nlet maxCount = 1;\n// \u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u4e0d\u9700\u8981\u6392\u5e8f\uff0c\u8fd9\u4e48\u505a\u53ea\u4e0d\u8fc7\u662f\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\nnums = [...new Set(nums)].sort((a, b) => a - b);\nfor (let i = 0; i < nums.length - 1; i++) {\n  if (nums[i + 1] - nums[i] === 1) {\n    count++;\n  } else {\n    if (count > maxCount) {\n      maxCount = count;\n    }\n    count = 1;\n  }\n}\nreturn Math.max(count, maxCount);\n"},{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestConsecutive = function(nums) {\n  set = new Set(nums);\n  let max = 0;\n  let temp = 0;\n  set.forEach(x => {\n    // \u8bf4\u660ex\u662f\u8fde\u7eed\u5e8f\u5217\u7684\u5f00\u5934\u5143\u7d20\n    if (!set.has(x - 1)) {\n      temp = x + 1;\n      while (set.has(y)) {\n        temp = temp + 1;\n      }\n      max = Math.max(max, y - x); // y - x \u5c31\u662f\u4ecex\u5f00\u59cb\u5230\u6700\u540e\u6709\u591a\u5c11\u8fde\u7eed\u7684\u6570\u5b57\n    }\n  });\n  return max;\n};\n"}]},"sum-root-to-leaf-numbers":{id:"129",name:"sum-root-to-leaf-numbers",pre:[{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"\u9012\u5f52\u5206\u6790",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/129.sum-root-to-leaf-numbers.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/129.sum-root-to-leaf-numbers.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=129 lang=javascript\n *\n * [129] Sum Root to Leaf Numbers\n */\nfunction helper(node, cur) {\n  if (node === null) return 0;\n  const next = node.val + cur * 10;\n\n  if (node.left === null && node.right === null) return next;\n\n  const l = helper(node.left, next);\n  const r = helper(node.right, next);\n\n  return l + r;\n}\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function(root) {\n  // tag: `tree` `dfs` `math`\n  return helper(root, 0);\n};\n"},{language:"py",text:"\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n\n        def helper(node, cur_val):\n            if not node: return 0\n            next_val = cur_val * 10 + node.val\n\n            if not (node.left or node.right):\n                return next_val\n\n            left_val = helper(node.left, next_val)\n            right_val = helper(node.right, next_val)\n\n            return left_val + right_val\n\n        return helper(root, 0)\n"},{language:"py",text:"\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        if not root: return 0\n        result = 0\n        node_queue, sum_queue = [root], [root.val]\n        while node_queue:\n            for i in node_queue:\n                cur_node = node_queue.pop(0)\n                cur_val = sum_queue.pop(0)\n                if cur_node.left:\n                    node_queue.append(cur_node.left)\n                    sum_queue.append(cur_val * 10 + cur_node.left.val)\n                if cur_node.right:\n                    node_queue.append(cur_node.right)\n                    sum_queue.append(cur_val * 10 + cur_node.right.val)\n                if not (cur_node.left or cur_node.right):\n                    result += cur_val\n        return result\n"}]},"surrounded-regions":{id:"130",name:"surrounded-regions",pre:[{text:"DFS",link:null,color:"red"}],keyPoints:[{text:"\u4e8c\u7ef4\u6570\u7ec4DFS\u89e3\u9898\u6a21\u677f",link:null,color:"blue"},{text:"\u8f6c\u5316\u95ee\u9898\u4e3a`\u8fde\u901a\u533a\u57df\u95ee\u9898`",link:null,color:"blue"},{text:"\u76f4\u63a5mutate\u539f\u6570\u7ec4\uff0c\u8282\u7701\u7a7a\u95f4",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/130.surrounded-regions.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/130.surrounded-regions.md",code:[{language:"js",text:'\n\n\n\n/*\n * @lc app=leetcode id=130 lang=javascript\n *\n * [130] Surrounded Regions\n */\n// \u5c06O\u4ee5\u53ca\u5468\u8fb9\u7684O\u8f6c\u5316\u4e3aA\nfunction mark(board, i, j, rows, cols) {\n  if (i < 0 || i > rows - 1 || j < 0 || j > cols - 1 || board[i][j] !== "O")\n    return;\n\n  board[i][j] = "A";\n  mark(board, i + 1, j, rows, cols);\n  mark(board, i - 1, j, rows, cols);\n  mark(board, i, j + 1, rows, cols);\n  mark(board, i, j - 1, rows, cols);\n}\n/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solve = function(board) {\n  const rows = board.length;\n  if (rows === 0) return [];\n  const cols = board[0].length;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (i === 0 || i == rows - 1 || j === 0 || j === cols - 1) {\n        mark(board, i, j, rows, cols);\n      }\n    }\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (board[i][j] === "O") {\n        board[i][j] = "X";\n      } else if (board[i][j] === "A") {\n        board[i][j] = "O";\n      }\n    }\n  }\n\n  return board;\n};\n'},{language:"py",text:"\nclass Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        # \u5982\u679c\u6570\u7ec4\u957f\u6216\u5bbd\u5c0f\u4e8e\u7b49\u4e8e2\uff0c\u5219\u4e0d\u9700\u8981\u66ff\u6362\n        if len(board) <= 2 or len(board[0]) <= 2:\n            return\n        \n        row, col = len(board), len(board[0])\n        \n        def dfs(i, j):\n            \"\"\"\n            \u6df1\u5ea6\u4f18\u5148\u7b97\u6cd5\uff0c\u5982\u679c\u7b26\u5408\u6761\u4ef6\uff0c\u66ff\u6362\u4e3aA\u5e76\u8fdb\u4e00\u6b65\u6d4b\u8bd5\uff0c\u5426\u5219\u505c\u6b62\n            \"\"\"\n            if i < 0 or j < 0 or i >= row or j >= col or board[i][j] != 'O':\n                return\n            board[i][j] = 'A'\n            \n            dfs(i - 1, j)\n            dfs(i + 1, j)\n            dfs(i, j - 1)\n            dfs(i, j + 1)\n        \n        # \u4ece\u5916\u56f4\u5f00\u59cb\n        for i in range(row):\n            dfs(i, 0)\n            dfs(i, col-1)\n        \n        for j in range(col):\n            dfs(0, j)\n            dfs(row-1, j)\n        \n        # \u6700\u540e\u5b8c\u6210\u66ff\u6362\n        for i in range(row):\n            for j in range(col):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'A':\n                    board[i][j] = 'O'\n"}]},"palindrome-partitioning":{id:"131",name:"palindrome-partitioning",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"}],keyPoints:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/131.palindrome-partitioning.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/131.palindrome-partitioning.md",code:[{language:"js",text:'\n\n\n/*\n * @lc app=leetcode id=131 lang=javascript\n *\n * [131] Palindrome Partitioning\n */\n\nfunction isPalindrom(s) {\n    let left = 0;\n    let right = s.length - 1;\n\n    while(left < right && s[left] === s[right]) {\n        left++;\n        right--;\n    }\n\n    return left >= right;\n}\n function backtrack(s, list, tempList, start) {\n    const sliced = s.slice(start);\n\n    if (isPalindrom(sliced) && (tempList.join("").length === s.length)) list.push([...tempList]);\n\n    for(let i = 0; i < sliced.length; i++) {\n        const sub = sliced.slice(0, i + 1);\n        if (isPalindrom(sub)) {\n            tempList.push(sub);\n        } else {\n            continue;\n        }\n        backtrack(s, list, tempList, start + i + 1);\n        tempList.pop();\n    }\n }\n/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function(s) {\n    // "aab"\n    // ["aa", "b"]\n    // ["a", "a", "b"]\n    const list = [];\n    backtrack(s, list, [], 0);\n    return list;\n};\n\n\n'},{language:"py",text:'\nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        """\u56de\u6eaf\u6cd5"""\n        \n        res = []\n        \n        def helper(s, tmp):\n            """\n            \u5982\u679c\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf4\u660e\u5df2\u7ecf\u5904\u7406\u5b8c\u6bd5\n            \u5426\u5219\u9010\u4e2a\u5b57\u7b26\u5f80\u524d\u6d4b\u8bd5\uff0c\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\n            \u5982\u679c\u662f\uff0c\u5219\u5904\u7406\u5269\u4f59\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5df2\u7ecf\u5f97\u5230\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\n            """\n            if not s:\n                res.append(tmp)\n            for i in range(1, len(s) + 1):\n                if s[:i] == s[:i][::-1]:\n                    helper(s[i:], tmp + [s[:i]])\n        \n        helper(s, [])\n        return res\n'}]},"single-number":{id:"136",name:"single-number",pre:[{text:"\u4f4d\u8fd0\u7b97",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/bit.md",color:"blue"}],keyPoints:[{text:"1.\u5f02\u6216\u7684\u6027\u8d28\u4e24\u4e2a\u6570\u5b57\u5f02\u6216\u7684\u7ed3\u679c`a^b`\u662f\u5c06a\u548cb\u7684\u4e8c\u8fdb\u5236\u6bcf\u4e00\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u5f97\u51fa\u7684\u6570\u5b57\u3002\u8fd0\u7b97\u7684\u903b\u8f91\u662f\u5982\u679c\u540c\u4e00\u4f4d\u7684\u6570\u5b57\u76f8\u540c\u5219\u4e3a0\uff0c\u4e0d\u540c\u5219\u4e3a12.\u5f02\u6216\u7684\u89c4\u5f8b",link:null,color:"blue"},{text:"\u4efb\u4f55\u6570\u548c\u672c\u8eab\u5f02\u6216\u5219\u4e3a`0`",link:null,color:"blue"},{text:"\u4efb\u4f55\u6570\u548c0\u5f02\u6216\u662f`\u672c\u8eab`3.\u5f88\u591a\u4eba\u53ea\u662f\u8bb0\u5f97\u5f02\u6216\u7684\u6027\u8d28\u548c\u89c4\u5f8b\uff0c\u4f46\u662f\u7f3a\u4e4f\u5bf9\u5176\u672c\u8d28\u7684\u7406\u89e3\uff0c\u5bfc\u81f4\u5f88\u96be\u60f3\u5230\u8fd9\u79cd\u89e3\u6cd5\uff08\u6211\u672c\u4eba\u4e5f\u6ca1\u60f3\u5230\uff094.bit\u8fd0\u7b97",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/136.single-number.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/136.single-number.md",code:[{language:"java",text:"\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int res = 0;\n        for(int n:nums)\n        {\n            // \u5f02\u6216\n            res ^= n;\n        }\n        return res;\n    }\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=136 lang=javascript\n *\n * [136] Single Number\n *\n * https://leetcode.com/problems/single-number/description/\n *\n * algorithms\n * Easy (59.13%)\n * Total Accepted:    429.3K\n * Total Submissions: 724.1K\n * Testcase Example:  '[2,2,1]'\n *\n * Given a non-empty\xa0array of integers, every element appears twice except for\n * one. Find that single one.\n *\n * Note:\n *\n * Your algorithm should have a linear runtime complexity. Could you implement\n * it without using extra memory?\n *\n * Example 1:\n *\n *\n * Input: [2,2,1]\n * Output: 1\n *\n *\n * Example 2:\n *\n *\n * Input: [4,1,2,1,2]\n * Output: 4\n *\n *\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n  let ret = 0;\n  for (let index = 0; index < nums.length; index++) {\n    const element = nums[index];\n    ret = ret ^ element;\n  }\n  return ret;\n};\n"},{language:"py",text:"\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        single_number = 0\n        for num in nums:\n            single_number ^= num\n        return single_number\n"}]},"word-break":{id:"139",name:"word-break",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/139.word-break.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/139.word-break.md",code:[{language:"js",text:'\n/*\n * @lc app=leetcode id=139 lang=javascript\n *\n * [139] Word Break\n *\n * https://leetcode.com/problems/word-break/description/\n *\n * algorithms\n * Medium (34.45%)\n * Total Accepted:    317.8K\n * Total Submissions: 913.9K\n * Testcase Example:  \'"leetcode"\\n["leet","code"]\'\n *\n * Given a non-empty string s and a dictionary wordDict containing a list of\n * non-empty words, determine if s can be segmented into a space-separated\n * sequence of one or more dictionary words.\n *\n * Note:\n *\n *\n * The same word in the dictionary may be reused multiple times in the\n * segmentation.\n * You may assume the dictionary does not contain duplicate words.\n *\n *\n * Example 1:\n *\n *\n * Input: s = "leetcode", wordDict = ["leet", "code"]\n * Output: true\n * Explanation: Return true because "leetcode" can be segmented as "leet\n * code".\n *\n *\n * Example 2:\n *\n *\n * Input: s = "applepenapple", wordDict = ["apple", "pen"]\n * Output: true\n * Explanation: Return true because "applepenapple" can be segmented as "apple\n * pen apple".\n * Note that you are allowed to reuse a dictionary word.\n *\n *\n * Example 3:\n *\n *\n * Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]\n * Output: false\n *\n *\n */\n/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */\nvar wordBreak = function(s, wordDict) {\n  const dp = Array(s.length + 1);\n  dp[0] = true;\n  for (let i = 0; i < s.length + 1; i++) {\n    for (let word of wordDict) {\n      if (word.length <= i && dp[i - word.length]) {\n          if (s.substring(i - word.length, i) === word) {\n            dp[i] = true;\n          }\n      }\n    }\n  }\n\n  return dp[s.length] || false;\n};\n'}]},"binary-tree-preorder-traversal":{id:"144",name:"binary-tree-preorder-traversal",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u6808",link:null,color:"red"}],keyPoints:[{text:"\u4e8c\u53c9\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u904d\u5386\uff09>\u4e0d\u540c\u7684\u904d\u5386\u7b97\u6cd5\u5dee\u5f02\u8fd8\u662f\u86ee\u5927\u7684",link:null,color:"blue"},{text:"\u5982\u679c\u975e\u9012\u5f52\u7684\u8bdd\u5229\u7528\u6808\u6765\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5982\u679c\u6570\u636e\u89c4\u6a21\u4e0d\u5927\u7684\u8bdd\uff0c\u5efa\u8bae\u4f7f\u7528\u9012\u5f52",link:null,color:"blue"},{text:"\u9012\u5f52\u7684\u95ee\u9898\u9700\u8981\u6ce8\u610f\u4e24\u70b9\uff0c\u4e00\u4e2a\u662f\u7ec8\u6b62\u6761\u4ef6\uff0c\u4e00\u4e2a\u5982\u4f55\u7f29\u5c0f\u89c4\u6a211.\u7ec8\u6b62\u6761\u4ef6\uff0c\u81ea\u7136\u662f\u5f53\u524d\u8fd9\u4e2a\u5143\u7d20\u662fnull\uff08\u94fe\u8868\u4e5f\u662f\u4e00\u6837\uff092.\u7531\u4e8e\u4e8c\u53c9\u6811\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u9012\u5f52\u7ed3\u6784\uff0c\u6bcf\u6b21\u5904\u7406\u4e00\u4e2a\u5b50\u6811\u5176\u5b9e\u5c31\u662f\u7f29\u5c0f\u4e86\u89c4\u6a21\uff0c\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5408\u5e76\u7ed3\u679c\uff0c\u8fd9\u91cc\u7684\u5408\u5e76\u7ed3\u679c\u5176\u5b9e\u5c31\u662f`mid.concat(left).concat(right)`,mid\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u8282\u70b9\uff0cleft\u548cright`\u9012\u5f52\u6c42\u51fa\u5373\u53ef`",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/144.binary-tree-preorder-traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/144.binary-tree-preorder-traversal.md",code:[{language:"js",text:"\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function(root) {\n  // 1. Recursive solution\n\n  // if (!root) return [];\n\n  // return [root.val].concat(preorderTraversal(root.left)).concat(preorderTraversal(root.right));\n\n  // 2. iterative solutuon\n\n  if (!root) return [];\n  const ret = [];\n  const stack = [root];\n  let t = stack.pop();\n\n  while (t) {\n    if (t.right) {\n      stack.push(t.right);\n    }\n    if (t.left) {\n      stack.push(t.left);\n    }\n    ret.push(t.val);\n    t = stack.pop();\n  }\n\n  return ret;\n};\n"}]},"binary-tree-postorder-traversal":{id:"145",name:"binary-tree-postorder-traversal",pre:[{text:"\u6808",link:null,color:"red"},{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"\u4e8c\u53c9\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u904d\u5386\uff09>\u4e0d\u540c\u7684\u904d\u5386\u7b97\u6cd5\u5dee\u5f02\u8fd8\u662f\u86ee\u5927\u7684",link:null,color:"blue"},{text:"\u5982\u679c\u975e\u9012\u5f52\u7684\u8bdd\u5229\u7528\u6808\u6765\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5982\u679c\u6570\u636e\u89c4\u6a21\u4e0d\u5927\u7684\u8bdd\uff0c\u5efa\u8bae\u4f7f\u7528\u9012\u5f52",link:null,color:"blue"},{text:"\u9012\u5f52\u7684\u95ee\u9898\u9700\u8981\u6ce8\u610f\u4e24\u70b9\uff0c\u4e00\u4e2a\u662f\u7ec8\u6b62\u6761\u4ef6\uff0c\u4e00\u4e2a\u5982\u4f55\u7f29\u5c0f\u89c4\u6a211.\u7ec8\u6b62\u6761\u4ef6\uff0c\u81ea\u7136\u662f\u5f53\u524d\u8fd9\u4e2a\u5143\u7d20\u662fnull\uff08\u94fe\u8868\u4e5f\u662f\u4e00\u6837\uff092.\u7531\u4e8e\u4e8c\u53c9\u6811\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u9012\u5f52\u7ed3\u6784\uff0c\u6bcf\u6b21\u5904\u7406\u4e00\u4e2a\u5b50\u6811\u5176\u5b9e\u5c31\u662f\u7f29\u5c0f\u4e86\u89c4\u6a21\uff0c\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5408\u5e76\u7ed3\u679c\uff0c\u8fd9\u91cc\u7684\u5408\u5e76\u7ed3\u679c\u5176\u5b9e\u5c31\u662f`left.concat(right).concat(mid)`,mid\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u8282\u70b9\uff0cleft\u548cright`\u9012\u5f52\u6c42\u51fa\u5373\u53ef`",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/145.binary-tree-postorder-traversal.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/145.binary-tree-postorder-traversal.md",code:[{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar postorderTraversal = function(root) {\n  // 1. Recursive solution\n\n  // if (!root) return [];\n\n  // return postorderTraversal(root.left).concat(postorderTraversal(root.right)).concat(root.val);\n\n  // 2. iterative solutuon\n\n  if (!root) return [];\n  const ret = [];\n  const stack = [root];\n  let p = root; // \u6807\u8bc6\u5143\u7d20\uff0c\u7528\u6765\u5224\u65ad\u8282\u70b9\u662f\u5426\u5e94\u8be5\u51fa\u6808\n\n  while (stack.length > 0) {\n    const top = stack[stack.length - 1];\n    if (\n      top.left === p ||\n      top.right === p || // \u5b50\u8282\u70b9\u5df2\u7ecf\u904d\u5386\u8fc7\u4e86\n      (top.left === null && top.right === null) // \u53f6\u5b50\u5143\u7d20\n    ) {\n      p = stack.pop();\n      ret.push(p.val);\n    } else {\n      if (top.right) {\n        stack.push(top.right);\n      }\n      if (top.left) {\n        stack.push(top.left);\n      }\n    }\n  }\n\n  return ret;\n};\n\n"}]},"lru-cache":{id:"146",name:"lru-cache",pre:[{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u961f\u5217\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u961f\u5217\u7684\u64cd\u4f5c\u662f\u8fd9\u9053\u9898\u7684\u7075\u9b42\uff0c\u5f88\u5bb9\u6613\u5c11\u8003\u8651\u60c5\u51b5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/146.lru-cache.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/146.lru-cache.md",code:[{language:"js",text:"\n/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n    this.cache = {};\n    this.capacity = capacity;\n    this.size = 0;\n    this.queue = [];\n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n    const hit = this.cache[key];\n\n    if (hit !== undefined) {\n        this.queue = this.queue.filter(q => q !== key);\n        this.queue.push(key);\n        return hit;\n    }\n    return -1;\n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n    const hit = this.cache[key];\n\n    // update cache\n    this.cache[key] = value;\n\n    if (!hit) {\n        // invalid cache and resize size;\n        if (this.size === this.capacity) {\n            // invalid cache\n            const key = this.queue.shift();\n            this.cache[key] = undefined;\n        } else {\n            this.size = this.size + 1;\n        }\n        this.queue.push(key);\n    } else {\n        this.queue = this.queue.filter(q => q !== key);\n        this.queue.push(key);\n    }\n};\n\n/** \n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */\n\n"}]},"evaluate-reverse-polish-notation":{id:"150",name:"evaluate-reverse-polish-notation",pre:[{text:"\u6808",link:null,color:"red"}],keyPoints:[{text:"1.\u6808\u7684\u57fa\u672c\u7528\u6cd52.\u5982\u679c\u4f60\u7528\u7684\u662fJS\u7684\u8bdd\uff0c\u9700\u8981\u6ce8\u610f/\u548c\u5176\u4ed6\u5f88\u591a\u8bed\u8a00\u662f\u4e0d\u4e00\u6837\u76843.\u5982\u679c\u4f60\u7528\u7684\u662fJS\u7684\u8bdd\uff0c\u9700\u8981\u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u6570\u5b57\u3002\u5426\u5219\u6709\u5f88\u591a\u610f\u60f3\u4e0d\u5230\u7684\u7ed3\u679c4.\u64cd\u4f5c\u7b26\u7684\u987a\u5e8f\u5e94\u8be5\u662f\u5148\u51fa\u6808\u7684\u662f\u7b2c\u4e8c\u4f4d\uff0c\u540e\u51fa\u6808\u7684\u662f\u7b2c\u4e00\u4f4d\u3002\u8fd9\u5728\u4e0d\u7b26\u5408\u4ea4\u6362\u5f8b\u7684\u64cd\u4f5c\u4e2d\u5f88\u91cd\u8981\uff0c\u6bd4\u5982\u51cf\u6cd5\u548c\u9664\u6cd5\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/150.evaluate-reverse-polish-notation.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/150.evaluate-reverse-polish-notation.md",code:[{language:"js",text:'\n/*\n * @lc app=leetcode id=150 lang=javascript\n *\n * [150] Evaluate Reverse Polish Notation\n *\n * https://leetcode.com/problems/evaluate-reverse-polish-notation/description/\n *\n * algorithms\n * Medium (31.43%)\n * Total Accepted:    153.3K\n * Total Submissions: 485.8K\n * Testcase Example:  \'["2","1","+","3","*"]\'\n *\n * Evaluate the value of an arithmetic expression in Reverse Polish Notation.\n *\n * Valid operators are +, -, *, /. Each operand may be an integer or another\n * expression.\n *\n * Note:\n *\n *\n * Division between two integers should truncate toward zero.\n * The given RPN expression is always valid. That means the expression would\n * always evaluate to a result and there won\'t\xa0be any\xa0divide\xa0by zero\n * operation.\n *\n *\n * Example 1:\n *\n *\n * Input: ["2", "1", "+", "3", "*"]\n * Output: 9\n * Explanation: ((2 + 1) * 3) = 9\n *\n *\n * Example 2:\n *\n *\n * Input: ["4", "13", "5", "/", "+"]\n * Output: 6\n * Explanation: (4 + (13 / 5)) = 6\n *\n *\n * Example 3:\n *\n *\n * Input: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]\n * Output: 22\n * Explanation:\n * \u2060 ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n * = ((10 * (6 / (12 * -11))) + 17) + 5\n * = ((10 * (6 / -132)) + 17) + 5\n * = ((10 * 0) + 17) + 5\n * = (0 + 17) + 5\n * = 17 + 5\n * = 22\n *\n *\n */\n/**\n * @param {string[]} tokens\n * @return {number}\n */\nvar evalRPN = function(tokens) {\n  // \u8fd9\u79cd\u7b97\u6cd5\u7684\u524d\u63d0\u662f tokens\u662f\u6709\u6548\u7684\uff0c\n  // \u5f53\u7136\u8fd9\u7531\u7b97\u6cd5\u6765\u4fdd\u8bc1\n  const stack = [];\n\n  for (let index = 0; index < tokens.length; index++) {\n    const token = tokens[index];\n    // \u5bf9\u4e8e\u8fd0\u7b97\u6570\uff0c \u6211\u4eec\u76f4\u63a5\u5165\u6808\n    if (!Number.isNaN(Number(token))) {\n      stack.push(token);\n    } else {\n      // \u9047\u5230\u64cd\u4f5c\u7b26\uff0c\u6211\u4eec\u76f4\u63a5\u5927\u80c6\u8fd0\u7b97\uff0c\u4e0d\u7528\u8003\u8651\u7b97\u672f\u4f18\u5148\u7ea7\n      // \u7136\u540e\u5c06\u8fd0\u7b97\u7ed3\u679c\u5165\u6808\u5373\u53ef\n\n      // \u5f53\u7136\u5982\u679c\u9898\u76ee\u8fdb\u4e00\u6b65\u6269\u5c55\uff0c\u5141\u8bb8\u4f7f\u7528\u5355\u76ee\u7b49\u5176\u4ed6\u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u7684\u7b97\u6cd5\u9700\u8981\u505a\u5fae\u5c0f\u7684\u8c03\u6574\n      const a = Number(stack.pop());\n      const b = Number(stack.pop());\n      if (token === "*") {\n        stack.push(b * a);\n      } else if (token === "/") {\n        stack.push(b / a >> 0);\n      } else if (token === "+") {\n        stack.push(b + a);\n      } else if (token === "-") {\n        stack.push(b - a);\n      }\n    }\n  }\n\n  return stack.pop();\n};\n\n'}]},"maximum-product-subarray":{id:"152",name:"maximum-product-subarray",pre:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"}],keyPoints:[{text:"\u540c\u65f6\u8bb0\u5f55\u4e58\u79ef\u6700\u5927\u503c\u548c\u4e58\u79ef\u6700\u5c0f\u503c",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/152.maximum-product-subarray.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/152.maximum-product-subarray.md",code:[{language:"js",text:"\nvar maxProduct = function(nums) {\n  let max = nums[0];\n  let temp = null;\n  for (let i = 0; i < nums.length; i++) {\n    temp = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      temp *= nums[j];\n      max = Math.max(temp, max);\n    }\n  }\n\n  return max;\n};\n"},{language:"js",text:"\nvar maxProduct = function(nums) {\n  let max = nums[0];\n  let min = nums[0];\n  let res = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    let tmp = min;\n    min = Math.min(nums[i], Math.min(max * nums[i], min * nums[i])); // \u53d6\u6700\u5c0f\n    max = Math.max(nums[i], Math.max(max * nums[i], tmp * nums[i])); /// \u53d6\u6700\u5927\n    res = Math.max(res, max);\n  }\n  return res;\n};\n"},{language:"py",text:"\n\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        max__dp = [1] * (n + 1)\n        min_dp = [1] * (n + 1)\n        ans = float('-inf')\n\n        for i in range(1, n + 1):\n            max__dp[i] = max(max__dp[i - 1] * nums[i - 1],\n                             min_dp[i - 1] * nums[i - 1], nums[i - 1])\n            min_dp[i] = min(max__dp[i - 1] * nums[i - 1],\n                            min_dp[i - 1] * nums[i - 1], nums[i - 1])\n            ans = max(ans, max__dp[i])\n        return ans\n  "},{language:"py",text:"\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        a = b = 1\n        ans = float('-inf')\n\n        for i in range(1, n + 1):\n            temp = a\n            a = max(a * nums[i - 1],\n                    b * nums[i - 1], nums[i - 1])\n            b = min(temp * nums[i - 1],\n                    b * nums[i - 1], nums[i - 1])\n            ans = max(ans, a)\n        return ans\n\n"}]},"min-stack":{id:"155",name:"min-stack",pre:[{text:"\u6808",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"red"}],keyPoints:[{text:"\u5f80minstack\u4e2dpush\u7684\u5224\u65ad\u6761\u4ef6\u3002\u5e94\u8be5\u662fstack\u4e3a\u7a7a\u6216\u8005x\u5c0f\u4e8e\u7b49\u4e8eminstack\u6808\u9876\u5143\u7d20",link:null,color:"blue"}],companies:[{name:"amazon"},{name:"bloomberg"},{name:"google"},{name:"snapchat"},{name:"uber"},{name:"zenefits"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/155.min-stack.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/155.min-stack.md",code:[{language:"java",text:'\npublic class MinStack {\n\n    // \u6570\u636e\u6808\n    private Stack<Integer> data;\n    // \u8f85\u52a9\u6808\n    private Stack<Integer> helper;\n\n    /**\n     * initialize your data structure here.\n     */\n    public MinStack() {\n        data = new Stack<>();\n        helper = new Stack<>();\n    }\n    \n    public void push(int x) {\n        // \u8f85\u52a9\u6808\u5728\u5fc5\u8981\u7684\u65f6\u5019\u624d\u589e\u52a0\n        data.add(x);\n        if (helper.isEmpty() || helper.peek() >= x) {\n            helper.add(x);\n        }\n    }\n\n    public void pop() {\n        // \u5173\u952e 3\uff1adata \u4e00\u5b9a\u5f97 pop()\n        if (!data.isEmpty()) {\n            // \u6ce8\u610f\uff1a\u58f0\u660e\u6210 int \u7c7b\u578b\uff0c\u8fd9\u91cc\u5b8c\u6210\u4e86\u81ea\u52a8\u62c6\u7bb1\uff0c\u4ece Integer \u8f6c\u6210\u4e86 int\uff0c\n            // \u56e0\u6b64\u4e0b\u9762\u7684\u6bd4\u8f83\u53ef\u4ee5\u4f7f\u7528 "==" \u8fd0\u7b97\u7b26\n            int top = data.pop();\n            if(top == helper.peek()){\n                helper.pop();\n            }\n        }\n    }\n\n    public int top() {\n        if(!data.isEmpty()){\n            return data.peek();\n        }\n    }\n\n    public int getMin() {\n        if(!helper.isEmpty()){\n            return helper.peek();\n        }\n    }\n}\n'},{language:"java",text:"\nclass MinStack {\n    long min;\n    Stack<Long> stack;\n    \n    /** initialize your data structure here. */\n    public MinStack() {\n        stack = new Stack<>();\n    }\n    \n    public void push(int x) {\n        if (stack.isEmpty()) {\n            stack.push(0L);\n            min = x;\n        }\n        else {\n            stack.push(x - min);\n            if (x < min)\n                min = x;\n        }\n    }\n    \n    public void pop() {\n        long p = stack.pop();\n        \n        if (p < 0) {\n            // if (p < 0), the popped value is the min\n            // Recall p is added by this statement: stack.push(x - min);\n            // So, p = x - old_min\n            // old_min = x - p\n            // again, if (p < 0), x is the min so:\n            // old_min = min - p\n            min = min - p;\n        }\n    }\n    \n    public int top() {\n        long p = stack.peek();\n        \n        if (p < 0) {\n            return (int) min;\n        }\n        else {\n            // p = x - min\n            // x = p + min\n            return (int) (p + min);\n        }\n    }\n    \n    public int getMin() {\n        return (int) min;    \n    }\n}\n"},{language:"js",text:"\n/**\n * initialize your data structure here.\n */\nvar MinStack = function() {\n    this.stack = []\n    this.minStack = []\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) {\n    this.stack.push(x)\n    if (this.minStack.length == 0 ||  x <= this.minStack[this.minStack.length - 1]) {\n        this.minStack.push(x)\n    }\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n    const x = this.stack.pop()\n    if (x !== void 0 &&  x === this.minStack[this.minStack.length - 1]) {\n        this.minStack.pop()\n    }\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n    return this.stack[this.stack.length - 1]\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.min = function() {\n    return this.minStack[this.minStack.length - 1]\n};\n\n/** \n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.min()\n */\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=155 lang=javascript\n *\n * [155] Min Stack\n */\n/**\n * initialize your data structure here.\n */\nvar MinStack = function() {\n  this.stack = [];\n  this.minV = Number.MAX_VALUE;\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) {\n  // update 'min'\n  const minV = this.minV;\n  if (x < this.minV) {\n    this.minV = x;\n  }\n  return this.stack.push(x - minV);\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n  const item = this.stack.pop();\n  const minV = this.minV;\n\n  if (item < 0) {\n    this.minV = minV - item;\n    return minV;\n  }\n  return item + minV;\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n  const item = this.stack[this.stack.length - 1];\n  const minV = this.minV;\n\n  if (item < 0) {\n    return minV;\n  }\n  return item + minV;\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.min = function() {\n  return this.minV;\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.min()\n */\n"},{language:"cpp",text:"\nclass MinStack {\n    stack<int> data;\n    stack<int> helper;\npublic:\n    /** initialize your data structure here. */\n    MinStack() {\n        \n    }\n    \n    void push(int x) {\n        data.push(x);\n        if(helper.empty() || helper.top() >= x)\n        {\n            helper.push(x);\n        }\n        \n    }\n    \n    void pop() {\n        int top = data.top();\n        data.pop();\n        if(top == helper.top())\n        {\n            helper.pop();\n        }\n        \n    }\n    \n    int top() {\n        return data.top();\n    }\n    \n    int getMin() {\n        return helper.top();\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(x);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */\n"},{language:"cpp",text:"\nclass MinStack {\n    stack<long> data;\n    long min = INT_MAX;\npublic:\n    /** initialize your data structure here. */\n    MinStack() {\n        \n    }\n    \n    void push(int x) {\n        data.push(x - min);\n        if(x < min)\n        {\n            min = x;\n        }\n        \n    }\n    \n    void pop() {\n        long top = data.top();\n        data.pop();\n        // \u66f4\u65b0\u6700\u5c0f\u503c\n        if(top < 0)\n        {\n            min -= top;\n        }\n        \n    }\n    \n    int top() {\n        long top = data.top();\n        // \u6700\u5c0f\u503c\u4e3a min\n        if (top < 0)\n        {\n            return min;\n        }\n        else{\n            return min+top;\n        }\n    }\n    \n    int getMin() {\n        return min;\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(x);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */\n"},{language:"py",text:'\nclass MinStack:\n\n    def __init__(self):\n        """\n        initialize your data structure here.\n        """\n        self.stack = []\n        self.minstack = []\n\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n        if not self.minstack or x <= self.minstack[-1]:\n            self.minstack.append(x)\n\n    def pop(self) -> None:\n        tmp = self.stack.pop()\n        if tmp == self.minstack[-1]:\n            self.minstack.pop()\n\n    def top(self) -> int:\n        return self.stack[-1]\n\n    def min(self) -> int:\n        return self.minstack[-1]\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.min()\n'},{language:"py",text:'\nclass MinStack:\n\n    def __init__(self):\n        """\n        initialize your data structure here.\n        """\n        self.minV = float(\'inf\')\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        self.stack.append(x - self.minV)\n        if x < self.minV:\n            self.minV = x\n\n    def pop(self) -> None:\n        if not self.stack:\n            return\n        tmp = self.stack.pop()\n        if tmp < 0:\n            self.minV -= tmp\n\n    def top(self) -> int:\n        if not self.stack:\n            return\n        tmp = self.stack[-1]\n        if tmp < 0:\n            return self.minV\n        else:\n            return self.minV + tmp\n\n    def min(self) -> int:\n        return self.minV\n\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.min()\n'}]},"two-sum-ii-input-array-is-sorted":{id:"167",name:"two-sum-ii-input-array-is-sorted",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u7531\u4e8e\u662f\u6709\u5e8f\u7684\uff0c\u56e0\u6b64\u53cc\u6307\u9488\u66f4\u597d",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"amazon"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/167.two-sum-ii-input-array-is-sorted.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/167.two-sum-ii-input-array-is-sorted.md",code:[{language:"java",text:"\nclass Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        int n = numbers.length;\n        int left = 0;\n        int right = n-1;\n        while(left <= right)\n        {\n            if(numbers[left] + numbers[right] == target)\n            {\n                return new int[]{left + 1, right + 1};\n            }\n            else if (numbers[left] + numbers[right] > target)\n            {\n                right--;\n            }\n            else\n            {\n                left++;\n            }\n        }\n        \n        return new int[]{-1, -1};\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    const visited = {} // \u8bb0\u5f55\u51fa\u73b0\u7684\u6570\u5b57\uff0c \u7a7a\u95f4\u590d\u6742\u5ea6N\n\n    for (let index = 0; index < numbers.length; index++) {\n        const element = numbers[index];\n        if (visited[target - element] !== void 0) {\n            return [visited[target - element], index + 1]\n        }\n        visited[element] = index + 1;\n    }\n    return [];\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& numbers, int target) {\n        int n = numbers.size();\n        int left = 0;\n        int right = n-1;\n        while(left <= right)\n        {\n            if(numbers[left] + numbers[right] == target)\n            {\n                return {left + 1, right + 1};\n            }\n            else if (numbers[left] + numbers[right] > target)\n            {\n                right--;\n            }\n            else\n            {\n                left++;\n            }\n        }\n        return {-1, -1};\n    }\n};\n"},{language:"py",text:"\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        visited = {}\n        for index, number in enumerate(numbers):\n            if target - number in visited:\n                return [visited[target-number], index+1]\n            else:\n                visited[number] = index + 1\n\n# \u53cc\u6307\u9488\u601d\u8def\u5b9e\u73b0\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left, right = 0, len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] < target:\n                left += 1\n            if numbers[left] + numbers[right] > target:\n                right -= 1\n            if numbers[left] + numbers[right] == target:\n                return [left+1, right+1]\n"}]},"majority-element":{id:"169",name:"majority-element",pre:[{text:"\u6295\u7968\u7b97\u6cd5",link:null,color:"geekblue"}],keyPoints:[{text:"\u6295\u7968\u7b97\u6cd5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"adobe"},{name:"zenefits"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/169.majority-element.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/169.majority-element.md",code:[{language:"js",text:"\nvar majorityElement = function(nums) {\n    let count = 1;\n    let majority = nums[0];\n    for(let i = 1; i < nums.length; i++) {\n        if (count === 0) {\n            majority = nums[i];\n        }\n        if (nums[i] === majority) {\n            count ++;\n        } else {\n            count --;\n        }\n    }\n    return majority;\n};\n"},{language:"py",text:"\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        count, majority = 1, nums[0]\n        for num in nums[1:]:\n            if count == 0:\n                majority = num\n            if num == majority:\n                count += 1\n            else:\n                count -= 1\n        return majority\n"}]},"factorial-trailing-zeroes":{id:"172",name:"factorial-trailing-zeroes",pre:[{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"orange"}],keyPoints:[{text:"\u6570\u8bba",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"bloomberg"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/172.factorial-trailing-zeroes.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/172.factorial-trailing-zeroes.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=172 lang=javascript\n *\n * [172] Factorial Trailing Zeroes\n */\n/**\n * @param {number} n\n * @return {number}\n */\nvar trailingZeroes = function(n) {\n  // tag: \u6570\u8bba\n\n  // if (n === 0) return n;\n\n  // \u9012\u5f52\uff1a f(n) = n / 5 + f(n / 5)\n  // return Math.floor(n / 5)  + trailingZeroes(Math.floor(n / 5));\n  let count = 0;\n  while (n >= 5) {\n    count += Math.floor(n / 5);\n    n = Math.floor(n / 5);\n  }\n  return count;\n};\n"},{language:"py",text:"\nclass Solution:\n    def trailingZeroes(self, n: int) -> int:\n        count = 0\n        while n >= 5:\n            n = n // 5\n            count += n\n        return count\n\n\n# \u9012\u5f52\nclass Solution:\n    def trailingZeroes(self, n: int) -> int:\n        if n == 0: return 0\n        return n // 5 + self.trailingZeroes(n // 5)\n"}]},"reverse-bits":{id:"190",name:"reverse-bits",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u89e3\u67901.\u53ef\u4ee5\u7528\u4efb\u4f55\u6570\u5b57\u548c1\u8fdb\u884c\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u90fd\u53d6\u51b3\u4e8e\u8be5\u6570\u5b57\u6700\u540e\u4e00\u4f4d\u7684\u7279\u6027\u7b80\u5316\u64cd\u4f5c\u548c\u63d0\u9ad8\u6027\u80fdeg:",link:null,color:"blue"},{text:"n&1===1,\u8bf4\u660en\u7684\u6700\u540e\u4e00\u4f4d\u662f1",link:null,color:"blue"},{text:'n&1===0,\u8bf4\u660en\u7684\u6700\u540e\u4e00\u4f4d\u662f02.\u5bf9\u4e8eJS\uff0cES\u89c4\u8303\u5728\u4e4b\u524d\u5f88\u591a\u7248\u672c\u90fd\u662f\u6ca1\u6709\u65e0\u7b26\u53f7\u6574\u5f62\u7684\uff0c\u8f6c\u5316\u4e3a\u65e0\u7b26\u53f7\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2atrick`n>>>0`3.\u53cc"\u6307\u9488"\u6a21\u578b4.bit\u8fd0\u7b97',link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"airbnb"},{name:"apple"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/190.reverse-bits.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/190.reverse-bits.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=190 lang=javascript\n *\n * [190] Reverse Bits\n *\n * https://leetcode.com/problems/reverse-bits/description/\n *\n * algorithms\n * Easy (30.30%)\n * Total Accepted:    173.7K\n * Total Submissions: 568.2K\n * Testcase Example:  '00000010100101000001111010011100'\n *\n * Reverse bits of a given 32 bits unsigned integer.\n *\n *\n *\n * Example 1:\n *\n *\n * Input: 00000010100101000001111010011100\n * Output: 00111001011110000010100101000000\n * Explanation: The input binary string 00000010100101000001111010011100\n * represents the unsigned integer 43261596, so return 964176192 which its\n * binary representation is 00111001011110000010100101000000.\n *\n *\n * Example 2:\n *\n *\n * Input: 11111111111111111111111111111101\n * Output: 10111111111111111111111111111111\n * Explanation: The input binary string 11111111111111111111111111111101\n * represents the unsigned integer 4294967293, so return 3221225471 which its\n * binary representation is 10101111110010110010011101101001.\n *\n *\n *\n * Note:\n *\n *\n * Note that in some languages such as Java, there is no unsigned integer type.\n * In this case, both input and output will be given as signed integer type and\n * should not affect your implementation, as the internal binary representation\n * of the integer is the same whether it is signed or unsigned.\n * In Java,\xa0the compiler represents the signed integers using 2's complement\n * notation. Therefore, in Example 2\xa0above the input represents the signed\n * integer -3\xa0and the output represents the signed integer -1073741825.\n *\n *\n *\n *\n * Follow up:\n *\n * If this function is called many times, how would you optimize it?\n *\n */\n/**\n * @param {number} n - a positive integer\n * @return {number} - a positive integer\n */\nvar reverseBits = function(n) {\n  let res = 0;\n  for (let i = 0; i < 32; i++) {\n    res = (res << 1) + (n & 1);\n    n = n >>> 1;\n  }\n\n  return res >>> 0;\n};\n"},{language:"py",text:"\nclass Solution:\n    # @param n, an integer\n    # @return an integer\n    def reverseBits(self, n):\n        result = 0\n        for i in range(32):\n            result = (result << 1) + (n & 1)\n            n >>= 1\n        return result\n"}]},"number-of-1-bits":{id:"191",name:"number-of-1-bits",pre:[{text:"\u4f4d\u8fd0\u7b97",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/bit.md",color:"blue"}],keyPoints:[{text:"\u89e3\u67901.`n&(n",link:null,color:"blue"},{text:"1)`\u53ef\u4ee5`\u6d88\u9664`n\u6700\u540e\u7684\u4e00\u4e2a1\u7684\u539f\u7406\u7b80\u5316\u64cd\u4f5c2.bit\u8fd0\u7b97",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"apple"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/191.number-of-1-bits.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/191.number-of-1-bits.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=191 lang=javascript\n *\n */\n/**\n * @param {number} n - a positive integer\n * @return {number}\n */\nvar hammingWeight = function(n) {\n  let count = 0;\n  while (n !== 0) {\n    n = n & (n - 1);\n    count++;\n  }\n\n  return count;\n};\n\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int hammingWeight(uint32_t v) {\n        auto count = 0;\n        while (v != 0) {\n            v &= (v - 1);\n            ++count;\n        }\n        return count;\n    }\n};\n"},{language:"cpp",text:"\nconst uint32_t ODD_BIT_MASK = 0xAAAAAAAA;\nconst uint32_t EVEN_BIT_MASK = 0x55555555;\nconst uint32_t ODD_2BIT_MASK = 0xCCCCCCCC;\nconst uint32_t EVEN_2BIT_MASK = 0x33333333;\nconst uint32_t ODD_4BIT_MASK = 0xF0F0F0F0;\nconst uint32_t EVEN_4BIT_MASK = 0x0F0F0F0F;\nconst uint32_t ODD_8BIT_MASK = 0xFF00FF00;\nconst uint32_t EVEN_8BIT_MASK = 0x00FF00FF;\nconst uint32_t ODD_16BIT_MASK = 0xFFFF0000;\nconst uint32_t EVEN_16BIT_MASK = 0x0000FFFF;\n\nclass Solution {\npublic:\n\n    int hammingWeight(uint32_t v) {\n        v = (v & EVEN_BIT_MASK) + ((v & ODD_BIT_MASK) >> 1);\n        v = (v & EVEN_2BIT_MASK) + ((v & ODD_2BIT_MASK) >> 2);\n        v = (v & EVEN_4BIT_MASK) + ((v & ODD_4BIT_MASK) >> 4);\n        v = (v & EVEN_8BIT_MASK) + ((v & ODD_8BIT_MASK) >> 8);\n        return (v & EVEN_16BIT_MASK) + ((v & ODD_16BIT_MASK) >> 16);\n    }\n};\n"},{language:"py",text:'\nclass Solution(object):\n    def hammingWeight(self, n):\n        """\n        :type n: int\n        :rtype: int\n        """\n        count = 0\n        while n:\n            n &= n - 1\n            count += 1\n        return count\n'}]},"house-robber":{id:"198",name:"house-robber",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"red"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"airbnb"},{name:"linkedin"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/198.house-robber.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/198.house-robber.md",code:[{language:"js",text:"\nlet a = 0;\nlet b = 0;\n\nfor (let i = 0; i < nums.length; i++) {\n  const temp = b;\n  b = Math.max(a + nums[i], b);\n  a = temp;\n}\n\nreturn b;\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=198 lang=javascript\n *\n * [198] House Robber\n *\n * https://leetcode.com/problems/house-robber/description/\n *\n * algorithms\n * Easy (40.80%)\n * Total Accepted:    312.1K\n * Total Submissions: 762.4K\n * Testcase Example:  '[1,2,3,1]'\n *\n * You are a professional robber planning to rob houses along a street. Each\n * house has a certain amount of money stashed, the only constraint stopping\n * you from robbing each of them is that adjacent houses have security system\n * connected and it will automatically contact the police if two adjacent\n * houses were broken into on the same night.\n *\n * Given a list of non-negative integers representing the amount of money of\n * each house, determine the maximum amount of money you can rob tonight\n * without alerting the police.\n *\n * Example 1:\n *\n *\n * Input: [1,2,3,1]\n * Output: 4\n * Explanation: Rob house 1 (money = 1) and then rob house 3 (money =\n * 3).\n * Total amount you can rob = 1 + 3 = 4.\n *\n * Example 2:\n *\n *\n * Input: [2,7,9,3,1]\n * Output: 12\n * Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house\n * 5 (money = 1).\n * Total amount you can rob = 2 + 9 + 1 = 12.\n *\n *\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n  // Tag: DP\n  const dp = [];\n  dp[0] = 0;\n  dp[1] = 0;\n\n  for (let i = 2; i < nums.length + 2; i++) {\n    dp[i] = Math.max(dp[i - 2] + nums[i - 2], dp[i - 1]);\n  }\n\n  return dp[nums.length + 1];\n};\n"},{language:"py",text:"\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        length = len(nums)\n        if length == 1:\n            return nums[0]\n        else:\n            prev = nums[0]\n            cur = max(prev, nums[1])\n            for i in range(2, length):\n                cur, prev = max(prev + nums[i], cur), cur\n            return cur\n"}]},"binary-tree-right-side-view":{id:"199",name:"binary-tree-right-side-view",pre:[{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u961f\u5217",link:null,color:"blue"},{text:"\u961f\u5217\u4e2d\u7528Null(\u4e00\u4e2a\u7279\u6b8a\u5143\u7d20)\u6765\u5212\u5206\u6bcf\u5c42",link:null,color:"blue"},{text:"\u6811\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"\u904d\u5386",link:null,color:"blue"},{text:"\u5c42\u6b21\u904d\u5386\uff08BFS\uff09",link:null,color:"blue"},{text:"\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe\u53ef\u4ee5\u770b\u4f5c\u662f\u5c42\u6b21\u904d\u5386\u6bcf\u6b21\u53ea\u53d6\u6bcf\u4e00\u5c42\u7684\u6700\u53f3\u8fb9\u7684\u5143\u7d20",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/199.binary-tree-right-side-view.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/199.binary-tree-right-side-view.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=199 lang=javascript\n *\n * [199] Binary Tree Right Side View\n *\n * https://leetcode.com/problems/binary-tree-right-side-view/description/\n *\n * algorithms\n * Medium (46.74%)\n * Total Accepted:    156.1K\n * Total Submissions: 332.3K\n * Testcase Example:  '[1,2,3,null,5,null,4]'\n *\n * Given a binary tree, imagine yourself standing on the right side of it,\n * return the values of the nodes you can see ordered from top to bottom.\n *\n * Example:\n *\n *\n * Input:\xa0[1,2,3,null,5,null,4]\n * Output:\xa0[1, 3, 4]\n * Explanation:\n *\n * \u2060  1            <---\n * \u2060/   \\\n * 2     3         <---\n * \u2060\\     \\\n * \u2060 5     4       <---\n *\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar rightSideView = function(root) {\n  if (!root) return [];\n\n  const ret = [];\n  const queue = [root, null];\n\n  let levelNodes = [];\n\n  while (queue.length > 0) {\n    const node = queue.shift();\n    if (node !== null) {\n      levelNodes.push(node.val);\n      if (node.right) {\n        queue.push(node.right);\n      }\n      if (node.left) {\n        queue.push(node.left);\n      }\n    } else {\n      // \u4e00\u5c42\u904d\u5386\u5df2\u7ecf\u7ed3\u675f\n      ret.push(levelNodes[0]);\n      if (queue.length > 0) {\n        queue.push(null);\n      }\n      levelNodes = [];\n    }\n  }\n\n  return ret;\n};\n"}]},"number-of-islands":{id:"200",name:"number-of-islands",pre:[{text:"DFS",link:null,color:"red"}],keyPoints:[{text:"\u4e8c\u7ef4\u6570\u7ec4DFS\u89e3\u9898\u6a21\u677f",link:null,color:"blue"},{text:"\u5c06\u5df2\u7ecf\u8bbf\u95ee\u7684\u5143\u7d20\u7f6e\u4e3a0\uff0c\u7701\u53bbvisited\u7684\u7a7a\u95f4\u5f00\u9500",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/200.number-of-islands.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/200.number-of-islands.md",code:[{language:"java",text:"\n   public int numIslands(char[][] grid) {\n        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;\n\n        int count = 0;\n        for (int row = 0; row < grid.length; row++) {\n            for (int col = 0; col < grid[0].length; col++) {\n                if (grid[row][col] == '1') {\n                    dfs(grid, row, col);\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private void dfs(char[][] grid,int row,int col) {\n        if (row<0||row== grid.length||col<0||col==grid[0].length||grid[row][col]!='1') {\n            return;\n        }\n        grid[row][col] = '0';\n        dfs(grid, row-1, col);\n        dfs(grid, row+1, col);\n        dfs(grid, row, col+1);\n        dfs(grid, row, col-1);\n    }\n"},{language:"js",text:'\n/*\n * @lc app=leetcode id=200 lang=javascript\n *\n * [200] Number of Islands\n */\nfunction helper(grid, i, j, rows, cols) {\n  if (i < 0 || j < 0 || i > rows - 1 || j > cols - 1 || grid[i][j] === "0")\n    return;\n\n  grid[i][j] = "0";\n\n  helper(grid, i + 1, j, rows, cols);\n  helper(grid, i, j + 1, rows, cols);\n  helper(grid, i - 1, j, rows, cols);\n  helper(grid, i, j - 1, rows, cols);\n}\n/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n  let res = 0;\n  const rows = grid.length;\n  if (rows === 0) return 0;\n  const cols = grid[0].length;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === "1") {\n        helper(grid, i, j, rows, cols);\n        res++;\n      }\n    }\n  }\n  return res;\n};\n'}]},"bitwise-and-of-numbers-range":{id:"201",name:"bitwise-and-of-numbers-range",pre:[{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"}],keyPoints:[{text:"n\u4e2a\u8fde\u7eed\u6570\u5b57\u6c42\u4e0e\u7684\u65f6\u5019\uff0c\u524dm\u4f4d\u90fd\u662f1",link:null,color:"blue"},{text:"\u53ef\u4ee5\u7528\u9012\u5f52\u5b9e\u73b0\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u96be\u60f3\u5230",link:null,color:"blue"},{text:"bit\u8fd0\u7b97\u4ee3\u7801\uff1a```js(n>m)?(rangeBitwiseAnd(m/2,n/2)<<1):m;```>\u6bcf\u6b21\u95ee\u9898\u89c4\u6a21\u7f29\u5c0f\u4e00\u534a\uff0c\u8fd9\u662f\u4e8c\u5206\u6cd5\u5417\uff1f",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/201.bitwise-and-of-numbers-range.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/201.bitwise-and-of-numbers-range.md",code:[{language:"js",text:"\n\n    let res = m;\n    for (let i = m + 1; i <= n; i++) {\n      res = res & i;\n    }\n    return res;\n\n"},{language:"js",text:"\n\n(n > m) ? (rangeBitwiseAnd(m/2, n/2) << 1) : m;\n\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=201 lang=javascript\n *\n * [201] Bitwise AND of Numbers Range\n *\n */\n/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar rangeBitwiseAnd = function(m, n) {\n  let count = 0;\n  while (m !== n) {\n    m = m >> 1;\n    n = n >> 1;\n    count++;\n  }\n\n  return n << count;\n};\n\n"},{language:"py",text:"\nclass Solution:\n    def rangeBitwiseAnd(self, m: int, n: int) -> int:\n        cnt = 0\n        while m != n:\n            m >>= 1\n            n >>= 1\n            cnt += 1\n\n        return m << cnt\n "}]},"remove-linked-list-elements":{id:"203",name:"remove-linked-list-elements",pre:[{text:"\u94fe\u8868",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"magenta"}],keyPoints:[{text:"\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u5220\u9664\u6307\u5b9a\u8282\u70b9\uff09",link:null,color:"blue"},{text:"\u865a\u62df\u8282\u70b9dummy\u7b80\u5316\u64cd\u4f5c>\u5176\u5b9e\u8bbe\u7f6edummy\u8282\u70b9\u5c31\u662f\u4e3a\u4e86\u5904\u7406\u7279\u6b8a\u4f4d\u7f6e\uff08\u5934\u8282\u70b9\uff09\uff0c\u8fd9\u8fd9\u9053\u9898\u5c31\u662f\u5982\u679c\u5934\u8282\u70b9\u662f\u7ed9\u5b9a\u7684\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\u5462\uff1f\u4e3a\u4e86\u4fdd\u8bc1\u4ee3\u7801\u903b\u8f91\u7684\u4e00\u81f4\u6027\uff0c\u5373\u4e0d\u9700\u8981\u4e3a\u5934\u8282\u70b9\u7279\u6b8a\u5b9a\u5236\u903b\u8f91\uff0c\u624d\u91c7\u7528\u7684\u865a\u62df\u8282\u70b9\u3002",link:null,color:"blue"},{text:"\u5982\u679c\u8fde\u7eed\u4e24\u4e2a\u8282\u70b9\u90fd\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u60c5\u51b5\u5bb9\u6613\u88ab\u5ffd\u7565\u3002eg:```js//\u53ea\u6709\u4e0b\u4e2a\u8282\u70b9\u4e0d\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\u624d\u66f4\u65b0currentif(!next||next.val!==val){current=next;}```",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/203.remove-linked-list-elements.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/203.remove-linked-list-elements.md",code:[{language:"js",text:"\n// \u53ea\u6709\u4e0b\u4e2a\u8282\u70b9\u4e0d\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\u624d\u66f4\u65b0 current\nif (!next || next.val !== val) {\n    current =  next;\n}\n\n"},{language:"js",text:"\n/**\n * @param {ListNode} head\n * @param {number} val\n * @return {ListNode}\n */\nvar removeElements = function(head, val) {\n    const dummy = {\n        next: head\n    }\n    let current = dummy;\n\n    while(current && current.next) {\n        let next = current.next;\n        if (next.val === val) {\n            current.next = next.next;\n            next = next.next;\n        }\n\n        if (!next || next.val !== val) {\n            current =  next;\n        }\n    }\n\n    return dummy.next;\n};\n"},{language:"py",text:"\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def removeElements(self, head: ListNode, val: int) -> ListNode:\n        prev = ListNode(0)\n        prev.next = head\n        cur = prev\n        while cur.next:\n            if cur.next.val == val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return prev.next\n"}]},"reverse-linked-list":{id:"206",name:"reverse-linked-list",pre:[{text:"\u94fe\u8868",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"magenta"}],keyPoints:[{text:"\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c\uff08\u4ea4\u6362\uff09",link:null,color:"blue"},{text:"\u865a\u62df\u8282\u70b9dummy\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u6ce8\u610f\u66f4\u65b0current\u548cpre\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u6709\u53ef\u80fd\u51fa\u73b0\u6ea2\u51fa",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u817e\u8baf"},{name:"adobe"},{name:"amazon"},{name:"apple"},{name:"bloomberg"},{name:"facebook"},{name:"microsoft"},{name:"snapchat"},{name:"twitter"},{name:"uber"},{name:"yahoo"},{name:"yelp"},{name:"zenefits"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/206.reverse-linked-list.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/206.reverse-linked-list.md",code:[{language:"java",text:"\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode pre = null, cur = head;\n\n        while (cur != null) {\n            ListNode next = cur.next;\n            cur.next = pre;\n            pre = cur;\n            cur = next;\n        }\n\n        return pre;\n    }\n}\n"},{language:"js",text:"\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function (head) {\n  if (!head || !head.next) return head;\n\n  let cur = head;\n  let pre = null;\n\n  while (cur) {\n    const next = cur.next;\n    cur.next = pre;\n    pre = cur;\n    cur = next;\n  }\n\n  return pre;\n};\n"},{language:"js",text:"\nvar reverseList = function (head) {\n  // \u9012\u5f52\u7ed3\u675f\u6761\u4ef6\n  if (head === null || head.next === null) {\n    return head;\n  }\n\n  // \u9012\u5f52\u53cd\u8f6c \u5b50\u94fe\u8868\n  let newReverseList = reverseList(head.next);\n  // \u83b7\u53d6\u539f\u6765\u94fe\u8868\u7684\u7b2c 2 \u4e2a\u8282\u70b9 newReverseListTail\n  let newReverseListTail = head.next;\n  // \u8c03\u6574\u539f\u6765\u5934\u7ed3\u70b9\u548c\u7b2c 2 \u4e2a\u8282\u70b9\u7684\u6307\u5411\n  newReverseListTail.next = head;\n  head.next = null;\n\n  // \u5c06\u8c03\u6574\u540e\u7684\u94fe\u8868\u8fd4\u56de\n  return newReverseList;\n};\n"},{language:"cpp",text:"\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = NULL;\n        ListNode* cur = head;\n        ListNode* next = NULL;\n        while (cur != NULL) {\n            next = cur->next;\n            cur->next = prev;\n            prev = cur;\n            cur = next;\n        }\n        return prev;\n    }\n};\n"},{language:"cpp",text:"\n// \u666e\u901a\u9012\u5f52\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* tail = nullptr;\n        return reverseRecursive(head, tail);\n    }\n\n    ListNode* reverseRecursive(ListNode *head, ListNode *&tail) {\n        if (head == nullptr) {\n            tail = nullptr;\n            return head;\n        }\n        if (head->next == nullptr) {\n            tail = head;\n            return head;\n        }\n        auto h = reverseRecursive(head->next, tail);\n        if (tail != nullptr) {\n            tail->next = head;\n            tail = head;\n            head->next = nullptr;\n        }\n        return h;\n    }\n};\n\n// \uff08\u7c7b\u4f3c\uff09\u5c3e\u9012\u5f52\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if (head == nullptr) return head;\n        return reverseRecursive(nullptr, head, head->next);\n    }\n\n    ListNode* reverseRecursive(ListNode *prev, ListNode *head, ListNode *next)\n    {\n        if (next == nullptr) return head;\n        auto n = next->next;\n        next->next = head;\n        head->next = prev;\n        return reverseRecursive(head, next, n);\n    }\n};\n"},{language:"py",text:"\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if not head: return None\n        prev = None\n        cur = head\n        while cur:\n            cur.next, prev, cur = prev, cur, cur.next\n        return prev\n"},{language:"py",text:"\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if not head or not head.next: return head\n        ans = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return ans\n"}]},"implement-trie-prefix-tree":{id:"208",name:"implement-trie-prefix-tree",pre:[{text:"\u524d\u7f00\u6811",link:null,color:"purple"}],keyPoints:[{text:"\u524d\u7f00\u6811",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/208.implement-trie-prefix-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/208.implement-trie-prefix-tree.md",code:[{language:"js",text:"\nfunction TrieNode(val) {\n  this.val = val; // \u5f53\u524d\u7684\u5b57\u6bcd\n  this.children = []; // \u9898\u76ee\u8981\u6c42\u5b57\u5178\u4ec5\u6709a-z\uff0c\u90a3\u4e48\u5176\u957f\u5ea6\u6700\u5927\u4e3a26\uff0826\u4e2a\u5b57\u6bcd\uff09\n  this.isWord = false;\n}\n"},{language:"js",text:'\nfunction computeIndex(c) {\n  return c.charCodeAt(0) - "a".charCodeAt(0);\n}\n'},{language:"js",text:'\n/*\n * @lc app=leetcode id=208 lang=javascript\n *\n * [208] Implement Trie (Prefix Tree)\n *\n * https://leetcode.com/problems/implement-trie-prefix-tree/description/\n *\n * algorithms\n * Medium (36.93%)\n * Total Accepted:    172K\n * Total Submissions: 455.5K\n * Testcase Example:  \'["Trie","insert","search","search","startsWith","insert","search"]\\n[[],["apple"],["apple"],["app"],["app"],["app"],["app"]]\'\n *\n * Implement a trie with insert, search, and startsWith methods.\n *\n * Example:\n *\n *\n * Trie trie = new Trie();\n *\n * trie.insert("apple");\n * trie.search("apple");   // returns true\n * trie.search("app");     // returns false\n * trie.startsWith("app"); // returns true\n * trie.insert("app");\n * trie.search("app");     // returns true\n *\n *\n * Note:\n *\n *\n * You may assume that all inputs are consist of lowercase letters a-z.\n * All inputs are guaranteed to be non-empty strings.\n *\n *\n */\nfunction TrieNode(val) {\n  this.val = val;\n  this.children = [];\n  this.isWord = false;\n}\n\nfunction computeIndex(c) {\n  return c.charCodeAt(0) - "a".charCodeAt(0);\n}\n/**\n * Initialize your data structure here.\n */\nvar Trie = function () {\n  this.root = new TrieNode(null);\n};\n\n/**\n * Inserts a word into the trie.\n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function (word) {\n  let ws = this.root;\n  for (let i = 0; i < word.length; i++) {\n    const c = word[i];\n    const current = computeIndex(c);\n    if (!ws.children[current]) {\n      ws.children[current] = new TrieNode(c);\n    }\n    ws = ws.children[current];\n  }\n  ws.isWord = true;\n};\n\n/**\n * Returns if the word is in the trie.\n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function (word) {\n  let ws = this.root;\n  for (let i = 0; i < word.length; i++) {\n    const c = word[i];\n    const current = computeIndex(c);\n    if (!ws.children[current]) return false;\n    ws = ws.children[current];\n  }\n  return ws.isWord;\n};\n\n/**\n * Returns if there is any word in the trie that starts with the given prefix.\n * @param {string} prefix\n * @return {boolean}\n */\nTrie.prototype.startsWith = function (prefix) {\n  let ws = this.root;\n  for (let i = 0; i < prefix.length; i++) {\n    const c = prefix[i];\n    const current = computeIndex(c);\n    if (!ws.children[current]) return false;\n    ws = ws.children[current];\n  }\n  return true;\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */\n'}]},"minimum-size-subarray-sum":{id:"209",name:"minimum-size-subarray-sum",pre:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"}],keyPoints:[{text:"\u6ed1\u52a8\u7a97\u53e3\u7b80\u5316\u64cd\u4f5c(\u6ed1\u7a97\u53e3\u9002\u5408\u7528\u4e8e\u6c42\u89e3\u8fd9\u79cd\u8981\u6c42`\u8fde\u7eed`\u7684\u9898\u76ee)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/209.minimum-size-subarray-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/209.minimum-size-subarray-sum.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=209 lang=javascript\n *\n * [209] Minimum Size Subarray Sum\n *\n */\n/**\n * @param {number} s\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(s, nums) {\n  if (nums.length === 0) return 0;\n  const slideWindow = [];\n  let acc = 0;\n  let min = null;\n\n  for (let i = 0; i < nums.length + 1; i++) {\n    const num = nums[i];\n\n    while (acc >= s) {\n      if (min === null || slideWindow.length < min) {\n        min = slideWindow.length;\n      }\n      acc = acc - slideWindow.shift();\n    }\n\n    slideWindow.push(num);\n\n    acc = slideWindow.reduce((a, b) => a + b, 0);\n  }\n\n  return min || 0;\n};\n"},{language:"js",text:"\nvar minSubArrayLen = function(s, nums) {\n  if (nums.length === 0) return 0;\n  const slideWindow = [];\n  let acc = 0;\n  let min = null;\n\n  for (let i = 0; i < nums.length + 1; i++) {\n    const num = nums[i];\n\n    while (acc > s) {\n      acc = acc - slideWindow.shift();\n    }\n    if (acc === s) {\n      if (min === null || slideWindow.length < min) {\n        min = slideWindow.length;\n      }\n      slideWindow.shift();\n    }\n\n    slideWindow.push(num);\n\n    acc = slideWindow.reduce((a, b) => a + b, 0);\n  }\n\n  return min || 0;\n};\n"},{language:"py",text:"\n\nclass Solution:\n    def minSubArrayLen(self, s: int, nums: List[int]) -> int:\n        l = total = 0\n        ans = len(nums) + 1\n        for r in range(len(nums)):\n            total += nums[r]\n            while total >= s:\n                ans = min(ans, r - l + 1)\n                total -= nums[l]\n                l += 1\n        return  0 if ans == len(nums) + 1 else ans\n"}]},"add-and-search-word-data-structure-design":{id:"211",name:"add-and-search-word-data-structure-design",pre:[{text:"\u524d\u7f00\u6811",link:null,color:"purple"}],keyPoints:[{text:"\u524d\u7f00\u6811\uff08\u4e5f\u53eb\u5b57\u5178\u6811\uff09\uff0c\u82f1\u6587\u540dTrie\uff08\u8bfb\u4f5ctree\u6216\u8005try\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/211.add-and-search-word-data-structure-design.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/211.add-and-search-word-data-structure-design.md",code:[{language:"py",text:'\ndef search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for i, w in enumerate(word):\n            if w == \'.\':\n                wizards = []\n                for k in curr.keys():\n                    if k == \'#\':\n                        continue\n                    wizards.append(self.search(word[:i] + k + word[i + 1:]))\n                return any(wizards)\n            if w not in curr:\n                return False\n            curr = curr[w]\n        return "#" in curr\n'},{language:"py",text:'\ndef search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                return False\n            curr = curr[w]\n        return "#" in curr\n'},{language:"py",text:'\nclass Trie:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.Trie = {}\n\n    def insert(self, word):\n        """\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr[\'#\'] = 1\n\n    def search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for i, w in enumerate(word):\n            if w == \'.\':\n                wizards = []\n                for k in curr.keys():\n                    if k == \'#\':\n                        continue\n                    wizards.append(self.search(word[:i] + k + word[i + 1:]))\n                return any(wizards)\n            if w not in curr:\n                return False\n            curr = curr[w]\n        return "#" in curr\n'},{language:"py",text:'\nclass WordDictionary:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.trie = Trie()\n\n    def addWord(self, word: str) -> None:\n        """\n        Adds a word into the data structure.\n        """\n        self.trie.insert(word)\n\n    def search(self, word: str) -> bool:\n        """\n        Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter.\n        """\n        return self.trie.search(word)\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)\n'}]},"word-search-ii":{id:"212",name:"word-search-ii",pre:[{text:"\u524d\u7f00\u6811",link:null,color:"purple"},{text:"DFS",link:null,color:"red"}],keyPoints:[{text:"\u524d\u7f00\u6811\uff08\u4e5f\u53eb\u5b57\u5178\u6811\uff09\uff0c\u82f1\u6587\u540dTrie\uff08\u8bfb\u4f5ctree\u6216\u8005try\uff09",link:null,color:"blue"},{text:"DFS",link:null,color:"blue"},{text:"hashmap\u7ed3\u5408dfs\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u7ed3\u675f\u4e4b\u540e\u9700\u8981\u5c06hashmap\u7684\u503c\u91cd\u7f6e\u3002\uff08\u4e0b\u65b9\u4ee3\u7801\u7684`delseen[(i,j)]`\uff09",link:null,color:"blue"}],companies:[{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/212.word-search-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/212.word-search-ii.md",code:[{language:"py",text:'\nclass Trie:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.Trie = {}\n\n    def insert(self, word):\n        """\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr[\'#\'] = 1\n\n    def startsWith(self, prefix):\n        """\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        """\n\n        curr = self.Trie\n        for w in prefix:\n            if w not in curr:\n                return False\n            curr = curr[w]\n        return True\n'},{language:"py",text:'\nclass Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        m = len(board)\n        if m == 0:\n            return []\n        n = len(board[0])\n        trie = Trie()\n        seen = None\n        res = set()\n        for word in words:\n            trie.insert(word)\n\n        def dfs(s, i, j):\n            if (i, j) in seen or i < 0 or i >= m or j < 0 or j >= n or not trie.startsWith(s):\n                return\n            s += board[i][j]\n            seen[(i, j)] = True\n\n            if s in words:\n                res.add(s)\n            dfs(s, i + 1, j)\n            dfs(s, i - 1, j)\n            dfs(s, i, j + 1)\n            dfs(s, i, j - 1)\n\n            del seen[(i, j)]\n\n        for i in range(m):\n            for j in range(n):\n                seen = dict()\n                dfs("", i, j)\n        return list(res)\n'}]},"kth-largest-element-in-an-array":{id:"215",name:"kth-largest-element-in-an-array",pre:[{text:"\u5806",link:null,color:"green"},{text:"Quick Select",link:null,color:"lime"}],keyPoints:[{text:"\u5206\u67901.\u76f4\u63a5\u6392\u5e8f\u5f88\u7b80\u53552.\u5806\uff08Heap\uff09\u4e3b\u8981\u662f\u8981\u7ef4\u62a4\u4e00\u4e2aK\u5927\u5c0f\u7684\u5c0f\u9876\u5806\uff0c\u626b\u63cf\u4e00\u904d\u6570\u7ec4\uff0c\u6700\u540e\u5806\u9876\u5143\u7d20\u5373\u662f\u6240\u6c42\u30023.QuickSelect,\u5173\u952e\u662f\u662f\u53d6pivot\uff0c\u5bf9\u6570\u7ec4\u533a\u95f4\u505apartition\uff0c\u6bd4\u8f83pivot\u7684\u4f4d\u7f6e\uff0c\u7c7b\u4f3c\u4e8c\u5206\uff0c\u53d6pivot\u5de6\u8fb9\u6216\u53f3\u8fb9\u7ee7\u7eed\u9012\u5f52\u67e5\u627e\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/215.kth-largest-element-in-an-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/215.kth-largest-element-in-an-array.md",code:[{language:"java",text:"\nclass KthLargestElementSort {\n public int findKthlargest2(int[] nums, int k) {\n    Arrays.sort(nums);\n    return nums[nums.length - k];\n  }\n}\n"},{language:"java",text:"\nclass KthLargestElementHeap {\n  public int findKthLargest(int[] nums, int k) {\n      PriorityQueue<Integer> pq = new PriorityQueue<>();\n      for (int num : nums) {\n        pq.offer(num);\n        if (pq.size() > k) {\n          pq.poll();\n        }\n      }\n      return pq.poll();\n  }\n}\n"},{language:"java",text:"\nclass KthLargestElementQuickSelect {\n    static Random random = new Random();\n    public int findKthLargest3(int[] nums, int k) {\n      int len = nums.length;\n      return select(nums, 0, len - 1, len - k);\n    }\n    \n    private int select(int[] nums, int left, int right, int k) {\n      if (left == right) return nums[left];\n      // random select pivotIndex between left and right\n      int pivotIndex = left + random.nextInt(right - left);\n      // do partition, move smaller than pivot number into pivot left\n      int pos = partition(nums, left, right, pivotIndex);\n      if (pos == k) {\n        return nums[pos];\n      } else if (pos > k) {\n        return select(nums, left, pos - 1, k);\n      } else {\n        return select(nums, pos + 1, right, k);\n      }\n    }\n    \n    private int partition(int[] nums, int left, int right, int pivotIndex) {\n      int pivot = nums[pivotIndex];\n      // move pivot to end\n      swap(nums, right, pivotIndex);\n      int pos = left;\n      // move smaller num to pivot left\n      for (int i = left; i <= right; i++) {\n        if (nums[i] < pivot) {\n          swap(nums, pos++, i);\n        }\n      }\n      // move pivot to original place\n      swap(nums, right, pos);\n      return pos;\n    }\n    \n    private void swap(int[] nums, int i, int j) {\n      int tmp = nums[i];\n      nums[i] = nums[j];\n      nums[j] = tmp;\n    }\n}\n"}]},"contains-duplicate-ii":{id:"219",name:"contains-duplicate-ii",pre:[{text:"hashmap",link:null,color:"red"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/219.contains-duplicate-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/219.contains-duplicate-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=219 lang=javascript\n *\n * [219] Contains Duplicate II\n *\n * https://leetcode.com/problems/contains-duplicate-ii/description/\n *\n * algorithms\n * Easy (34.75%)\n * Total Accepted:    187.3K\n * Total Submissions: 537.5K\n * Testcase Example:  '[1,2,3,1]\\n3'\n *\n * Given an array of integers and an integer k, find out whether there are two\n * distinct indices i and j in the array such that nums[i] = nums[j] and the\n * absolute difference between i and j is at most k.\n *\n *\n * Example 1:\n *\n *\n * Input: nums = [1,2,3,1], k = 3\n * Output: true\n *\n *\n *\n * Example 2:\n *\n *\n * Input: nums = [1,0,1,1], k = 1\n * Output: true\n *\n *\n *\n * Example 3:\n *\n *\n * Input: nums = [1,2,3,1,2,3], k = 2\n * Output: false\n *\n *\n *\n *\n *\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function(nums, k) {\n    const visited = {};\n    for(let i = 0; i < nums.length; i++) {\n        const num = nums[i];\n        if (visited[num] !== undefined && i - visited[num] <= k) {\n            return true;\n        }\n        visited[num] = i;\n    }\n    return false\n};\n"},{language:"py",text:"\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        d = {}\n        for index, num in enumerate(nums):\n            if num in d and index - d[num] <= k:\n                return True\n            d[num] = index\n        return False\n"}]},"maximal-square":{id:"221",name:"maximal-square",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"},{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"DP",link:null,color:"blue"},{text:"\u9012\u5f52\u516c\u5f0f\u53ef\u4ee5\u5229\u7528dp[i",link:null,color:"blue"},{text:"1][j]\u548cdp[i][j",link:null,color:"blue"},{text:"1]\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u800c\u4e0d\u7528\u91cd\u65b0\u8ba1\u7b97",link:null,color:"blue"},{text:"\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u4f4e\u5230O(n),n\u4e3a\u5217\u6570",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/221.maximal-square.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/221.maximal-square.md",code:[{language:"js",text:'\n\n/*\n * @lc app=leetcode id=221 lang=javascript\n *\n * [221] Maximal Square\n */\n/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function(matrix) {\n  if (matrix.length === 0) return 0;\n  const dp = [];\n  const rows = matrix.length;\n  const cols = matrix[0].length;\n  let max = Number.MIN_VALUE;\n\n  for (let i = 0; i < rows + 1; i++) {\n    if (i === 0) {\n      dp[i] = Array(cols + 1).fill(0);\n    } else {\n      dp[i] = [0];\n    }\n  }\n\n  for (let i = 1; i < rows + 1; i++) {\n    for (let j = 1; j < cols + 1; j++) {\n      if (matrix[i - 1][j - 1] === "1") {\n        dp[i][j] = Math.min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1;\n        max = Math.max(max, dp[i][j]);\n      } else {\n        dp[i][j] = 0;\n      }\n    }\n  }\n\n  return max * max;\n};\n'},{language:"py",text:'\nclass Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        res = 0\n        m = len(matrix)\n        if m == 0:\n            return 0\n        n = len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 if matrix[i - 1][j - 1] == "1" else 0\n                res = max(res, dp[i][j])\n        return res ** 2\n'}]},"invert-binary-tree":{id:"226",name:"invert-binary-tree",pre:[{text:"\u9012\u5f52",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",color:"orange"}],keyPoints:[{text:"\u9012\u5f52\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5982\u679c\u6811\u5f88\u9ad8\uff0c\u5efa\u8bae\u4f7f\u7528\u6808\u6765\u4ee3\u66ff\u9012\u5f52",link:null,color:"blue"},{text:"\u8fd9\u9053\u9898\u76ee\u5bf9\u987a\u5e8f\u6ca1\u8981\u6c42\u7684\uff0c\u56e0\u6b64\u961f\u5217\u6570\u7ec4\u64cd\u4f5c\u90fd\u662f\u4e00\u6837\u7684\uff0c\u65e0\u4efb\u4f55\u533a\u522b",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/226.invert-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/226.invert-binary-tree.md",code:[{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function(root) {\n  if (!root) return root;\n  // \u9012\u5f52\n  //   const left = root.left;\n  //   const right = root.right;\n  //   root.right = invertTree(left);\n  //   root.left = invertTree(right);\n  // \u6211\u4eec\u7528stack\u6765\u6a21\u62df\u9012\u5f52\n  // \u672c\u8d28\u4e0a\u9012\u5f52\u662f\u5229\u7528\u4e86\u6267\u884c\u6808\uff0c\u6267\u884c\u6808\u4e5f\u662f\u4e00\u79cd\u6808\n  // \u5176\u5b9e\u8fd9\u91cc\u4f7f\u7528\u961f\u5217\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a\u8fd9\u91cc\u987a\u5e8f\u4e0d\u91cd\u8981\n\n  const stack = [root];\n  let current = null;\n  while ((current = stack.shift())) {\n    const left = current.left;\n    const right = current.right;\n    current.right = left;\n    current.left = right;\n    if (left) {\n      stack.push(left);\n    }\n    if (right) {\n      stack.push(right);\n    }\n  }\n  return root;\n};\n"},{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def invertTree(self, root: TreeNode) -> TreeNode:\n        if not root:\n            return None\n        stack = [root]\n        while stack:\n            node = stack.pop(0)\n            node.left, node.right = node.right, node.left\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return root\n"}]},"majority-element-ii":{id:"229",name:"majority-element-ii",pre:[{text:"\u6469\u5c14\u6295\u7968\u6cd5",link:null,color:"orange"}],keyPoints:[{text:"\u6469\u5c14\u6295\u7968\u6cd5",link:null,color:"blue"},{text:"\u4e24\u4e2acounter",link:null,color:"blue"},{text:"\u6700\u540e\u5f97\u5230\u7684\u53ea\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u6709\u53ef\u80fd\u4e0d\u6ee1\u8db3\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1/3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/229.majority-element-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/229.majority-element-ii.md",code:[{language:"java",text:"\n/*\n * @lc app=leetcode id=229 lang=java\n *\n * [229] Majority Element II\n */\nclass Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (nums == null || nums.length == 0)\n            return res;\n        int n1 = nums[0], n2 = nums[0], cnt1 = 0, cnt2 = 0, len = nums.length;\n        for (int i = 0; i < len; i++) {\n            if (nums[i] == n1)\n                cnt1++;\n            else if (nums[i] == n2)\n                cnt2++;\n            else if (cnt1 == 0) {\n                n1 = nums[i];\n                cnt1 = 1;\n            } else if (cnt2 == 0) {\n                n2 = nums[i];\n                cnt2 = 1;\n            } else {\n                cnt1--;\n                cnt2--;\n            }\n        }\n        cnt1 = 0;\n        cnt2 = 0;\n        for (int i = 0; i < len; i++) {\n            if (nums[i] == n1)\n                cnt1++;\n            else if (nums[i] == n2)\n                cnt2++;\n        }\n        if (cnt1 > len / 3)\n            res.add(n1);\n        if (cnt2 > len / 3 && n1 != n2)\n            res.add(n2);\n        return res;\n    }\n}\n\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=229 lang=javascript\n *\n * [229] Majority Element II\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar majorityElement = function(nums) {\n  const res = [];\n  const len = nums.length;\n  let n1 = null,\n    n2 = null,\n    cnt1 = 0,\n    cnt2 = 0;\n\n  for (let i = 0; i < len; i++) {\n    if (n1 === nums[i]) {\n      cnt1++;\n    } else if (n2 === nums[i]) {\n      cnt2++;\n    } else if (cnt1 === 0) {\n      n1 = nums[i];\n      cnt1++;\n    } else if (cnt2 === 0) {\n      n2 = nums[i];\n      cnt2++;\n    } else {\n      cnt1--;\n      cnt2--;\n    }\n  }\n\n  cnt1 = 0;\n  cnt2 = 0;\n\n  for (let i = 0; i < len; i++) {\n    if (n1 === nums[i]) {\n      cnt1++;\n    } else if (n2 === nums[i]) {\n      cnt2++;\n    }\n  }\n\n  if (cnt1 > (len / 3) >>> 0) {\n    res.push(n1);\n  }\n  if (cnt2 > (len / 3) >>> 0) {\n    res.push(n2);\n  }\n\n  return res;\n};\n\n"}]},"kth-smallest-element-in-a-bst":{id:"230",name:"kth-smallest-element-in-a-bst",pre:[{text:"\u4e2d\u5e8f\u904d\u5386",link:null,color:"red"}],keyPoints:[{text:"\u4e2d\u5e8f\u904d\u5386",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/230.kth-smallest-element-in-a-bst.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/230.kth-smallest-element-in-a-bst.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nprivate int count = 1;\nprivate int res;\n\npublic int KthSmallest (TreeNode root, int k) {\n    inorder(root, k);\n    return res;\n}\n\npublic void inorder (TreeNode root, int k) {\n    if (root == null) return;\n\n    inorder(root.left, k);\n\n    if (count++ == k) {\n        res = root.val;\n        return;\n    }\n    \n    inorder(root.right, k);\n}\n"},{language:"js",text:"\n\n\n/*\n * @lc app=leetcode id=230 lang=javascript\n *\n * [230] Kth Smallest Element in a BST\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function(root, k) {\n    const stack = [root];\n    let cur = root;\n    let i = 0;\n\n    function insertAllLefts(cur) {\n        while(cur && cur.left) {\n            const l = cur.left;\n            stack.push(l);\n            cur = l;\n        }\n    }\n    insertAllLefts(cur);\n\n    while(cur = stack.pop()) {\n        i++;\n        if (i === k) return cur.val;\n        const r = cur.right;\n\n        if (r) {\n            stack.push(r);\n            insertAllLefts(r);\n        }\n    }\n\n    return -1;\n\n    \n};\n"},{language:"js",text:"\n\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\nfunction nodeCount(node) {\n    if (node === null) return 0;\n    \n    const l = nodeCount(node.left);\n    const r = nodeCount(node.right);\n    \n    return 1 + l + r;\n}\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function(root, k) {\n    const c = nodeCount(root.left);\n    if (c === k - 1) return root.val;\n    else if (c < k - 1) return kthSmallest(root.right, k - c - 1);\n    return kthSmallest(root.left, k)\n};\n\n"}]},"implement-queue-using-stacks":{id:"232",name:"implement-queue-using-stacks",pre:[{text:"\u6808",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"red"}],keyPoints:[{text:"\u5728push\u7684\u65f6\u5019\u5229\u7528\u8f85\u52a9\u6808(\u53cc\u6808)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"bloomberg"},{name:"microsoft"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/232.implement-queue-using-stacks.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/232.implement-queue-using-stacks.md",code:[{language:"java",text:"\nclass MyQueue {\n    Stack<Integer> pushStack = new Stack<> ();\n    Stack<Integer> popStack = new Stack<> ();\n\n    /** Initialize your data structure here. */\n    public MyQueue() {\n\n    }\n    \n    /** Push element x to the back of queue. */\n    public void push(int x) {\n        while (!popStack.isEmpty()) {\n            pushStack.push(popStack.pop());\n        }\n        pushStack.push(x);\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    public int pop() {\n        while (!pushStack.isEmpty()) {\n            popStack.push(pushStack.pop());\n        }\n        return popStack.pop();\n    }\n    \n    /** Get the front element. */\n    public int peek() {\n        while (!pushStack.isEmpty()) {\n            popStack.push(pushStack.pop());\n        }\n        return popStack.peek();\n    }\n    \n    /** Returns whether the queue is empty. */\n    public boolean empty() {\n        return pushStack.isEmpty() && popStack.isEmpty();\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=232 lang=javascript\n *\n * [232] Implement Queue using Stacks\n */\n/**\n * Initialize your data structure here.\n */\nvar MyQueue = function() {\n  // tag: queue stack array\n  this.stack = [];\n  this.helperStack = [];\n};\n\n/**\n * Push element x to the back of queue.\n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n  let cur = null;\n  while ((cur = this.stack.pop())) {\n    this.helperStack.push(cur);\n  }\n  this.helperStack.push(x);\n\n  while ((cur = this.helperStack.pop())) {\n    this.stack.push(cur);\n  }\n};\n\n/**\n * Removes the element from in front of queue and returns that element.\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n  return this.stack.pop();\n};\n\n/**\n * Get the front element.\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n  return this.stack[this.stack.length - 1];\n};\n\n/**\n * Returns whether the queue is empty.\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n  return this.stack.length === 0;\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */\n"},{language:"py",text:'\nclass MyQueue:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.stack = []\n        self.help_stack = []\n\n    def push(self, x: int) -> None:\n        """\n        Push element x to the back of queue.\n        """\n        while self.stack:\n            self.help_stack.append(self.stack.pop())\n        self.help_stack.append(x)\n        while self.help_stack:\n            self.stack.append(self.help_stack.pop())\n\n    def pop(self) -> int:\n        """\n        Removes the element from in front of queue and returns that element.\n        """\n        return self.stack.pop()\n\n    def peek(self) -> int:\n        """\n        Get the front element.\n        """\n        return self.stack[-1]\n\n    def empty(self) -> bool:\n        """\n        Returns whether the queue is empty.\n        """\n        return not bool(self.stack)\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()\n'}]},"lowest-common-ancestor-of-a-binary-tree":{id:"236",name:"lowest-common-ancestor-of-a-binary-tree",pre:[{text:"\u9012\u5f52",link:null,color:"orange"}],keyPoints:[{text:"\u7528\u9012\u5f52\u7684\u601d\u8def\u53bb\u601d\u8003\u6811",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/236.lowest-common-ancestor-of-a-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/236.lowest-common-ancestor-of-a-binary-tree.md",code:[{language:"js",text:"\n  // \u5982\u679c\u6211\u4eec\u627e\u5230\u4e86p\uff0c\u76f4\u63a5\u8fdb\u884c\u8fd4\u56de\uff0c\u90a3\u5982\u679c\u4e0b\u9762\u5c31\u662fq\u5462\uff1f \u5176\u5b9e\u8fd9\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u8fd8\u662f\u8981\u591a\u8003\u8651\u4e00\u4e0b\n  if (!root || root === p || root === q) return root;\n  const left = lowestCommonAncestor(root.left, p, q); // \u53bb\u5de6\u8fb9\u627e\uff0c\u6211\u4eec\u671f\u671b\u8fd4\u56de\u627e\u5230\u7684\u8282\u70b9\n  const right = lowestCommonAncestor(root.right, p, q);// \u53bb\u53f3\u8fb9\u627e\uff0c\u6211\u4eec\u671f\u671b\u8fd4\u56de\u627e\u5230\u7684\u8282\u70b9\n  if (!left) return right; // \u5de6\u5b50\u6811\u627e\u4e0d\u5230\uff0c\u8fd4\u56de\u53f3\u5b50\u6811\n  if (!right) return left; // \u53f3\u5b50\u6811\u627e\u4e0d\u5230\uff0c\u8fd4\u56de\u5de6\u5b50\u6811\n  return root; // \u5de6\u53f3\u5b50\u6811\u5206\u522b\u6709\u4e00\u4e2a\uff0c\u5219\u8fd4\u56deroot\n\n"},{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, p, q) {\n  if (!root || root === p || root === q) return root;\n  const left = lowestCommonAncestor(root.left, p, q);\n  const right = lowestCommonAncestor(root.right, p, q);\n  if (!left) return right; // \u5de6\u5b50\u6811\u627e\u4e0d\u5230\uff0c\u8fd4\u56de\u53f3\u5b50\u6811\n  if (!right) return left; // \u53f3\u5b50\u6811\u627e\u4e0d\u5230\uff0c\u8fd4\u56de\u5de6\u5b50\u6811\n  return root; // \u5de6\u53f3\u5b50\u6811\u5206\u522b\u6709\u4e00\u4e2a\uff0c\u5219\u8fd4\u56deroot\n};\n"}]},"product-of-array-except-self":{id:"238",name:"product-of-array-except-self",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"}],keyPoints:[{text:"\u4e24\u6b21\u904d\u5386\uff0c\u4e00\u6b21\u6b63\u5411\uff0c\u4e00\u6b21\u53cd\u5411\u3002",link:null,color:"blue"},{text:"\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\uff0c\u7b2ci\u9879\u4ee3\u8868\u524di\u4e2a\u5143\u7d20\uff08\u4e0d\u5305\u62eci\uff09\u7684\u4e58\u79ef",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/238.product-of-array-except-self.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/238.product-of-array-except-self.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function(nums) {\n  const ret = [];\n\n  for (let i = 0, temp = 1; i < nums.length; i++) {\n    ret[i] = temp;\n    temp *= nums[i];\n  }\n  // \u6b64\u65f6ret[i]\u5b58\u653e\u7684\u662f\u524di\u4e2a\u5143\u7d20\u76f8\u4e58\u7684\u7ed3\u679c(\u4e0d\u5305\u542b\u7b2ci\u4e2a)\n\n  // \u5982\u679c\u6ca1\u6709\u4e0a\u9762\u7684\u5faa\u73af\u7684\u8bdd\uff0c\n  // ret\u7ecf\u8fc7\u4e0b\u9762\u7684\u5faa\u73af\u4f1a\u53d8\u6210ret[i]\u5b58\u653e\u7684\u662f\u540ei\u4e2a\u5143\u7d20\u76f8\u4e58\u7684\u7ed3\u679c(\u4e0d\u5305\u542b\u7b2ci\u4e2a)\n\n  // \u6211\u4eec\u7684\u76ee\u6807\u662fret[i]\u5b58\u653e\u7684\u6240\u6709\u6570\u5b57\u76f8\u4e58\u7684\u7ed3\u679c(\u4e0d\u5305\u542b\u7b2ci\u4e2a)\n\n  // \u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e8e\u4e0a\u8ff0\u7684\u5faa\u73af\u4ea7\u751f\u7684ret[i]\u57fa\u7840\u4e0a\u8fd0\u7b97\u5373\u53ef\n  for (let i = nums.length - 1, temp = 1; i >= 0; i--) {\n    ret[i] *= temp;\n    temp *= nums[i];\n  }\n  return ret;\n};\n"}]},"sliding-window-maximum":{id:"239",name:"sliding-window-maximum",pre:[{text:"\u961f\u5217",link:null,color:"volcano"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"}],keyPoints:[{text:"\u53cc\u7aef\u961f\u5217\u7b80\u5316\u65f6\u95f4\u590d\u6742\u5ea6",link:null,color:"blue"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/239.sliding-window-maximum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/239.sliding-window-maximum.md",code:[{language:"js",text:"\nvar maxSlidingWindow = function(nums, k) {\n  // bad \u65f6\u95f4\u590d\u6742\u5ea6O(n * k)\n  if (nums.length === 0 || k === 0) return [];\n  let slideWindow = [];\n  const ret = [];\n  for (let i = 0; i < nums.length - k + 1; i++) {\n    for (let j = 0; j < k; j++) {\n      slideWindow.push(nums[i + j]);\n    }\n    ret.push(Math.max(...slideWindow));\n    slideWindow = [];\n  }\n  return ret;\n};\n"},{language:"js",text:"\nvar maxSlidingWindow = function(nums, k) {\n  // \u53cc\u7aef\u961f\u5217\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6, \u65f6\u95f4\u590d\u6742\u5ea6O(n)\n  const deque = []; // \u5b58\u653e\u5728\u63a5\u4e0b\u6765\u7684\u6ed1\u52a8\u7a97\u53e3\u53ef\u80fd\u6210\u4e3a\u6700\u5927\u503c\u7684\u6570\n  const ret = [];\n  for (let i = 0; i < nums.length; i++) {\n    // \u6e05\u7a7a\u5931\u6548\u5143\u7d20\n    while (deque[0] < i - k + 1) {\n      deque.shift();\n    }\n\n    while (nums[deque[deque.length - 1]] < nums[i]) {\n      deque.pop();\n    }\n\n    deque.push(i);\n\n    if (i >= k - 1) {\n      ret.push(nums[deque[0]]);\n    }\n  }\n  return ret;\n};\n"},{language:"py",text:"\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        if k == 0: return []\n        res = []\n        for r in range(k - 1, len(nums)):\n            res.append(max(nums[r - k + 1:r + 1]))\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        deque, res, n = [], [], len(nums)\n        for i in range(n):\n            while deque and deque[0] < i - k + 1:\n                deque.pop(0)\n            while deque and nums[i] > nums[deque[-1]]:\n                deque.pop(-1)\n            deque.append(i)\n            if i >= k - 1: res.append(nums[deque[0]])\n        return res\n\n\n"}]},"search-a-2-d-matrix-ii":{id:"240",name:"search-a-2-d-matrix-ii",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"}],keyPoints:[{text:"\u4ece\u89d2\u843d\u5f00\u59cb\u904d\u5386\uff0c\u5229\u7528\u9012\u589e\u7684\u7279\u6027\u7b80\u5316\u65f6\u95f4\u590d\u6742\u5ea6",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/240.search-a-2-d-matrix-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/240.search-a-2-d-matrix-ii.md",code:[{language:"js",text:"\n\n/*\n * @lc app=leetcode id=240 lang=javascript\n *\n * [240] Search a 2D Matrix II\n *\n * https://leetcode.com/problems/search-a-2d-matrix-ii/description/\n *\n * \n */\n/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n    if (!matrix || matrix.length === 0) return false;\n\n    let colIndex = 0;\n    let rowIndex = matrix.length - 1;\n    while(rowIndex > 0 && target < matrix[rowIndex][colIndex]) {\n        rowIndex --;\n    }\n\n    while(colIndex < matrix[0].length) {\n        if (target === matrix[rowIndex][colIndex]) return true;\n        if (target > matrix[rowIndex][colIndex]) {\n            colIndex ++;\n        } else if (rowIndex > 0){\n            rowIndex --;\n        } else {\n            return false;\n        }\n    }\n\n    return  false;\n};\n"},{language:"py",text:"\nclass Solution:\n    def searchMatrix(self, matrix, target):\n        m = len(matrix)\n        if m == 0:\n            return False\n        n = len(matrix[0])\n        i = m - 1\n        j = 0\n\n        while i >= 0 and j < n:\n            if matrix[i][j] == target:\n                return True\n            if matrix[i][j] > target:\n                i -= 1\n            else:\n                j += 1\n        return False\n"}]},"ugly-number":{id:"263",name:"ugly-number",pre:[{text:"\u6570\u5b66",link:null,color:"geekblue"},{text:"\u56e0\u6570\u5206\u89e3",link:null,color:"lime"}],keyPoints:[{text:"\u6570\u8bba",link:null,color:"blue"},{text:"\u56e0\u6570\u5206\u89e3",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/263.ugly-number.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/263.ugly-number.md",code:[{language:"js",text:"\n\n  while(num % 2 === 0)   num = num / 2;\n  while(num % 3 === 0)   num = num / 3;\n  while(num % 5 === 0)   num = num / 5;\n\n  return num === 1;\n\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=263 lang=javascript\n *\n * [263] Ugly Number\n */\n/**\n * @param {number} num\n * @return {boolean}\n */\nvar isUgly = function(num) {\n  // TAG: \u6570\u8bba\n  if (num <= 0) return false;\n  if (num === 1) return true;\n\n  const list = [2, 3, 5];\n\n  if (list.includes(num)) return true;\n\n  for (let i of list) {\n    if (num % i === 0) return isUgly(Math.floor(num / i));\n  }\n  return false;\n};\n"},{language:"py",text:"\n# \u975e\u9012\u5f52\u5199\u6cd5\nclass Solution:\n    def isUgly(self, num: int) -> bool:\n        if num <= 0:\n            return False\n        for i in (2, 3, 5):\n            while num % i == 0:\n                num /= i\n        return num == 1\n"}]},"perfect-squares":{id:"279",name:"perfect-squares",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u5982\u679c\u7528\u9012\u5f52+\u7f13\u5b58\uff0c\u7f13\u5b58\u7684\u8bbe\u8ba1\u5f88\u91cd\u8981\u6211\u7684\u505a\u6cd5\u662fkey\u5c31\u662fn\uff0cvalue\u662f\u4ee5n\u4e3a\u8d77\u70b9\uff0c\u5230\u8fbe\u5e95\u7aef\u7684\u6df1\u5ea6\u3002\u4e0b\u6b21\u53d6\u51fa\u7f13\u5b58\u7684\u65f6\u5019\u7528\u5f53\u524d\u7684level+\u5b58\u7684\u6df1\u5ea6\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684level.",link:null,color:"blue"},{text:"\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u7684\u6838\u5fc3\u70b9\u8fd8\u662f\u9009\u548c\u4e0d\u9009\u7684\u95ee\u9898```jsfor(leti=1;i<=n;i++){for(letj=1;j*j<=i;j++){//\u4e0d\u9009\uff08dp[i]\uff09\u8fd8\u662f\u9009\uff08dp[i",link:null,color:"blue"},{text:"j*j]\uff09dp[i]=Math.min(dp[i],dp[i",link:null,color:"blue"},{text:"j*j]+1);}}```",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/279.perfect-squares.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/279.perfect-squares.md",code:[{language:"js",text:"\nconst mapper = {};\n\nfunction d(n, level) {\n  if (n === 0) return level;\n\n  let i = 1;\n  const arr = [];\n\n  while (n - i * i >= 0) {\n    const hit = mapper[n - i * i];\n    if (hit) {\n      arr.push(hit + level);\n    } else {\n      const depth = d(n - i * i, level + 1) - level;\n      mapper[n - i * i] = depth;\n      arr.push(depth + level);\n    }\n    i++;\n  }\n\n  return Math.min(...arr);\n}\n/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares = function(n) {\n  return d(n, 0);\n};\n"},{language:"js",text:"\nfor (let i = 1; i <= n; i++) {\n  for (let j = 1; j * j <= i; j++) {\n    // \u4e0d\u9009\uff08dp[i]\uff09 \u8fd8\u662f  \u9009\uff08dp[i - j * j]\uff09\n    dp[i] = Math.min(dp[i], dp[i - j * j] + 1);\n  }\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=279 lang=javascript\n *\n * [279] Perfect Squares\n *\n * https://leetcode.com/problems/perfect-squares/description/\n *\n * algorithms\n * Medium (40.98%)\n * Total Accepted:    168.2K\n * Total Submissions: 408.5K\n * Testcase Example:  '12'\n *\n * Given a positive integer n, find the least number of perfect square numbers\n * (for example, 1, 4, 9, 16, ...) which sum to n.\n *\n * Example 1:\n *\n *\n * Input: n = 12\n * Output: 3\n * Explanation: 12 = 4 + 4 + 4.\n *\n * Example 2:\n *\n *\n * Input: n = 13\n * Output: 2\n * Explanation: 13 = 4 + 9.\n */\n/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares = function(n) {\n  if (n <= 0) {\n    return 0;\n  }\n\n  const dp = Array(n + 1).fill(Number.MAX_VALUE);\n  dp[0] = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j * j <= i; j++) {\n      // \u4e0d\u9009\uff08dp[i]\uff09 \u8fd8\u662f  \u9009\uff08dp[i - j * j]\uff09\n      dp[i] = Math.min(dp[i], dp[i - j * j] + 1);\n    }\n  }\n\n  return dp[n];\n};\n"}]},"move-zeroes":{id:"283",name:"move-zeroes",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u53cc\u6307\u9488",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"bloomberg"},{name:"facebook"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/283.move-zeroes.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/283.move-zeroes.md",code:[{language:"java",text:"\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        // \u53cc\u6307\u9488\n        int i = 0;\n        for(int j=0; j<nums.length; j++)\n        {\n            // \u4e0d\u4e3a0\uff0c\u524d\u79fb\n            if(nums[j] != 0)\n            {\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n                i++;\n            }\n        }\n    }\n}\n"},{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function(nums) {\n    let index = 0;\n    for(let i = 0; i < nums.length; i++) {\n        const num = nums[i];\n        if (num !== 0) {\n            nums[index++] = num;\n        }\n    }\n\n    for(let i = index; i < nums.length; i++) {\n        nums[index++] = 0;\n    }\n};\n"},{language:"py",text:'\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        """\n        Do not return anything, modify nums in-place instead.\n        """\n        slow = fast = 0\n        while fast < len(nums):\n            if nums[fast] != 0:\n                nums[fast], nums[slow] = nums[slow], nums[fast]\n                slow += 1\n            fast += 1\n'}]},"find-median-from-data-stream":{id:"295",name:"find-median-from-data-stream",pre:[{text:"\u5806",link:null,color:"green"},{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u7528\u4e24\u4e2a\u5806\uff08\u4e00\u4e2a\u5927\u9876\u5806\uff0c\u4e00\u4e2a\u5c0f\u9876\u5806\uff09\u6765\u7b80\u5316\u65f6\u95f4\u590d\u6742\u5ea6",link:null,color:"blue"},{text:"\u7528\u4f18\u5148\u7ea7\u961f\u5217\u7b80\u5316\u64cd\u4f5c>JavaScript\u4e0d\u50cfJava\uff0cC++\u7b49\u8bed\u8a00\u90fd\u6709`\u4f18\u5148\u7ea7\u961f\u5217`\u4e2d\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64\u5927\u5bb6\u53ef\u4ee5\u4f7f\u7528\u793e\u533a\u7684\u5b9e\u73b0>\u4e2a\u4eba\u8ba4\u4e3a\u6ca1\u6709\u975e\u8981\u7ea0\u7ed3\u4e8e\u4f18\u5148\u7ea7\u961f\u5217\u600e\u4e48\u5b9e\u73b0\uff0c\u81f3\u5c11\u8fd9\u9053\u9898\u4e0d\u662f\u8003\u8fd9\u4e2a\u7684>\u4f18\u5148\u7ea7\u961f\u5217\u7684\u5b9e\u73b0\u4e2a\u4eba\u8ba4\u4e3a\u5df2\u7ecf\u8d85\u8fc7\u4e86\u8fd9\u9053\u9898\u60f3\u8003\u5bdf\u7684\u8303\u7574",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/295.find-median-from-data-stream.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/295.find-median-from-data-stream.md",code:[{language:"js",text:"\nfunction findMedian(a) {\n  return a.length % 2 === 0\n    ? (a[a.length >> 1] + a[a.length >> (1 + 1)]) / 2\n    : a[a.length >> 1];\n}\n"},{language:"js",text:"\n/**\n * initialize your data structure here.\n */\nvar MedianFinder = function() {\n  this.maxHeap = [];\n  this.minHeap = [];\n};\n\nfunction minHeapify() {\n  this.minHeap.unshift(null);\n  const a = this.minHeap;\n\n  // \u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u9009\u7528\u4e86\u7c97\u66b4\u7684\u5b9e\u73b0\n  // \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n  // \u5176\u5b9e\u53ef\u4ee5\u964d\u5230O(logn)\uff0c \u5177\u4f53\u7ec6\u8282\u6211\u4e0d\u60f3\u5728\u8fd9\u91cc\u8bb2\u89e3\u548c\u5b9e\u73b0\n  for (let i = a.length - 1; i >> 1 > 0; i--) {\n    // \u81ea\u4e0b\u5f80\u4e0a\u5806\u5316\n    if (a[i] < a[i >> 1]) { // \u5982\u679c\u5b50\u5143\u7d20\u66f4\u5c0f\uff0c\u5219\u4ea4\u6362\u4f4d\u7f6e\n      const temp = a[i];\n      this.minHeap[i] = a[i >> 1];\n      this.minHeap[i >> 1] = temp;\n    }\n  }\n  this.minHeap.shift(null);\n}\n\nfunction maxHeapify() {\n  this.maxHeap.unshift(null);\n  const a = this.maxHeap;\n\n  // \u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u9009\u7528\u4e86\u7c97\u66b4\u7684\u5b9e\u73b0\n  // \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n  // \u5176\u5b9e\u53ef\u4ee5\u964d\u5230O(logn)\uff0c \u5177\u4f53\u7ec6\u8282\u6211\u4e0d\u60f3\u5728\u8fd9\u91cc\u8bb2\u89e3\u548c\u5b9e\u73b0\n  for (let i = a.length - 1; i >> 1 > 0; i--) {\n    // \u81ea\u4e0b\u5f80\u4e0a\u5806\u5316\n    if (a[i] > a[i >> 1]) { // \u5982\u679c\u5b50\u5143\u7d20\u66f4\u5927\uff0c\u5219\u4ea4\u6362\u4f4d\u7f6e\n      const temp = a[i];\n      this.maxHeap[i] = a[i >> 1];\n      this.maxHeap[i >> 1] = temp;\n    }\n  }\n  this.maxHeap.shift(null);\n}\n\n/**\n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n  // \u4e3a\u4e86\u5927\u5bb6\u5bb9\u6613\u7406\u89e3\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u5199\u7684\u6bd4\u8f83\u5197\u4f59\n\n  // \u63d2\u5165\n  if (num >= (this.minHeap[0] || Number.MIN_VALUE)) {\n    this.minHeap.push(num);\n  } else {\n    this.maxHeap.push(num);\n  }\n  // \u8c03\u6574\u4e24\u4e2a\u5806\u7684\u8282\u70b9\u6570\u91cf\u5e73\u8861\n  // \u4f7f\u5f97\u5927\u9876\u5806\u7684\u6570\u91cf\u6700\u591a\u5927\u4e8e\u5c0f\u9876\u5806\u4e00\u4e2a\uff0c \u4e14\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u5c0f\u9876\u5806\u6570\u91cf\n  if (this.maxHeap.length > this.minHeap.length + 1) {\n    // \u5927\u9876\u5806\u7684\u5806\u9876\u5143\u7d20\u79fb\u52a8\u5230\u5c0f\u9876\u5806\n    this.minHeap.push(this.maxHeap.shift());\n  }\n\n  if (this.minHeap.length > this.maxHeap.length) {\n    // \u5c0f\u9876\u5806\u7684\u5806\u9876\u5143\u7d20\u79fb\u52a8\u5230\u5927\u9876\u5806\n    this.maxHeap.push(this.minHeap.shift());\n  }\n\n  // \u8c03\u6574\u5806\u9876\u5143\u7d20\n  if (this.maxHeap[0] > this.minHeap[0]) {\n    const temp = this.maxHeap[0];\n    this.maxHeap[0] = this.minHeap[0];\n    this.minHeap[0] = temp;\n  }\n\n  // \u5806\u5316\n  maxHeapify.call(this);\n  minHeapify.call(this);\n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n  if ((this.maxHeap.length + this.minHeap.length) % 2 === 0) {\n    return (this.minHeap[0] + this.maxHeap[0]) / 2;\n  } else {\n    return this.maxHeap[0];\n  }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */\n"},{language:"js",text:"\n\nthis.heap.unshift(null);\n// ....\nthis.heap.shift(null);\n\n"},{language:"js",text:'\n/*\n * @lc app=leetcode id=295 lang=javascript\n *\n * [295] Find Median from Data Stream\n *\n * https://leetcode.com/problems/find-median-from-data-stream/description/\n *\n * algorithms\n * Hard (35.08%)\n * Total Accepted:    101.2K\n * Total Submissions: 282.4K\n * Testcase Example:  \'["MedianFinder","addNum","addNum","findMedian","addNum","findMedian"]\\n[[],[1],[2],[],[3],[]]\'\n *\n * Median is the middle value in an ordered integer list. If the size of the\n * list is even, there is no middle value. So the median is the mean of the two\n * middle value.\n * For example,\n *\n * [2,3,4], the median is 3\n *\n * [2,3], the median is (2 + 3) / 2 = 2.5\n *\n * Design a data structure that supports the following two operations:\n *\n *\n * void addNum(int num) - Add a integer number from the data stream to the data\n * structure.\n * double findMedian() - Return the median of all elements so far.\n *\n *\n *\n *\n * Example:\n *\n *\n * addNum(1)\n * addNum(2)\n * findMedian() -> 1.5\n * addNum(3)\n * findMedian() -> 2\n *\n *\n *\n *\n * Follow up:\n *\n *\n * If all integer numbers from the stream are between 0\xa0and 100, how would you\n * optimize it?\n * If 99% of all integer numbers from the stream are between 0 and 100, how\n * would you optimize it?\n *\n *\n */\n/**\n * initialize your data structure here.\n */\nvar MedianFinder = function() {\n  this.maxHeap = new PriorityQueue((a, b) => a - b);\n  this.minHeap = new PriorityQueue((a, b) => b - a);\n};\n\n/**\n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n    // \u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u5efa\u7acb\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u9876\u5806\uff0c\u4e00\u4e2a\u5c0f\u9876\u5806\n    // \u7ed3\u5408\u4e2d\u4f4d\u6570\u7684\u7279\u70b9\n    // \u8fd9\u4e24\u4e2a\u5806\u9700\u8981\u6ee1\u8db3:\n    // 1. \u5927\u9876\u5806\u5143\u7d20\u90fd\u6bd4\u5c0f\u9876\u5806\u5c0f\uff08\u7531\u4e8e\u5806\u7684\u7279\u70b9\u5176\u5b9e\u53ea\u8981\u6bd4\u8f83\u5806\u9876\u5373\u53ef\uff09\n    // 2. \u5927\u9876\u5806\u5143\u7d20\u4e0d\u5c0f\u4e8e\u5c0f\u9876\u5806\uff0c\u4e14\u6700\u591a\u6bd4\u5c0f\u9876\u5806\u591a\u4e00\u4e2a\u5143\u7d20\n\n    // \u6ee1\u8db3\u4e0a\u9762\u4e24\u4e2a\u6761\u4ef6\u7684\u8bdd\uff0c\u5982\u679c\u60f3\u8981\u627e\u5230\u4e2d\u4f4d\u6570\uff0c\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\n    // \u5982\u679c\u4e24\u4e2a\u5806\u6570\u91cf\u76f8\u7b49\uff08\u672c\u8d28\u662f\u603b\u6570\u4e3a\u5076\u6570\uff09, \u5c31\u4e24\u4e2a\u5806\u9876\u5143\u7d20\u7684\u5e73\u5747\u6570\n    // \u5982\u679c\u4e24\u4e2a\u5806\u6570\u91cf\u4e0d\u76f8\u7b49\uff08\u672c\u8d28\u662f\u603b\u6570\u4e3a\u5947\u6570\uff09\uff0c \u5c31\u53d6\u5927\u9876\u5806\u7684\u5806\u9876\u5143\u7d20\n\n    // \u95ee\u9898\u5982\u679c\u4fdd\u8bc1\u6ee1\u8db3\u4e0a\u8ff0\u4e24\u4e2a\u7279\u70b9\n\n    // 1. \u4fdd\u8bc1\u7b2c\u4e00\u70b9\n    this.maxHeap.enq(num);\n    // \u7531\u4e8e\u5c0f\u9876\u5806\u7684\u6240\u6709\u6570\u90fd\u6765\u81ea\u5927\u9876\u5806\u7684\u5806\u9876\u5143\u7d20\uff08\u6700\u5927\u503c\uff09\n    // \u56e0\u6b64\u53ef\u4ee5\u4fdd\u8bc1\u7b2c\u4e00\u70b9\n    this.minHeap.enq(this.maxHeap.deq());\n\n    // 2. \u4fdd\u8bc1\u7b2c\u4e8c\u70b9\n    if (this.maxHeap.size() < this.minHeap.size()){\n        this.maxHeap.enq(this.minHeap.deq());\n    }\n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n    if (this.maxHeap.size() == this.minHeap.size()) return (this.maxHeap.peek() + this.minHeap.peek()) /  2.0;\n    else return this.maxHeap.peek();\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */\n\n'}]},"remove-invalid-parentheses":{id:"301",name:"remove-invalid-parentheses",pre:[{text:"BFS",link:null,color:"purple"},{text:"\u961f\u5217",link:null,color:"volcano"}],keyPoints:[{text:"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386",link:null,color:"blue"},{text:"\u4f7f\u7528\u961f\u5217\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u4f7f\u7528\u4e00\u4e2avisited\u7684mapper\uff0c\u6765\u907f\u514d\u904d\u5386\u540c\u6837\u7684\u5b57\u7b26\u4e32",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/301.remove-invalid-parentheses.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/301.remove-invalid-parentheses.md",code:[{language:"js",text:'\n/*\n * @lc app=leetcode id=301 lang=javascript\n *\n * [301] Remove Invalid Parentheses\n *\n * https://leetcode.com/problems/remove-invalid-parentheses/description/\n *\n * algorithms\n * Hard (38.52%)\n * Total Accepted:    114.3K\n * Total Submissions: 295.4K\n * Testcase Example:  \'"()())()"\'\n *\n * Remove the minimum number of invalid parentheses in order to make the input\n * string valid. Return all possible results.\n *\n * Note:\xa0The input string may contain letters other than the parentheses ( and\n * ).\n *\n * Example 1:\n *\n *\n * Input: "()())()"\n * Output: ["()()()", "(())()"]\n *\n *\n * Example 2:\n *\n *\n * Input: "(a)())()"\n * Output: ["(a)()()", "(a())()"]\n *\n *\n * Example 3:\n *\n *\n * Input: ")("\n * Output: [""]\n *\n */\nvar isValid = function(s) {\n  let openParenthes = 0;\n  for(let i = 0; i < s.length; i++) {\n    if (s[i] === \'(\') {\n      openParenthes++;\n    } else if (s[i] === \')\') {\n      if (openParenthes === 0) return false;\n      openParenthes--;\n    }\n  }\n  return openParenthes === 0;\n};\n/**\n * @param {string} s\n * @return {string[]}\n */\nvar removeInvalidParentheses = function(s) {\n  if (!s || s.length === 0) return [""];\n  const ret = [];\n  const queue = [s];\n  const visited = {};\n  let current = null;\n  let removedParentheses = 0; // \u53ea\u8bb0\u5f55\u6700\u5c0f\u6539\u52a8\n\n  while ((current = queue.shift())) {\n    let hit = isValid(current);\n    if (hit) {\n      if (!removedParentheses) {\n       removedParentheses =  s.length - current.length\n      }\n      if (s.length - current.length > removedParentheses) return ret.length === 0 ? [""] : ret;;\n      ret.unshift(current);\n      continue;\n    }\n    for (let i = 0; i < current.length; i++) {\n      if (current[i] !== \')\' && current[i] !== \'(\') continue;\n      const subString = current.slice(0, i).concat(current.slice(i + 1));\n      if (visited[subString]) continue;\n      visited[subString] = true;\n      queue.push(subString);\n    }\n  }\n\n  return ret.length === 0 ? [""] : ret;\n};\n'}]},"best-time-to-buy-and-sell-stock-with-cooldown":{id:"309",name:"best-time-to-buy-and-sell-stock-with-cooldown",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u591a\u72b6\u6001\u52a8\u6001\u89c4\u5212",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/309.best-time-to-buy-and-sell-stock-with-cooldown.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/309.best-time-to-buy-and-sell-stock-with-cooldown.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=309 lang=javascript\n *\n * [309] Best Time to Buy and Sell Stock with Cooldown\n *\n */\n/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n  if (prices == null || prices.length <= 1) return 0;\n\n  // \u5b9a\u4e49\u72b6\u6001\u53d8\u91cf\n  const buy = [];\n  const sell = [];\n  // \u5bfb\u5e38\n  buy[0] = -prices[0];\n  buy[1] = Math.max(-prices[0], -prices[1]);\n  sell[0] = 0;\n  sell[1] = Math.max(0, prices[1] - prices[0]);\n  for (let i = 2; i < prices.length; i++) {\n    // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n    // \u7b2ci\u5929\u53ea\u80fd\u662f\u4e70\u6216\u8005cooldown\n    // \u5982\u679c\u4e70\u5229\u6da6\u5c31\u662fsell[i - 2] - prices[i], \u6ce8\u610f\u8fd9\u91cc\u662fi - 2\uff0c\u4e0d\u662f i-1 \uff0c\u56e0\u4e3a\u6709cooldown\u7684\u9650\u5236\n    // cooldown\u5c31\u662fbuy[i -1]\n    buy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]);\n    // \u7b2ci\u5929\u53ea\u80fd\u662f\u5356\u6216\u8005cooldown\n    // \u5982\u679c\u5356\u5229\u6da6\u5c31\u662fbuy[i  -1] + prices[i]\n    // cooldown\u5c31\u662fsell[i -1]\n    sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);\n  }\n\n  return Math.max(buy[prices.length - 1], sell[prices.length - 1], 0);\n};\n"}]},"burst-balloons":{id:"312",name:"burst-balloons",pre:[{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/312.burst-balloons.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/312.burst-balloons.md",code:[{language:"js",text:"\nvar maxCoins = function (nums) {\n  let res = Number.MIN_VALUE;\n  backtrack(nums, 0);\n  return res;\n  // \u56de\u6eaf\u6cd5\uff0c\u72b6\u6001\u6811\u5f88\u5927\n  function backtrack(nums, score) {\n    if (nums.length == 0) {\n      res = Math.max(res, score);\n      return;\n    }\n    for (let i = 0, n = nums.length; i < n; i++) {\n      let point =\n        (i - 1 < 0 ? 1 : nums[i - 1]) *\n        nums[i] *\n        (i + 1 >= n ? 1 : nums[i + 1]);\n      let tempNums = [].concat(nums);\n      // \u505a\u9009\u62e9 \u5728 nums \u4e2d\u5220\u9664\u5143\u7d20 nums[i]\n      nums.splice(i, 1);\n      // \u9012\u5f52\u56de\u6eaf\n      backtrack(nums, score + point);\n      // \u64a4\u9500\u9009\u62e9\n      nums = [...tempNums];\n    }\n  }\n};\n"},{language:"js",text:"\nvar maxCoins = function (nums) {\n  let n = nums.length;\n  // \u6dfb\u52a0\u4e24\u4fa7\u7684\u865a\u62df\u6c14\u7403\n  let points = [1, ...nums, 1];\n  let dp = Array.from(Array(n + 2), () => Array(n + 2).fill(0));\n  // \u6700\u540e\u4e00\u884c\u5f00\u59cb\u904d\u5386,\u4ece\u4e0b\u5f80\u4e0a\n  for (let i = n; i >= 0; i--) {\n    // \u4ece\u5de6\u5f80\u53f3\n    for (let j = i + 1; j < n + 2; j++) {\n      for (let k = i + 1; k < j; k++) {\n        dp[i][j] = Math.max(\n          dp[i][j],\n          points[j] * points[k] * points[i] + dp[i][k] + dp[k][j]\n        );\n      }\n    }\n  }\n  return dp[0][n + 1];\n};\n"},{language:"py",text:"\nclass Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        n = len(nums)\n        points = [1] + nums + [1]\n        dp = [[0] * (n + 2) for _ in range(n + 2)]\n\n        for i in range(n, -1, -1):\n            for j in range(i + 1, n + 2):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + points[i] * points[k] * points[j])\n        return dp[0][-1]\n"}]},"coin-change":{id:"322",name:"coin-change",pre:[{text:"\u8d2a\u5fc3\u7b97\u6cd5",link:null,color:"magenta"}],keyPoints:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"blue"},{text:"\u5b50\u95ee\u9898\u7528dp[i]\u6765\u8868\u793a\u7ec4\u6210i\u5757\u94b1\uff0c\u9700\u8981\u6700\u5c11\u7684\u786c\u5e01\u6570\uff0c\u90a3\u4e481.\u7b2cj\u4e2a\u786c\u5e01\u6211\u53ef\u4ee5\u9009\u62e9\u4e0d\u62ff\u8fd9\u4e2a\u65f6\u5019\uff0c\u786c\u5e01\u6570=dp[i]2.\u7b2cj\u4e2a\u786c\u5e01\u6211\u53ef\u4ee5\u9009\u62e9\u62ff\u8fd9\u4e2a\u65f6\u5019\uff0c\u786c\u5e01\u6570=dp[i",link:null,color:"blue"},{text:"coins[j]]+1",link:null,color:"blue"},{text:"\u548c\u80cc\u5305\u95ee\u9898\u4e0d\u540c\uff0c\u786c\u5e01\u662f\u53ef\u4ee5\u62ff\u4efb\u610f\u4e2a",link:null,color:"blue"},{text:"\u5bf9\u4e8e\u6bcf\u4e00\u4e2adp[i]\u6211\u4eec\u90fd\u9009\u62e9\u904d\u5386\u4e00\u904dcoin\uff0c\u4e0d\u65ad\u66f4\u65b0dp[i]",link:null,color:"blue"}],companies:[{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"},{name:"\u963f\u91cc\u5df4\u5df4\uff08\u76d2\u9a6c\u751f\u9c9c\uff09"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/322.coin-change.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/322.coin-change.md",code:[{language:"js",text:"\n\nvar coinChange = function(coins, amount) {\n    if (amount === 0) {\n      return 0;\n    }\n    const dp = Array(amount + 1).fill(Number.MAX_VALUE)\n    dp[0] = 0;\n    for (let i = 1; i < dp.length; i++) {\n      for (let j = 0; j < coins.length; j++) {\n        if (i - coins[j] >= 0) {\n          dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);\n        }\n      }\n    }\n\n    return dp[dp.length - 1] === Number.MAX_VALUE ? -1 : dp[dp.length - 1];\n\n\n};\n"},{language:"py",text:"\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        if amount < 0:\n            return - 1\n        dp = [[amount + 1 for _ in range(len(coins) + 1)]\n              for _ in range(amount + 1)]\n        # \u521d\u59cb\u5316\u7b2c\u4e00\u884c\u4e3a0\uff0c\u5176\u4ed6\u4e3a\u6700\u5927\u503c\uff08\u4e5f\u5c31\u662famount + 1\uff09\n\n        for j in range(len(coins) + 1):\n            dp[0][j] = 0\n\n        for i in range(1, amount + 1):\n            for j in range(1, len(coins) + 1):\n                if i - coins[j - 1] >= 0:\n                    dp[i][j] = min(\n                        dp[i][j - 1], dp[i - coins[j - 1]][j] + 1)\n                else:\n                    dp[i][j] = dp[i][j - 1]\n\n        return -1 if dp[-1][-1] == amount + 1 else dp[-1][-1]\n "},{language:"py",text:"\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [amount + 1] * (amount + 1)\n        dp[0] = 0\n\n        for i in range(1, amount + 1):\n            for j in range(len(coins)):\n                if i >= coins[j]:\n                    dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n\n        return -1 if dp[-1] == amount + 1 else dp[-1]\n"}]},"odd-even-linked-list":{id:"328",name:"odd-even-linked-list",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"}],keyPoints:[{text:"\u7528\u865a\u62df\u8282\u70b9\u6765\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u5faa\u73af\u7684\u7ed3\u675f\u6761\u4ef6\u8bbe\u7f6e\u4e3a`odd&&odd.next&&even&&even.next`,\u4e0d\u5e94\u8be5\u662f`odd&&even`,\u5426\u5219\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u590d\u6742\u4e86\u64cd\u4f5c",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/328.odd-even-linked-list.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/328.odd-even-linked-list.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=328 lang=javascript\n *\n * [328] Odd Even Linked List\n *\n *\n */\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar oddEvenList = function(head) {\n  if (!head || !head.next) return head;\n\n  const dummyHead1 = {\n    next: head\n  };\n  const dummyHead2 = {\n    next: head.next\n  };\n\n  let odd = dummyHead1.next;\n  let even = dummyHead2.next;\n\n  while (odd && odd.next && even && even.next) {\n    const oddNext = odd.next.next;\n    const evenNext = even.next.next;\n\n    odd.next = oddNext;\n    even.next = evenNext;\n\n    odd = oddNext;\n    even = evenNext;\n  }\n\n  odd.next = dummyHead2.next;\n\n  return dummyHead1.next;\n};\n"}]},"increasing-triplet-subsequence":{id:"334",name:"increasing-triplet-subsequence",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u7ef4\u62a4\u4e09\u4e2a\u53d8\u91cf\uff0c\u5206\u522b\u8bb0\u5f55\u6700\u5c0f\u503c\uff0c\u7b2c\u4e8c\u5c0f\u503c\uff0c\u7b2c\u4e09\u5c0f\u503c\u3002\u53ea\u8981\u6211\u4eec\u80fd\u591f\u586b\u6ee1\u8fd9\u4e09\u4e2a\u53d8\u91cf\u5c31\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse",link:null,color:"blue"}],companies:[{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/334.increasing-triplet-subsequence.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/334.increasing-triplet-subsequence.md",code:[{language:"js",text:"\n\n\n/*\n * @lc app=leetcode id=334 lang=javascript\n *\n * [334] Increasing Triplet Subsequence\n *\n * https://leetcode.com/problems/increasing-triplet-subsequence/description/\n *\n * algorithms\n * Medium (39.47%)\n * Total Accepted:    89.6K\n * Total Submissions: 226.6K\n * Testcase Example:  '[1,2,3,4,5]'\n *\n * Given an unsorted array return whether an increasing subsequence of length 3\n * exists or not in the array.\n * \n * Formally the function should:\n * \n * Return true if there exists i, j, k \n * such that arr[i] < arr[j] < arr[k] given 0 \u2264 i < j < k \u2264 n-1 else return\n * false.\n * \n * Note: Your algorithm should run in O(n) time complexity and O(1) space\n * complexity.\n * \n * \n * Example 1:\n * \n * \n * Input: [1,2,3,4,5]\n * Output: true\n * \n * \n *\n * Example 2:\n * \n * \n * Input: [5,4,3,2,1]\n * Output: false\n * \n * \n * \n */\n/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar increasingTriplet = function(nums) {\n    if (nums.length < 3) return false;\n    let n1 = Number.MAX_VALUE;\n    let n2 = Number.MAX_VALUE;\n\n    for(let i = 0; i < nums.length; i++) {\n        if (nums[i] <= n1) {\n            n1 = nums[i]\n        } else if (nums[i] <= n2) {\n            n2 = nums[i]\n        } else {\n            return true;\n        }\n    }\n\n    return false;\n};\n"}]},"self-crossing":{id:"335",name:"self-crossing",pre:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"}],keyPoints:[{text:"\u4e00\u5b9a\u8981\u753b\u56fe\u8f85\u52a9",link:null,color:"blue"},{text:"\u5bf9\u4e8e\u8fd9\u79cd$O(1)$\u7a7a\u95f4\u590d\u6742\u5ea6\u6709\u56fa\u5b9a\u7684\u5957\u8def\u3002\u5e38\u89c1\u7684\u6709\uff1a1.\u76f4\u63a5\u4fee\u6539\u539f\u6570\u7ec42.\u6ed1\u52a8\u7a97\u53e3\uff08\u5f53\u524d\u72b6\u6001\u5e76\u4e0d\u662f\u548c\u4e4b\u524d\u6240\u6709\u72b6\u6001\u6709\u5173\uff0c\u800c\u662f\u4ec5\u548c\u67d0\u51e0\u4e2a\u6709\u5173\uff09\u3002\u6211\u4eec\u91c7\u7528\u7684\u662f\u6ed1\u52a8\u7a97\u53e3\u3002\u4f46\u662f\u96be\u70b9\u5c31\u5728\u4e8e\u6211\u4eec\u600e\u4e48\u77e5\u9053\u5f53\u524d\u72b6\u6001\u548c\u54ea\u51e0\u4e2a\u6709\u5173\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\uff0c\u753b\u56fe\u6216\u8bb8\u53ef\u4ee5\u5e2e\u52a9\u4f60\u6253\u5f00\u601d\u8def\u3002\u53e6\u5916\u9762\u8bd5\u7684\u65f6\u5019\u8bf4\u51fa$O(N)$\u7684\u601d\u8def\u4e5f\u4e0d\u5931\u4e3a\u4e00\u4e2a\u5e2e\u52a9\u4f60\u51b7\u9759\u5206\u6790\u95ee\u9898\u7684\u624b\u6bb5\u3002",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/335.self-crossing.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/335.self-crossing.md",code:[{language:"py",text:"\nclass Solution:\n    def isSelfCrossing(self, x: List[int]) -> bool:\n        n = len(x)\n        if n < 4:\n            return False\n        for i in range(3, n):\n            if x[i] >= x[i - 2] and x[i - 1] <= x[i - 3]:\n                return True\n            if x[i - 1] <= x[i - 3] and x[i - 2] <= x[i]:\n                return True\n            if i > 3 and x[i - 1] == x[i - 3] and x[i] + x[i - 4] == x[i - 2]:\n                return True\n            if i > 4 and x[i] + x[i - 4] >= x[i - 2] and x[i - 1] >= x[i - 3] - x[i - 5] \\\n                    and x[i - 1] <= x[i - 3] and x[i - 2] >= x[i - 4] and x[i - 3] >= x[i - 5]:\n                return True\n        return False\n"}]},"house-robber-iii":{id:"337",name:"house-robber-iii",pre:[{text:"\u4e8c\u53c9\u6811",link:null,color:"geekblue"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u5206\u6790\uff0c\u662f\u62a2\u8fd8\u662f\u4e0d\u62a2",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/337.house-robber-iii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/337.house-robber-iii.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int rob(TreeNode root) {\n        int[] res = dfs(root);\n        return Math.max(res[0], res[1]);\n    }\n\n    public int[] dp(TreeNode root)\n    {\n        int[] res = new int[2];\n        if(root == null)\n        {\n            return res;\n        }\n\n        int[] left = dfs(root.left);\n        int[] right = dfs(root.right);\n        // 0 \u4ee3\u8868\u4e0d\u5077\uff0c1 \u4ee3\u8868\u5077\n        res[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);\n        res[1] = left[0] + right[0] + root.val;\n        return res;\n    }\n}\n"},{language:"js",text:"\nfunction helper(root) {\n  if (root === null) return [0, 0];\n  // 0: rob 1: notRob\n  const l = helper(root.left);\n  const r = helper(root.right);\n\n  const robed = root.val + l[1] + r[1];\n  const notRobed = Math.max(l[0], l[1]) + Math.max(r[0], r[1]);\n\n  return [robed, notRobed];\n}\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar rob = function (root) {\n  const [robed, notRobed] = helper(root);\n  return Math.max(robed, notRobed);\n};\n"},{language:"cpp",text:"\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int rob(TreeNode* root) {\n        pair<int, int> res = dfs(root);\n        return max(res.first, res.second);\n    }\n\n    pair<int, int> dfs(TreeNode* root)\n    {\n        pair<int, int> res = {0, 0};\n        if(root == NULL)\n        {\n            return res;\n        }\n\n        pair<int, int> left = dfs(root->left);\n        pair<int, int> right = dfs(root->right);\n        // 0 \u4ee3\u8868\u4e0d\u5077\uff0c1 \u4ee3\u8868\u5077\n        res.first = max(left.first, left.second) + max(right.first, right.second);\n        res.second = left.first + right.first + root->val;\n        return res;\n    }\n\n};\n"},{language:"py",text:"\n\nclass Solution:\n    def rob(self, root: TreeNode) -> int:\n        def dfs(node):\n            if not node:\n                return [0, 0]\n            [l_rob, l_not_rob] = dfs(node.left)\n            [r_rob, r_not_rob] = dfs(node.right)\n            return [node.val + l_not_rob + r_not_rob, max([l_rob, l_not_rob]) +  max([r_rob, r_not_rob])]\n        return max(dfs(root))\n\n\n# @lc code=end\n\n"}]},"power-of-four":{id:"342",name:"power-of-four",pre:[{text:"\u6570\u8bba",link:null,color:"green"}],keyPoints:[{text:"\u6570\u8bba",link:null,color:"blue"},{text:"2\u7684\u5e42\u6b21\u65b9\u7279\u70b9\uff08\u6570\u5b66\u6027\u8d28\u4ee5\u53ca\u4e8c\u8fdb\u5236\u8868\u793a\uff09",link:null,color:"blue"},{text:"4\u7684\u5e42\u6b21\u65b9\u7279\u70b9\uff08\u6570\u5b66\u6027\u8d28\u4ee5\u53ca\u4e8c\u8fdb\u5236\u8868\u793a\uff09",link:null,color:"blue"}],companies:[{name:"\u767e\u5ea6"},{name:"twosigma"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/342.power-of-four.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/342.power-of-four.md",code:[{language:"js",text:"\nwhile (num && num % 4 == 0) {\n  num /= 4;\n}\nreturn num == 1;\n"},{language:"js",text:"\nreturn num > 0 && (num & (num - 1)) === 0 && (num - 1) % 3 === 0;\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=342 lang=javascript\n *\n * [342] Power of Four\n */\n/**\n * @param {number} num\n * @return {boolean}\n */\nvar isPowerOfFour = function(num) {\n  // tag: \u6570\u8bba\n\n  if (num === 1) return true;\n  if (num < 4) return false;\n\n  if ((num & (num - 1)) !== 0) return false;\n\n  return (num & 0x55555555) === num;\n};\n"},{language:"py",text:"\nclass Solution:\n    def isPowerOfFour(self, num: int) -> bool:\n        if num == 1:\n            return True\n        elif num < 4:\n            return False\n        else:\n            if not num & (num-1) == 0:\n                return False\n            else:\n                return num & 0x55555555 == num\n\n    # \u53e6\u4e00\u79cd\u89e3\u6cd5\uff1a\u5c06\u6570\u5b57\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32\uff0c\u5229\u7528\u5b57\u7b26\u4e32\u7684\u76f8\u5173\u64cd\u4f5c\u8fdb\u884c\u5224\u65ad\n    def isPowerOfFour(self, num: int) -> bool:\n        binary_num = bin(num)[2:]\n        return binary_num.strip('0') == '1' and len(binary_num) % 2 == 1\n"}]},"integer-break":{id:"343",name:"integer-break",pre:[{text:"\u9012\u5f52",link:null,color:"orange"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u6570\u5b66\u62bd\u8c61",link:null,color:"blue"},{text:"\u9012\u5f52\u5206\u6790",link:null,color:"blue"},{text:"\u8bb0\u5fc6\u5316\u9012\u5f52",link:null,color:"blue"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/343.integer-break.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/343.integer-break.md",code:[{language:"py",text:"\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        dp = [1] * (n + 1)\n        for i in range(3, n + 1):\n            for j in range(1, i):\n                dp[i] = max(j * dp[i - j], j * (i - j), dp[i])\n        return dp[n]\n"},{language:"py",text:"\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        if n == 2: return 1\n        res = 0\n        for i in range(1, n):\n            res = max(res, max(i * self.integerBreak(n - i),i * (n - i)))\n        return res\n"},{language:"py",text:"\nclass Solution:\n    @lru_cache()\n    def integerBreak(self, n: int) -> int:\n        if n == 2: return 1\n        res = 0\n        for i in range(1, n):\n            res = max(res, max(i * self.integerBreak(n - i),i * (n - i)))\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        dp = [1] * (n + 1)\n        for i in range(3, n + 1):\n            for j in range(1, i):\n                dp[i] = max(j * dp[i - j], j * (i - j), dp[i])\n        return dp[n]\n"},{language:"py",text:"\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        dp = [1] * (n + 1)\n        for i in range(3, n + 1):\n            for j in range(1, i):\n                dp[i] = max(j * dp[i - j], j * (i - j), dp[i])\n        return dp[n]\n"}]},"intersection-of-two-arrays":{id:"349",name:"intersection-of-two-arrays",pre:[{text:"hashtable",link:null,color:"lime"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/349.intersection-of-two-arrays.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/349.intersection-of-two-arrays.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersection = function(nums1, nums2) {\n    const visited = {};\n    const ret = [];\n    for(let i = 0; i < nums1.length; i++) {\n        const num = nums1[i];\n\n        visited[num] = num;\n    }\n\n    for(let i = 0; i < nums2.length; i++) {\n        const num = nums2[i];\n\n        if (visited[num] !== undefined) {\n            ret.push(num);\n            visited[num] = undefined;\n        }\n    }\n\n    return ret;\n\n};\n"},{language:"py",text:"\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        visited, result = {}, []\n        for num in nums1:\n            visited[num] = num\n        for num in nums2:\n            if num in visited:\n                result.append(num)\n                visited.pop(num)\n        return result\n\n    # \u53e6\u4e00\u79cd\u89e3\u6cd5\uff1a\u5229\u7528 Python \u4e2d\u7684\u96c6\u5408\u8fdb\u884c\u8ba1\u7b97\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return set(nums1) & set(nums2)\n"}]},"water-and-jug-problem":{id:"365",name:"water-and-jug-problem",pre:[{text:"BFS",link:null,color:"purple"},{text:"\u6700\u5927\u516c\u7ea6\u6570",link:null,color:"magenta"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/365.water-and-jug-problem.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/365.water-and-jug-problem.md",code:[{language:"js",text:"\n/**\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @return {boolean}\n */\nvar canMeasureWater = function(x, y, z) {\n  if (x + y < z) return false;\n\n  if (z === 0) return true;\n\n  if (x === 0) return y === z;\n\n  if (y === 0) return x === z;\n\n  function GCD(a, b) {\n    let min = Math.min(a, b);\n    while (min) {\n      if (a % min === 0 && b % min === 0) return min;\n      min--;\n    }\n    return 1;\n  }\n\n  return z % GCD(x, y) === 0;\n};\n"},{language:"py",text:"\nclass Solution:\n    def canMeasureWater(self, x: int, y: int, z: int) -> bool:\n        if x + y < z:\n            return False\n        queue = [(0, 0)]\n        seen = set((0, 0))\n\n        while(len(queue) > 0):\n            a, b = queue.pop(0)\n            if a ==z or b == z or a + b == z:\n                return True\n            states = set()\n\n            states.add((x, b))\n            states.add((a, y))\n            states.add((0, b))\n            states.add((a, 0)) \n            states.add((min(x, b + a), 0 if b < x - a else b - (x - a))) \n            states.add((0 if a + b < y else a - (y - b), min(b + a, y)))\n            for state in states:\n                if state in seen:\n                    continue;\n                queue.append(state)\n                seen.add(state)\n        return False\n"},{language:"py",text:"\nclass Solution:\n    def canMeasureWater(self, x: int, y: int, z: int) -> bool:\n        if x + y < z:\n            return False\n\n        if (z == 0):\n            return True\n\n        if (x == 0):\n            return y == z\n\n        if (y == 0):\n            return x == z\n\n        def GCD(a, b):\n            smaller = min(a, b)\n            while smaller:\n                if a % smaller == 0 and b % smaller == 0:\n                    return smaller\n                smaller -= 1\n\n        return z % GCD(x, y) == 0\n"},{language:"py",text:"\ndef GCD(a, b):\n    if b == 0: return a\n    return GCD(b, a % b)\n"}]},"sum-of-two-integers":{id:"371",name:"sum-of-two-integers",pre:[{text:"\u4f4d\u8fd0\u7b97",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/bit.md",color:"blue"}],keyPoints:[{text:"\u4f4d\u8fd0\u7b97",link:null,color:"blue"},{text:"\u5f02\u6216\u662f\u4e00\u79cd\u4e0d\u8fdb\u4f4d\u7684\u52a0\u51cf\u6cd5",link:null,color:"blue"},{text:"\u6c42\u4e0e\u4e4b\u540e\u5de6\u79fb\u4e00\u4f4d\u6765\u53ef\u4ee5\u8868\u793a\u8fdb\u4f4d",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/371.sum-of-two-integers.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/371.sum-of-two-integers.md",code:[{language:"java",text:"\nclass Solution {\n    public int getSum(int a, int b) {\n        if(a==0) return b;\n        if(b==0) return a;\n\n        while(b!=0)\n        {\n            int carry = a&b;\n            // \u8ba1\u7b97\u65e0\u8fdb\u4f4d\u7684\u7ed3\u679c\n            a = a^b;\n            //\u5c06\u5b58\u5728\u8fdb\u4f4d\u7684\u4f4d\u7f6e\u7f6e1\n            b =carry<<1;\n        }\n        return a;\n    }\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=371 lang=javascript\n *\n * [371] Sum of Two Integers\n */\n/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar getSum = function(a, b) {\n    if (a === 0) return b;\n\n    if (b === 0) return a;\n\n    return getSum(a ^ b, (a & b) << 1);\n};\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    int getSum(int a, int b) {\n        if(a==0) return b;\n        if(b==0) return a;\n\n        while(b!=0)\n        {\n            // \u9632\u6b62 AddressSanitizer \u5bf9\u6709\u7b26\u53f7\u5de6\u79fb\u7684\u6ea2\u51fa\u4fdd\u62a4\u5904\u7406\n            auto carry = ((unsigned int ) (a & b))<<1;\n            // \u8ba1\u7b97\u65e0\u8fdb\u4f4d\u7684\u7ed3\u679c\n            a = a^b;\n            //\u5c06\u5b58\u5728\u8fdb\u4f4d\u7684\u4f4d\u7f6e\u7f6e1\n            b =carry;\n        }\n        return a;\n    }\n};\n"},{language:"py",text:"\n# python\u6574\u6570\u7c7b\u578b\u4e3aUnifying Long Integers, \u5373\u65e0\u9650\u957f\u6574\u6570\u7c7b\u578b.\n# \u6a21\u62df 32bit \u6709\u7b26\u53f7\u6574\u578b\u52a0\u6cd5\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        a &= 0xFFFFFFFF\n        b &= 0xFFFFFFFF\n        while b:\n            carry = a & b\n            a ^= b\n            b = ((carry) << 1) & 0xFFFFFFFF\n            # print((a, b))\n        return a if a < 0x80000000 else ~(a^0xFFFFFFFF)\n"}]},"kth-smallest-element-in-a-sorted-matrix":{id:"378",name:"kth-smallest-element-in-a-sorted-matrix",pre:[{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"magenta"},{text:"\u5806",link:null,color:"green"}],keyPoints:[{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"blue"},{text:"\u6709\u5e8f\u77e9\u9635\u7684\u5957\u8def\uff08\u6587\u7ae0\u672b\u5c3e\u8fd8\u6709\u4e00\u9053\u6709\u5e8f\u77e9\u9635\u7684\u9898\u76ee\uff09",link:null,color:"blue"},{text:"\u5806\uff08\u4f18\u5148\u7ea7\u961f\u5217\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/378.kth-smallest-element-in-a-sorted-matrix.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/378.kth-smallest-element-in-a-sorted-matrix.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=378 lang=javascript\n *\n * [378] Kth Smallest Element in a Sorted Matrix\n */\nfunction notGreaterCount(matrix, target) {\n  // \u7b49\u4ef7\u4e8e\u5728matrix \u4e2d\u641c\u7d22mid\uff0c\u641c\u7d22\u7684\u8fc7\u7a0b\u4e2d\u5229\u7528\u6709\u5e8f\u7684\u6027\u8d28\u8bb0\u5f55\u6bd4mid\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\n\n  // \u6211\u4eec\u9009\u62e9\u5de6\u4e0b\u89d2\uff0c\u4f5c\u4e3a\u5f00\u59cb\u5143\u7d20\n  let curRow = 0;\n  // \u591a\u5c11\u5217\n  const COL_COUNT = matrix[0].length;\n  // \u6700\u540e\u4e00\u5217\u7684\u7d22\u5f15\n  const LAST_COL = COL_COUNT - 1;\n  let res = 0;\n\n  while (curRow < matrix.length) {\n    // \u6bd4\u8f83\u6700\u540e\u4e00\u5217\u7684\u6570\u636e\u548ctarget\u7684\u5927\u5c0f\n    if (matrix[curRow][LAST_COL] < target) {\n      res += COL_COUNT;\n    } else {\n      let i = COL_COUNT - 1;\n      while (i < COL_COUNT && matrix[curRow][i] > target) {\n        i--;\n      }\n      // \u6ce8\u610f\u8fd9\u91cc\u8981\u52a01\n      res += i + 1;\n    }\n    curRow++;\n  }\n\n  return res;\n}\n/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function(matrix, k) {\n  if (matrix.length < 1) return null;\n  let start = matrix[0][0];\n  let end = matrix[matrix.length - 1][matrix[0].length - 1];\n  while (start < end) {\n    const mid = start + ((end - start) >> 1);\n    const count = notGreaterCount(matrix, mid);\n    if (count < k) start = mid + 1;\n    else end = mid;\n  }\n  // \u8fd4\u56destart,mid, end \u90fd\u4e00\u6837\n  return start;\n};\n"}]},"insert-delete-getrandom-o1":{id:"380",name:"insert-delete-getrandom-o1",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"\u6570\u7ec4",link:null,color:"blue"},{text:"\u54c8\u5e0c\u8868",link:null,color:"blue"},{text:"\u6570\u7ec4+\u54c8\u5e0c\u8868",link:null,color:"blue"},{text:"\u57fa\u672c\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/380.insert-delete-getrandom-o1.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/380.insert-delete-getrandom-o1.md",code:[{language:"py",text:'\nfrom random import random\n\n\nclass RandomizedSet:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.data = dict()\n        self.arr = []\n        self.n = 0\n\n    def insert(self, val: int) -> bool:\n        """\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\n        """\n        if val in self.data:\n            return False\n        self.data[val] = self.n\n        self.arr.append(val)\n        self.n += 1\n\n        return True\n\n    def remove(self, val: int) -> bool:\n        """\n        Removes a value from the set. Returns true if the set contained the specified element.\n        """\n        if val not in self.data:\n            return False\n        i = self.data[val]\n        # \u66f4\u65b0data\n        self.data[self.arr[-1]] = i\n        self.data.pop(val)\n        # \u66f4\u65b0arr\n        self.arr[i] = self.arr[-1]\n        # \u5220\u9664\u6700\u540e\u4e00\u9879\n        self.arr.pop()\n        self.n -= 1\n\n        return True\n\n    def getRandom(self) -> int:\n        """\n        Get a random element from the set.\n        """\n\n        return self.arr[int(random() * self.n)]\n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()\n'}]},"partition-equal-subset-sum":{id:"416",name:"partition-equal-subset-sum",pre:[{text:"DFS",link:null,color:"red"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/416.partition-equal-subset-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/416.partition-equal-subset-sum.md",code:[{language:"js",text:"\nvar canPartition = function (nums) {\n  let sum = nums.reduce((acc, num) => acc + num, 0);\n  if (sum % 2) {\n    return false;\n  }\n  sum = sum / 2;\n  return dfs(nums, sum, 0);\n};\n\nfunction dfs(nums, target, cur) {\n  if (target < 0 || cur > nums.length) {\n    return false;\n  }\n  return (\n    target === 0 ||\n    dfs(nums, target - nums[cur], cur + 1) ||\n    dfs(nums, target, cur + 1)\n  );\n}\n"},{language:"js",text:"\nvar canPartition = function (nums) {\n  let sum = nums.reduce((acc, num) => acc + num, 0);\n  if (sum % 2) {\n    return false;\n  }\n  sum = sum / 2;\n  nums = nums.sort((a, b) => b - a);\n  if (sum < nums[0]) {\n    return false;\n  }\n  return dfs(nums, sum, sum, 0);\n};\n\nfunction dfs(nums, pickRemain, discardRemain, cur) {\n  if (pickRemain === 0 || discardRemain === 0) {\n    return true;\n  }\n\n  if (pickRemain < 0 || discardRemain < 0 || cur > nums.length) {\n    return false;\n  }\n\n  return (\n    dfs(nums, pickRemain - nums[cur], discardRemain, cur + 1) ||\n    dfs(nums, pickRemain, discardRemain - nums[cur], cur + 1)\n  );\n}\n"},{language:"js",text:"\nvar canPartition = function (nums) {\n  let sum = nums.reduce((acc, num) => acc + num, 0);\n  if (sum % 2) {\n    return false;\n  } else {\n    sum = sum / 2;\n  }\n\n  const dp = Array.from(nums).map(() =>\n    Array.from({ length: sum + 1 }).fill(false)\n  );\n\n  for (let i = 0; i < nums.length; i++) {\n    dp[i][0] = true;\n  }\n\n  for (let i = 0; i < dp.length - 1; i++) {\n    for (let j = 0; j < dp[0].length; j++) {\n      dp[i + 1][j] =\n        j - nums[i] >= 0 ? dp[i][j] || dp[i][j - nums[i]] : dp[i][j];\n    }\n  }\n\n  return dp[nums.length - 1][sum];\n};\n"},{language:"js",text:"\nvar canPartition = function (nums) {\n  let sum = nums.reduce((acc, num) => acc + num, 0);\n  if (sum % 2) {\n    return false;\n  }\n  sum = sum / 2;\n  const dp = Array.from({ length: sum + 1 }).fill(false);\n  dp[0] = true;\n\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = sum; j > 0; j--) {\n      dp[j] = dp[j] || (j - nums[i] >= 0 && dp[j - nums[i]]);\n    }\n  }\n\n  return dp[sum];\n};\n"},{language:"js",text:"\n/**\n * @param {number} amount\n * @param {number[]} coins\n * @return {number}\n */\nvar change = function (amount, coins) {\n  const dp = Array.from({ length: amount + 1 }).fill(0);\n  dp[0] = 1;\n  for (let i = 0; i < coins.length; i++) {\n    for (let j = 1; j <= amount; j++) {\n      dp[j] = dp[j] + (j - coins[i] >= 0 ? dp[j - coins[i]] : 0);\n    }\n  }\n  return dp[amount];\n};\n"}]},"path-sum-iii":{id:"437",name:"path-sum-iii",pre:[{text:"hashmap",link:null,color:"red"}],keyPoints:[{text:"\u901a\u8fc7hashmap\uff0c\u4ee5\u65f6\u95f4\u6362\u7a7a\u95f4",link:null,color:"blue"},{text:"\u5bf9\u4e8e\u8fd9\u79cd\u8fde\u7eed\u7684\u5143\u7d20\u6c42\u548c\u95ee\u9898\uff0c\u6709\u4e00\u4e2a\u5171\u540c\u7684\u601d\u8def\uff0c\u53ef\u4ee5\u53c2\u8003[\u8fd9\u9053\u9898\u76ee](./560.subarray",link:null,color:"blue"},{text:"sum",link:null,color:"blue"},{text:"equals",link:null,color:"blue"},{text:"k.md)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/437.path-sum-iii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/437.path-sum-iii.md",code:[{language:"js",text:"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n// the number of the paths starting from self\nfunction helper(root, sum) {\n  if (root === null) return 0;\n  const l = helper(root.left, sum - root.val);\n  const r = helper(root.right, sum - root.val);\n\n  return l + r + (root.val === sum ? 1 : 0);\n}\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number}\n */\nvar pathSum = function(root, sum) {\n// \u7a7a\u95f4\u590d\u6742\u5ea6O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u4ecb\u4e8eO(nlogn) \u548c O(n^2)\n  // tag: dfs tree\n  if (root === null) return 0;\n  // the number of the paths starting from self\n  const self = helper(root, sum);\n  // we don't know the answer, so we just pass it down\n  const l = pathSum(root.left, sum);\n  // we don't know the answer, so we just pass it down\n  const r = pathSum(root.right, sum);\n\n  return self + l + r;\n};\n\n"},{language:"js",text:"\n\n\n/*\n * @lc app=leetcode id=437 lang=javascript\n *\n * [437] Path Sum III\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\nfunction helper(root, acc, target, hashmap) {\n  // see also : https://leetcode.com/problems/subarray-sum-equals-k/\n\n  if (root === null) return 0;\n  let count = 0;\n  acc += root.val;\n  if (acc === target) count++;\n  if (hashmap[acc - target] !== void 0) {\n    count += hashmap[acc - target];\n  }\n  if (hashmap[acc] === void 0) {\n    hashmap[acc] = 1;\n  } else {\n    hashmap[acc] += 1;\n  }\n  const res =\n    count +\n    helper(root.left, acc, target, hashmap) +\n    helper(root.right, acc, target, hashmap);\n\n    // \u8fd9\u91cc\u8981\u6ce8\u610f\u522b\u5fd8\u8bb0\u4e86\n    hashmap[acc] = hashmap[acc] - 1;\n\n    return res;\n}\n\nvar pathSum = function(root, sum) {\n  const hashmap = {};\n  return helper(root, 0, sum, hashmap);\n};\n"}]},"add-two-numbers-ii":{id:"445",name:"add-two-numbers-ii",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"\u6808",link:null,color:"red"}],keyPoints:[{text:"\u6808\u7684\u57fa\u672c\u64cd\u4f5c",link:null,color:"blue"},{text:"carried\u53d8\u91cf\u8bb0\u5f55\u8fdb\u4f4d",link:null,color:"blue"},{text:"\u5faa\u73af\u7684\u7ec8\u6b62\u6761\u4ef6\u8bbe\u7f6e\u6210`stack.length>0`\u53ef\u4ee5\u7b80\u5316\u64cd\u4f5c",link:null,color:"blue"},{text:"\u6ce8\u610f\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u59821+99=100",link:null,color:"blue"}],companies:[{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/445.add-two-numbers-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/445.add-two-numbers-ii.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=445 lang=javascript\n *\n * [445] Add Two Numbers II\n */\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n  const stack1 = [];\n  const stack2 = [];\n  const stack = [];\n\n  let cur1 = l1;\n  let cur2 = l2;\n  let curried = 0;\n\n  while (cur1) {\n    stack1.push(cur1.val);\n    cur1 = cur1.next;\n  }\n\n  while (cur2) {\n    stack2.push(cur2.val);\n    cur2 = cur2.next;\n  }\n\n  let a = null;\n  let b = null;\n\n  while (stack1.length > 0 || stack2.length > 0) {\n    a = Number(stack1.pop()) || 0;\n    b = Number(stack2.pop()) || 0;\n\n    stack.push((a + b + curried) % 10);\n\n    if (a + b + curried >= 10) {\n      curried = 1;\n    } else {\n      curried = 0;\n    }\n  }\n\n  if (curried === 1) {\n    stack.push(1);\n  }\n\n  const dummy = {};\n\n  let current = dummy;\n\n  while (stack.length > 0) {\n    current.next = {\n      val: stack.pop(),\n      next: null\n    };\n\n    current = current.next;\n  }\n\n  return dummy.next;\n};\n"},{language:"py",text:"\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        def listToStack(l: ListNode) -> list:\n            stack, c = [], l\n            while c:\n                stack.append(c.val)\n                c = c.next\n            return stack\n            \n        # transfer l1 and l2 into stacks\n        stack1, stack2 = listToStack(l1), listToStack(l2)\n            \n        # add stack1 and stack2\n        diff = abs(len(stack1) - len(stack2))\n        stack1 = ([0]*diff + stack1 if len(stack1) < len(stack2) else stack1)\n        stack2 = ([0]*diff + stack2 if len(stack2) < len(stack1) else stack2)\n        stack3 = [x + y for x, y in zip(stack1, stack2)]\n        \n        # calculate carry for each item in stack3 and add one to the item before it\n        carry = 0\n        for i, val in enumerate(stack3[::-1]):\n            index = len(stack3) - i - 1\n            carry, stack3[index] = divmod(val + carry, 10)\n            if carry and index == 0: \n                stack3 = [1] + stack3\n            elif carry:\n                stack3[index - 1] += 1\n        \n        # transfer stack3 to a linkedList\n        result = ListNode(0)\n        c = result\n        for item in stack3:\n            c.next = ListNode(item)\n            c = c.next\n        \n        return result.next\n"}]},"4-sum-ii":{id:"454",name:"4-sum-ii",pre:[{text:"hashTable",link:null,color:"green"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"},{text:"\u4e24\u4e24\u5206\u7ec4\uff0c\u6c42\u51fa\u4e24\u4e24\u7ed3\u5408\u80fd\u591f\u5f97\u51fa\u7684\u53ef\u80fd\u6570\uff0c\u7136\u540e\u5408\u5e76\u5373\u53ef\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/454.4-sum-ii.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/454.4-sum-ii.md",code:[{language:"js",text:"\n\n/*\n * @lc app=leetcode id=454 lang=javascript\n *\n * [454] 4Sum II\n *\n * https://leetcode.com/problems/4sum-ii/description/\n/**\n * @param {number[]} A\n * @param {number[]} B\n * @param {number[]} C\n * @param {number[]} D\n * @return {number}\n */\nvar fourSumCount = function(A, B, C, D) {\n  const sumMapper = {};\n  let res = 0;\n  for (let i = 0; i < A.length; i++) {\n    for (let j = 0; j < B.length; j++) {\n        sumMapper[A[i] + B[j]] = (sumMapper[A[i] + B[j]] || 0) + 1;\n    }\n  }\n\n  for (let i = 0; i < C.length; i++) {\n    for (let j = 0; j < D.length; j++) {\n        res += sumMapper[- (C[i] + D[j])] || 0;\n    }\n  }\n\n  return res;\n};\n"},{language:"py",text:"\nclass Solution:\n    def fourSumCount(self, A: List[int], B: List[int], C: List[int], D: List[int]) -> int:\n        mapper = {}\n        res = 0\n        for i in A:\n            for j in B:\n                mapper[i + j] = mapper.get(i + j, 0) + 1\n        \n        for i in C:\n            for j in D:\n                res += mapper.get(-1 * (i + j), 0)\n        return res\n "}]},AssignCookies:{id:"455",name:"AssignCookies",pre:[{text:"\u8d2a\u5fc3\u7b97\u6cd5",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/greedy.md",color:"magenta"},{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u5c06\u9700\u6c42\u56e0\u5b50g\u548cs\u5206\u522b\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u7528\u8d2a\u5fc3\u601d\u60f3\uff0c\u914d\u5408\u53cc\u6307\u9488\uff0c\u6bcf\u4e2a\u997c\u5e72\u53ea\u5c1d\u8bd5\u4e00\u6b21\uff0c\u6210\u529f\u5219\u6362\u4e0b\u4e00\u4e2a\u5b69\u5b50\u6765\u5c1d\u8bd5\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/455.AssignCookies.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/455.AssignCookies.md",code:[{language:"js",text:"\n/**\n * @param {number[]} g\n * @param {number[]} s\n * @return {number}\n */\nconst findContentChildren = function (g, s) {\n    g = g.sort((a, b) => a - b);\n    s = s.sort((a, b) => a - b);\n    let gi = 0; // \u80c3\u53e3\u503c\n    let sj = 0; // \u997c\u5e72\u5c3a\u5bf8\n    let res = 0;\n    while (gi < g.length && sj < s.length) {\n        // \u5f53\u997c\u5e72 sj >= \u80c3\u53e3 gi \u65f6\uff0c\u997c\u5e72\u6ee1\u8db3\u80c3\u53e3\uff0c\u66f4\u65b0\u6ee1\u8db3\u7684\u5b69\u5b50\u6570\u5e76\u79fb\u52a8\u6307\u9488\n        if (s[sj] >= g[gi]) {\n            gi++;\n            sj++;\n            res++;\n        } else {\n            // \u5f53\u997c\u5e72 sj < \u80c3\u53e3 gi \u65f6\uff0c\u997c\u5e72\u4e0d\u80fd\u6ee1\u8db3\u80c3\u53e3\uff0c\u9700\u8981\u6362\u5927\u7684\n            sj++;\n        }\n    }\n    return res;\n};\n"}]},"lfu-cache":{id:"460",name:"lfu-cache",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"HashMap",link:null,color:"orange"}],keyPoints:[{text:"\u5206\u6790\u7528\u4e24\u4e2a`Map`\u5206\u522b\u4fdd\u5b58`nodeMap{key,node}`\u548c`freqMap{frequent,DoublyLinkedList}`\u3002\u5b9e\u73b0`get`\u548c`put`\u64cd\u4f5c\u90fd\u662f`O(1)`\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u53ef\u4ee5\u7528Java\u81ea\u5e26\u7684\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982HashLinkedHashSet\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u81ea\u5df1\u81ea\u5efaNode\uff0cDoublelyLinkedList\u3002\u53ef\u4ee5\u5f88\u5927\u7a0b\u5ea6\u7684\u7f29\u51cf\u4ee3\u7801\u91cf\u3002",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/460.lfu-cache.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/460.lfu-cache.md",code:[{language:"java",text:"\npublic class LC460LFUCache {\n  class Node {\n    int key, val, freq;\n    Node prev, next;\n\n    Node(int key, int val) {\n      this.key = key;\n      this.val = val;\n      freq = 1;\n    }\n  }\n\n  class DoubleLinkedList {\n    private Node head;\n    private Node tail;\n    private int size;\n\n    DoubleLinkedList() {\n      head = new Node(0, 0);\n      tail = new Node(0, 0);\n      head.next = tail;\n      tail.prev = head;\n    }\n\n    void add(Node node) {\n      head.next.prev = node;\n      node.next = head.next;\n      node.prev = head;\n      head.next = node;\n      size++;\n    }\n\n    void remove(Node node) {\n      node.prev.next = node.next;\n      node.next.prev = node.prev;\n      size--;\n    }\n\n    // always remove last node if last node exists\n    Node removeLast() {\n      if (size > 0) {\n        Node node = tail.prev;\n        remove(node);\n        return node;\n      } else return null;\n    }\n  }\n\n  // cache capacity\n  private int capacity;\n  // min frequent\n  private int minFreq;\n  Map<Integer, Node> nodeMap;\n  Map<Integer, DoubleLinkedList> freqMap;\n  public LC460LFUCache(int capacity) {\n    this.minFreq = 0;\n    this.capacity = capacity;\n    nodeMap = new HashMap<>();\n    freqMap = new HashMap<>();\n  }\n\n  public int get(int key) {\n    Node node = nodeMap.get(key);\n    if (node == null) return -1;\n    update(node);\n    return node.val;\n  }\n\n  public void put(int key, int value) {\n    if (capacity == 0) return;\n    Node node;\n    if (nodeMap.containsKey(key)) {\n      node = nodeMap.get(key);\n      node.val = value;\n      update(node);\n    } else {\n      node = new Node(key, value);\n      nodeMap.put(key, node);\n      if (nodeMap.size() == capacity) {\n        DoubleLinkedList lastList = freqMap.get(minFreq);\n        nodeMap.remove(lastList.removeLast().key);\n      }\n      minFreq = 1;\n      DoubleLinkedList newList = freqMap.getOrDefault(node.freq, new DoubleLinkedList());\n      newList.add(node);\n      freqMap.put(node.freq, newList);\n    }\n  }\n\n  private void update(Node node) {\n    DoubleLinkedList oldList = freqMap.get(node.freq);\n    oldList.remove(node);\n    if (node.freq == minFreq && oldList.size == 0) minFreq++;\n    node.freq++;\n    DoubleLinkedList newList = freqMap.getOrDefault(node.freq, new DoubleLinkedList());\n    newList.add(node);\n    freqMap.put(node.freq, newList);\n  }\n }\n"}]},"concatenated-words":{id:"472",name:"concatenated-words",pre:[{text:"\u524d\u7f00\u6811",link:null,color:"purple"}],keyPoints:[{text:"\u5206\u6790",link:null,color:"blue"},{text:"\u524d\u7f00\u6811",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/472.concatenated-words.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/472.concatenated-words.md",code:[{language:"py",text:"\nclass Trie:\n\n    def __init__(self):\n        self.Trie = {}\n        self.visited = {}\n\n    def insert(self, word):\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr['#'] = 1\n\n    def cntWords(self, word):\n        if not word:\n            return 0\n        if word in self.visited:\n            return self.visited[word]\n        curr = self.Trie\n        res = float('-inf')\n\n        for i, w in enumerate(word):\n            if w not in curr:\n                return res\n            curr = curr[w]\n            if '#' in curr:\n                res = max(res, 1 + self.cntWords(word[i + 1:]))\n        self.visited[word] = res\n        return res\n\n\nclass Solution:\n    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n        self.trie = Trie()\n        res = []\n\n        for word in words:\n            self.trie.insert(word)\n        for word in words:\n            if self.trie.cntWords(word) >= 2:\n                res.append(word)\n        return res\n"}]},"reverse-pairs":{id:"493",name:"reverse-pairs",pre:[{text:"\u5f52\u5e76\u6392\u5e8f",link:null,color:"cyan"},{text:"\u9006\u5e8f\u6570",link:null,color:"volcano"},{text:"\u5206\u6cbb",link:null,color:"gold"}],keyPoints:[{text:"\u5f52\u5e76\u6392\u5e8f",link:null,color:"blue"},{text:"\u9006\u5e8f\u6570",link:null,color:"blue"},{text:"\u5206\u6cbb",link:null,color:"blue"},{text:"\u8bc6\u522b\u8003\u70b9\uff0c\u5176\u4ed6\u975e\u91cd\u70b9\u53ef\u4ee5\u4f7f\u7528\u8bed\u8a00\u5185\u7f6e\u65b9\u6cd5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/493.reverse-pairs.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/493.reverse-pairs.md",code:[{language:"py",text:"\nclass Solution(object):\n    def reversePairs(self, nums):\n        n = len(nums)\n        cnt = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] > 2 * nums[j]:\n                    cnt += 1\n        return cnt\n"},{language:"py",text:"\nl = r = 0\nwhile l < len(left) and r < len(right):\n    if left[l] <= 2 * right[r]:\n        l += 1\n    else:\n        self.cnt += len(left) - l\n        r += 1\n"},{language:"py",text:"\nclass Solution(object):\n    def reversePairs(self, nums):\n        self.cnt = 0\n\n        def mergeSort(lst):\n            L = len(lst)\n            if L <= 1:\n                return lst\n            return mergeTwo(mergeSort(lst[:L//2]), mergeSort(lst[L//2:]))\n\n        def mergeTwo(left, right):\n            l = r = 0\n            while l < len(left) and r < len(right):\n                if left[l] <= 2 * right[r]:\n                    l += 1\n                else:\n                    self.cnt += len(left) - l\n                    r += 1\n            return sorted(left+right)\n\n        mergeSort(nums)\n        return self.cnt\n\n"}]},"target-sum":{id:"494",name:"target-sum",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u5bf9\u5143\u7d20\u8fdb\u884c\u5206\u7ec4\uff0c\u5206\u7ec4\u7684\u4f9d\u636e\u662f\u7b26\u53f7\uff0c\u662f`+`\u6216\u8005`",link:null,color:"blue"},{text:"`",link:null,color:"blue"},{text:"\u901a\u8fc7\u6570\u5b66\u516c\u5f0f\u63a8\u5bfc\u53ef\u4ee5\u7b80\u5316\u6211\u4eec\u7684\u6c42\u89e3\u8fc7\u7a0b\uff0c\u8fd9\u9700\u8981\u4e00\u70b9`\u6570\u5b66\u77e5\u8bc6\u548c\u6570\u5b66\u610f\u8bc6`",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/494.target-sum.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/494.target-sum.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=494 lang=javascript\n *\n * [494] Target Sum\n *\n */\n// \u8fd9\u4e2a\u662f\u6211\u4eec\u719f\u6089\u7684\u95ee\u9898\u4e86\n// \u6211\u4eec\u8fd9\u91cc\u9700\u8981\u6c42\u89e3\u7684\u662fnums\u91cc\u9762\u6709\u591a\u5c11\u79cd\u53ef\u4ee5\u7ec4\u6210target\u7684\u65b9\u5f0f\nvar sumCount = function(nums, target) {\n  // \u8fd9\u91cc\u901a\u8fc7\u89c2\u5bdf\uff0c\u6211\u4eec\u6ca1\u5fc5\u8981\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4\u53bb\u5b58\u50a8\u8fd9\u4e9b\u8ba1\u7b97\u7ed3\u679c\n  // \u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u53ef\u4ee5\u6709\u6548\u8282\u7701\u7a7a\u95f4\n  const dp = Array(target + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = target; j >= nums[i]; j--) {\n      dp[j] += dp[j - nums[i]];\n    }\n  }\n  return dp[target];\n};\nconst add = nums => nums.reduce((a, b) => (a += b), 0);\n/**\n * @param {number[]} nums\n * @param {number} S\n * @return {number}\n */\nvar findTargetSumWays = function(nums, S) {\n  const sum = add(nums);\n  if (sum < S) return 0;\n  if ((S + sum) % 2 === 1) return 0;\n  return sumCount(nums, (S + sum) >> 1);\n};\n"}]},"Find-Mode-in-Binary-Search-Tree":{id:"501",name:"Find-Mode-in-Binary-Search-Tree",pre:[],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/501.Find-Mode-in-Binary-Search-Tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/501.Find-Mode-in-Binary-Search-Tree.md",code:[{language:"java",text:"\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {   \n    List<Integer> list = new ArrayList<> ();\n    TreeNode preNode = null;\n    int max = 0, count = 0;\n    \n    public int[] findMode(TreeNode root) {\n        helper(root);\n        int[] res = new int[list.size()];\n        for (int i=0; i<res.length; i++) {\n            res[i] = list.get(i);\n        }\n        return res;\n    }\n    \n    private void helper (TreeNode root) {\n        if (root == null) return;\n        helper(root.left);\n        \n        if (preNode != null && root.val == preNode.val) {\n            count++;\n        } else {\n            count = 1;\n        }\n        \n        if (count > max) {\n            list.clear();\n            list.add(root.val);\n            max = count;\n        } else if (max == count) {\n            list.add(root.val);            \n        }\n        preNode = root;\n        helper(root.right);\n    }\n}\n"}]},"longest-palindromic-subsequence":{id:"516",name:"longest-palindromic-subsequence",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u201d\u5ef6\u4f38\u201c\uff08extend\uff09",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/516.longest-palindromic-subsequence.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/516.longest-palindromic-subsequence.md",code:[{language:"js",text:"\nif (s[i] === s[j]) {\n  dp[i][j] = dp[i + 1][j - 1] + 2;\n} else {\n  dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);\n}\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=516 lang=javascript\n *\n * [516] Longest Palindromic Subsequence\n */\n/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindromeSubseq = function(s) {\n  // bbbab \u8fd4\u56de4\n  // tag : dp\n  const dp = [];\n\n  for (let i = s.length - 1; i >= 0; i--) {\n    dp[i] = Array(s.length).fill(0);\n    for (let j = i; j < s.length; j++) {\n      if (i - j === 0) dp[i][j] = 1;\n      else if (s[i] === s[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);\n      }\n    }\n  }\n\n  return dp[0][s.length - 1];\n};\n"}]},"coin-change-2":{id:"518",name:"coin-change-2",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"},{text:"\u80cc\u5305\u95ee\u9898",link:null,color:"red"}],keyPoints:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"blue"},{text:"\u5b50\u95ee\u9898\u7528dp[i]\u6765\u8868\u793a\u7ec4\u6210i\u5757\u94b1\uff0c\u9700\u8981\u6700\u5c11\u7684\u786c\u5e01\u6570\uff0c\u90a3\u4e481.\u7b2cj\u4e2a\u786c\u5e01\u6211\u53ef\u4ee5\u9009\u62e9\u4e0d\u62ff\u8fd9\u4e2a\u65f6\u5019\uff0c\u7ec4\u6210\u6570=dp[i]2.\u7b2cj\u4e2a\u786c\u5e01\u6211\u53ef\u4ee5\u9009\u62e9\u62ff\u8fd9\u4e2a\u65f6\u5019\uff0c\u7ec4\u6210\u6570=dp[i",link:null,color:"blue"},{text:"coins[j]]+dp[i]",link:null,color:"blue"},{text:"\u548c01\u80cc\u5305\u95ee\u9898\u4e0d\u540c\uff0c\u786c\u5e01\u662f\u53ef\u4ee5\u62ff\u4efb\u610f\u4e2a\uff0c\u5c5e\u4e8e\u5b8c\u5168\u80cc\u5305\u95ee\u9898",link:null,color:"blue"},{text:"\u5bf9\u4e8e\u6bcf\u4e00\u4e2adp[i]\u6211\u4eec\u90fd\u9009\u62e9\u904d\u5386\u4e00\u904dcoin\uff0c\u4e0d\u65ad\u66f4\u65b0dp[i]eg:```jsif(amount===0)return1;constdp=[Array(amount+1).fill(1)];for(leti=1;i<amount+1;i++){dp[i]=Array(coins.length+1).fill(0);for(letj=1;j<coins.length+1;j++){//\u4ece1\u5f00\u59cb\u53ef\u4ee5\u7b80\u5316\u8fd0\u7b97if(i",link:null,color:"blue"},{text:"coins[j",link:null,color:"blue"},{text:"1]>=0){//\u6ce8\u610f\u8fd9\u91cc\u662fcoins[j",link:null,color:"blue"},{text:"1]\u800c\u4e0d\u662fcoins[j]dp[i][j]=dp[i][j",link:null,color:"blue"},{text:"1]+dp[i",link:null,color:"blue"},{text:"coins[j",link:null,color:"blue"},{text:"1]][j];//\u7531\u4e8e\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u786c\u5e01\u6240\u4ee5\u8fd9\u91cc\u662fj\u4e0d\u662fj",link:null,color:"blue"},{text:"1}else{dp[i][j]=dp[i][j",link:null,color:"blue"},{text:"1];}}}returndp[dp.length",link:null,color:"blue"},{text:"1][coins.length];```",link:null,color:"blue"},{text:"\u5f53\u6211\u4eec\u9009\u62e9\u4e00\u7ef4\u6570\u7ec4\u53bb\u89e3\u7684\u65f6\u5019\uff0c\u5185\u5916\u5faa\u73af\u5c06\u4f1a\u5bf9\u7ed3\u679c\u9020\u6210\u5f71\u54cd![](https://tva1.sinaimg.cn/large/007S8ZIlly1ghluafxrm4j30j00bdmxx.jpg)eg:```js//\u8fd9\u79cd\u7b54\u6848\u662f\u4e0d\u5bf9\u7684\u3002//\u539f\u56e0\u5728\u4e8e\u6bd4\u5982amount=5,coins=[1,2,5]//\u8fd9\u79cd\u7b97\u6cd5\u4f1a\u5c06[1,2,2][2,1,2][2,2,1]\u7b97\u6210\u4e0d\u540c\u7684if(amount===0)return1;constdp=[1].concat(Array(amount).fill(0));for(leti=1;i<amount+1;i++){for(letj=0;j<coins.length;j++){if(i",link:null,color:"blue"},{text:"coins[j]>=0){dp[i]=dp[i]+dp[i",link:null,color:"blue"},{text:"coins[j]];}}}returndp[dp.length",link:null,color:"blue"},{text:"1];//\u6b63\u786e\u7684\u5199\u6cd5\u5e94\u8be5\u662f\u5185\u5916\u5faa\u73af\u8c03\u6362\u4e00\u4e0b,\u5177\u4f53\u53ef\u4ee5\u770b\u4e0b\u65b9\u4ee3\u7801\u533a```",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/518.coin-change-2.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/518.coin-change-2.md",code:[{language:"js",text:"\nif (amount === 0) return 1;\n\nconst dp = [Array(amount + 1).fill(1)];\n\nfor (let i = 1; i < amount + 1; i++) {\n  dp[i] = Array(coins.length + 1).fill(0);\n  for (let j = 1; j < coins.length + 1; j++) {\n    // \u4ece1\u5f00\u59cb\u53ef\u4ee5\u7b80\u5316\u8fd0\u7b97\n    if (i - coins[j - 1] >= 0) {\n      // \u6ce8\u610f\u8fd9\u91cc\u662fcoins[j -1]\u800c\u4e0d\u662fcoins[j]\n      dp[i][j] = dp[i][j - 1] + dp[i - coins[j - 1]][j]; // \u7531\u4e8e\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u786c\u5e01\u6240\u4ee5\u8fd9\u91cc\u662fj\u4e0d\u662fj-1\n    } else {\n      dp[i][j] = dp[i][j - 1];\n    }\n  }\n}\n\nreturn dp[dp.length - 1][coins.length];\n"},{language:"js",text:"\n// \u8fd9\u79cd\u7b54\u6848\u662f\u4e0d\u5bf9\u7684\u3002\n// \u539f\u56e0\u5728\u4e8e\u6bd4\u5982amount = 5, coins = [1,2,5]\n// \u8fd9\u79cd\u7b97\u6cd5\u4f1a\u5c06[1,2,2] [2,1,2] [2, 2, 1] \u7b97\u6210\u4e0d\u540c\u7684\n\nif (amount === 0) return 1;\n\nconst dp = [1].concat(Array(amount).fill(0));\n\nfor (let i = 1; i < amount + 1; i++) {\n  for (let j = 0; j < coins.length; j++) {\n    if (i - coins[j] >= 0) {\n      dp[i] = dp[i] + dp[i - coins[j]];\n    }\n  }\n}\n\nreturn dp[dp.length - 1];\n\n// \u6b63\u786e\u7684\u5199\u6cd5\u5e94\u8be5\u662f\u5185\u5916\u5faa\u73af\u8c03\u6362\u4e00\u4e0b, \u5177\u4f53\u53ef\u4ee5\u770b\u4e0b\u65b9\u4ee3\u7801\u533a\n"},{language:"js",text:"\n/*\n * @lc app=leetcode id=518 lang=javascript\n *\n * [518] Coin Change 2\n *\n */\n/**\n * @param {number} amount\n * @param {number[]} coins\n * @return {number}\n */\nvar change = function(amount, coins) {\n  if (amount === 0) return 1;\n\n  const dp = [1].concat(Array(amount).fill(0));\n\n  for (let j = 0; j < coins.length; j++) {\n    for (let i = 1; i < amount + 1; i++) {\n      if (i - coins[j] >= 0) {\n        dp[i] = dp[i] + dp[i - coins[j]];\n      }\n    }\n  }\n\n  return dp[dp.length - 1];\n};\n"},{language:"py",text:"\nclass Solution:\n    def change(self, amount: int, coins: List[int]) -> int:\n        dp = [0] * (amount + 1)\n        dp[0] = 1\n\n        for j in range(len(coins)):\n            for i in range(1, amount + 1):\n                if i >= coins[j]:\n                    dp[i] += dp[i - coins[j]]\n\n        return dp[-1]\n"},{language:"py",text:"\nclass Solution:\n    def change(self, amount: int, coins: List[int]) -> int:\n        dp = [[0 for _ in range(len(coins) + 1)] for _ in range(amount + 1)]\n        for j in range(len(coins) + 1):\n            dp[0][j] = 1\n\n        for i in range(amount + 1):\n            for j in range(1, len(coins) + 1):\n                if i >= coins[j - 1]:\n                    dp[i][j] = dp[i - coins[j - 1]][j] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n        return dp[-1][-1]\n"}]},"friend-circles":{id:"547",name:"friend-circles",pre:[{text:"\u5e76\u67e5\u96c6",link:null,color:"volcano"}],keyPoints:[],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/547.friend-circles.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/547.friend-circles.md",code:[{language:"py",text:"\nclass UF:\n    parent = {}\n    cnt = 0\n    def __init__(self, M):\n        n = len(M)\n        for i in range(n):\n            self.parent[i] = i\n            self.cnt += 1\n\n    def find(self, x):\n        while x != self.parent[x]:\n            x = self.parent[x]\n        return x\n    def union(self, p, q):\n        if self.connected(p, q): return\n        self.parent[self.find(p)] = self.find(q)\n        self.cnt -= 1\n    def connected(self, p, q):\n        return self.find(p) == self.find(q)\n\nclass Solution:\n    def findCircleNum(self, M: List[List[int]]) -> int:\n        n = len(M)\n        uf = UF(M)\n        for i in range(n):\n            for j in range(i):\n                if M[i][j] == 1:\n                    uf.union(i, j)\n        return uf.cnt\n\n"}]},"subarray-sum-equals-k":{id:"560",name:"subarray-sum-equals-k",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"},{text:"\u524d\u7f00\u548c",link:null,color:"cyan"}],keyPoints:[{text:"\u524d\u7f00\u548c",link:null,color:"blue"},{text:"\u53ef\u4ee5\u5229\u7528hashmap\u8bb0\u5f55\u548c\u7684\u7d2f\u52a0\u503c\u6765\u907f\u514d\u91cd\u590d\u8ba1\u7b97",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/560.subarray-sum-equals-k.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/560.subarray-sum-equals-k.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=560 lang=javascript\n *\n * [560] Subarray Sum Equals K\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function (nums, k) {\n  const hashmap = {};\n  let acc = 0;\n  let count = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    acc += nums[i];\n\n    if (acc === k) count++;\n\n    if (hashmap[acc - k] !== void 0) {\n      count += hashmap[acc - k];\n    }\n\n    if (hashmap[acc] === void 0) {\n      hashmap[acc] = 1;\n    } else {\n      hashmap[acc] += 1;\n    }\n  }\n\n  return count;\n};\n"},{language:"py",text:"\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        cnt, n =  0, len(nums)\n        for i in range(n):\n            sum = 0\n            for j in range(i, n):\n                sum += nums[j]\n                if (sum == k): cnt += 1\n        return cnt\n"},{language:"py",text:"\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n      cnt, n =  0, len(nums)\n      pre = [0] * (n + 1)\n      for i in range(1, n + 1):\n          pre[i] = pre[i - 1] + nums[i - 1]\n      for i in range(1, n + 1):\n          for j in range(i, n + 1):\n              if (pre[j] - pre[i - 1] == k): cnt += 1\n      return cnt\n"},{language:"py",text:"\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        d = {}\n        acc = count = 0\n        for num in nums:\n            acc += num\n            if acc == k:\n                count += 1\n            if acc - k in d:\n                count += d[acc-k]\n            if acc in d:\n                d[acc] += 1\n            else:\n                d[acc] = 1\n        return count\n"}]},"distribute-candies":{id:"575",name:"distribute-candies",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"}],keyPoints:[{text:"\u8fd9\u662f\u4e00\u9053\u903b\u8f91\u9898\u76ee\uff0c\u56e0\u6b64\u5982\u679c\u903b\u8f91\u5206\u6790\u6e05\u695a\u4e86\uff0c\u4ee3\u7801\u662f\u81ea\u7136\u800c\u7136\u7684",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/575.distribute-candies.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/575.distribute-candies.md",code:[{language:"js",text:"\n/*\n * @lc app=leetcode id=575 lang=javascript\n *\n * [575] Distribute Candies\n */\n/**\n * @param {number[]} candies\n * @return {number}\n */\nvar distributeCandies = function(candies) {\n    const count = new Set(candies);\n    return Math.min(count.size, candies.length >> 1);\n};\n"},{language:"py",text:"\nclass Solution:\n    def distributeCandies(self, candies: List[int]) -> int:\n        return min(len(set(candies)), len(candies) >> 1)\n"}]},"find-duplicate-file-in-system":{id:"609",name:"find-duplicate-file-in-system",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"hashtable",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/609.find-duplicate-file-in-system.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/609.find-duplicate-file-in-system.md",code:[{language:"js",text:'\n\n\n/*\n * @lc app=leetcode id=609 lang=javascript\n *\n * [609] Find Duplicate File in System\n *\n * https://leetcode.com/problems/find-duplicate-file-in-system/description/\n *\n * algorithms\n * Medium (54.21%)\n * Total Accepted:    24.1K\n * Total Submissions: 44.2K\n * Testcase Example:  \'["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)","root 4.txt(efgh)"]\'\n *\n * Given a list of directory info including directory path, and all the files\n * with contents in this directory, you need to find out all the groups of\n * duplicate files in the file system in terms of their paths.\n *\n * A group of duplicate files consists of at least two files that have exactly\n * the same content.\n *\n * A single directory info string in the input list has the following format:\n *\n * "root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ...\n * fn.txt(fn_content)"\n *\n * It means there are n files (f1.txt, f2.txt ... fn.txt with content\n * f1_content, f2_content ... fn_content, respectively) in directory\n * root/d1/d2/.../dm. Note that n >= 1 and m >= 0. If m = 0, it means the\n * directory is just the root directory.\n *\n * The output is a list of group of duplicate file paths. For each group, it\n * contains all the file paths of the files that have the same content. A file\n * path is a string that has the following format:\n *\n * "directory_path/file_name.txt"\n *\n * Example 1:\n *\n *\n * Input:\n * ["root/a 1.txt(abcd) 2.txt(efgh)", "root/c 3.txt(abcd)", "root/c/d\n * 4.txt(efgh)", "root 4.txt(efgh)"]\n * Output:\n *\n * [["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]\n *\n *\n *\n *\n * Note:\n *\n *\n * No order is required for the final output.\n * You may assume the directory name, file name and file content only has\n * letters and digits, and the length of file content is in the range of\n * [1,50].\n * The number of files given is in the range of [1,20000].\n * You may assume no files or directories share the same name in the same\n * directory.\n * You may assume each given directory info represents a unique directory.\n * Directory path and file info are separated by a single blank space.\n *\n *\n *\n * Follow-up beyond contest:\n *\n *\n * Imagine you are given a real file system, how will you search files? DFS or\n * BFS?\n * If the file content is very large (GB level), how will you modify your\n * solution?\n * If you can only read the file by 1kb each time, how will you modify your\n * solution?\n * What is the time complexity of your modified solution? What is the most\n * time-consuming part and memory consuming part of it? How to optimize?\n * How to make sure the duplicated files you find are not false positive?\n *\n *\n */\n/**\n * @param {string[]} paths\n * @return {string[][]}\n */\nvar findDuplicate = function(paths) {\n  const hashmap = {};\n\n  for (let path of paths) {\n    const [folder, ...files] = path.split(" ");\n    for (let file of files) {\n      const lpi = file.indexOf("(");\n      const rpi = file.lastIndexOf(")");\n      const filename = file.slice(0, lpi);\n      const content = file.slice(lpi, rpi);\n      const fullname = `${folder}/${filename}`;\n      if (!hashmap[content]) hashmap[content] = [];\n      hashmap[content].push(fullname);\n    }\n  }\n\n  return Object.values(hashmap).filter(q => q.length >= 2);\n};\n'}]},"valid-triangle-number":{id:"611",name:"valid-triangle-number",pre:[{text:"\u6392\u5e8f",link:null,color:"purple"},{text:"\u53cc\u6307\u9488",link:null,color:"green"},{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"},{text:"\u4e09\u89d2\u5f62\u8fb9\u7684\u5173\u7cfb",link:null,color:"green"}],keyPoints:[{text:"\u4e09\u89d2\u5f62\u8fb9\u7684\u5173\u7cfb",link:null,color:"blue"},{text:"\u4e09\u5c42\u5faa\u73af\u786e\u5b9a\u4e09\u4e2a\u7ebf\u6bb5",link:null,color:"blue"}],companies:[{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/611.valid-triangle-number.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/611.valid-triangle-number.md",code:[{language:"py",text:"\nclass Solution:\n    def is_triangle(self, a, b, c):\n        if a == 0 or b == 0 or c == 0: return False\n        if a + b > c and a + c > b and b + c > a: return True\n        return False\n    def triangleNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if self.is_triangle(nums[i], nums[j], nums[k]): ans += 1\n\n        return ans\n"},{language:"py",text:"\n    def is_triangle(self, a, b, c):\n        if a == 0 or b == 0 or c == 0: return False\n        # a + c > b \u548c  b + c > a \u662f\u65e0\u6548\u7684\u5224\u65ad\uff0c\u56e0\u4e3a\u6052\u6210\u7acb\n        if a + b > c and a + c > b and b + c > a: return True\n        return False\n"},{language:"py",text:"\nfor i in range(n - 2):\n    for j in range(i + 1, n - 1):\n        k = j + 1\n        while k < n and num[i] + nums[j] > nums[k]:\n            k += 1\n        ans += k - j - 1\n"},{language:"py",text:"\nfor i in range(n - 2):\n    k = i + 2\n    for j in range(i + 1, n - 1):\n        while k < n and nums[i] + nums[j] > nums[k]:\n            k += 1\n        ans += k - j - 1\n"},{language:"py",text:"\nclass Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = 0\n        nums.sort()\n        for i in range(n - 2):\n            if nums[i] == 0: continue\n            k = i + 2\n            for j in range(i + 1, n - 1):\n                while k < n and nums[i] + nums[j] > nums[k]:\n                    k += 1\n                ans += k - j - 1\n        return ans\n"}]},"maximum-length-of-repeated-subarray":{id:"718",name:"maximum-length-of-repeated-subarray",pre:[{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"},{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"magenta"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"dp\u5efa\u6a21\u5957\u8def",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/718.maximum-length-of-repeated-subarray.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/718.maximum-length-of-repeated-subarray.md",code:[{language:"py",text:"\nclass Solution:\n    def findLength(self, A, B):\n        m, n = len(A), len(B)\n        ans = 0\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if A[i - 1] == B[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                    ans = max(ans, dp[i][j])\n        return ans\n"}]},"accounts-merge":{id:"721",name:"accounts-merge",pre:[{text:"\u5e76\u67e5\u96c6",link:null,color:"volcano"}],keyPoints:[],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/721.accounts-merge.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/721.accounts-merge.md",code:[{language:"py",text:"\nclass UF:\n    def __init__(self):\n        self.parent = {}\n\n    def find(self, x):\n        self.parent.setdefault(x, x)\n        while x != self.parent[x]:\n            x = self.parent[x]\n        return x\n    def union(self, p, q):\n        self.parent[self.find(p)] = self.find(q)\n\n\nclass Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        uf = UF()\n        email_to_name = {}\n        res = collections.defaultdict(list)\n        for account in accounts:\n            for i in range(1, len(account)):\n                email_to_name[account[i]] = account[0]\n                if i < len(account) - 1:uf.union(account[i], account[i + 1])\n        for email in email_to_name:\n            res[uf.find(email)].append(email)\n\n        return [[email_to_name[value[0]]] + sorted(value) for value in res.values()]\n"}]},"is-graph-bipartite":{id:"785",name:"is-graph-bipartite",pre:[{text:"\u56fe\u7684\u904d\u5386",link:null,color:"geekblue"},{text:"DFS",link:null,color:"red"}],keyPoints:[{text:"\u56fe\u7684\u5efa\u7acb\u548c\u904d\u5386",link:null,color:"blue"},{text:"colors\u6570\u7ec4",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/785.is-graph-bipartite.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/785.is-graph-bipartite.md",code:[{language:"py",text:"\nclass Solution:\n    def dfs(self, grid, colors, i, color, N):\n        colors[i] = color\n        for j in range(N):\n            if grid[i][j] == 1:\n                if colors[j] == color:\n                    return False\n                if colors[j] == 0 and not self.dfs(grid, colors, j, -1 * color, N):\n                    return False\n        return True\n\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        N = len(graph)\n        grid = [[0] * N for _ in range(N)]\n        colors = [0] * N\n        for i in range(N):\n            for j in graph[i]:\n                grid[i][j] = 1\n        for i in range(N):\n            if colors[i] == 0 and not self.dfs(grid, colors, i, 1, N):\n                return False\n        return True\n"}]},"short-encoding-of-words":{id:"820",name:"short-encoding-of-words",pre:[{text:"\u524d\u7f00\u6811",link:null,color:"purple"}],keyPoints:[{text:"\u524d\u7f00\u6811",link:null,color:"blue"},{text:"\u53bb\u91cd",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/820.short-encoding-of-words.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/820.short-encoding-of-words.md",code:[{language:"py",text:'\nclass Trie:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.Trie = {}\n\n    def insert(self, word):\n        """\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr[\'#\'] = 1\n\n    def search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for w in word:\n            curr = curr[w]\n        # len(curr) == 1 means we meet \'#\'\n        # when we search \'em\'(which reversed from \'me\')\n        # the result is len(curr) > 1\n        # cause the curr look like { \'#\': 1, i: {...}}\n        return len(curr) == 1\nclass Solution:\n    def minimumLengthEncoding(self, words: List[str]) -> int:\n        trie = Trie()\n        cnt = 0\n        words = set(words)\n        for word in words:\n            trie.insert(word[::-1])\n        for word in words:\n            if trie.search(word[::-1]):\n                cnt += len(word) + 1\n        return cnt\n\n'}]},"walking-robot-simulation":{id:"874",name:"walking-robot-simulation",pre:[{text:"hashtable",link:null,color:"lime"}],keyPoints:[{text:"\u7406\u89e3\u9898\u610f\uff0c\u8fd9\u9053\u9898\u5bb9\u6613\u7406\u89e3\u9519\u9898\u610f\uff0c\u6c42\u89e3\u4e3a`\u6700\u7ec8\u4f4d\u7f6e\u8ddd\u79bb\u539f\u70b9\u7684\u8ddd\u79bb`",link:null,color:"blue"},{text:"\u5efa\u7acb\u5750\u6807\u7cfb",link:null,color:"blue"},{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/874.walking-robot-simulation.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/874.walking-robot-simulation.md",code:[{language:"py",text:"\nclass Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        pos = [0, 0]\n        deg = 90\n        ans = 0\n        obstaclesSet = set(map(tuple, obstacles))\n\n        for command in commands:\n            if command == -1:\n                deg = (deg + 270) % 360\n            elif command == -2:\n                deg = (deg + 90) % 360\n            else:\n                if deg == 0:\n                    i = 0\n                    while i < command and not (pos[0] + 1, pos[1]) in obstaclesSet:\n                        pos[0] += 1\n                        i += 1\n                if deg == 90:\n                    i = 0\n                    while i < command and not (pos[0], pos[1] + 1) in obstaclesSet:\n                        pos[1] += 1\n                        i += 1\n                if deg == 180:\n                    i = 0\n                    while i < command and not (pos[0] - 1, pos[1]) in obstaclesSet:\n                        pos[0] -= 1\n                        i += 1\n                if deg == 270:\n                    i = 0\n                    while i < command and not (pos[0], pos[1] - 1) in obstaclesSet:\n                        pos[1] -= 1\n                        i += 1\n                ans = max(ans, pos[0] ** 2 + pos[1] ** 2)\n        return ans\n"}]},"koko-eating-bananas":{id:"875",name:"koko-eating-bananas",pre:[{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"magenta"}],keyPoints:[{text:"\u4e8c\u5206\u67e5\u627e",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/875.koko-eating-bananas.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/875.koko-eating-bananas.md",code:[{language:"java",text:"\npublic int binarySearch(int[] nums, int target) {\n    // \u5de6\u53f3\u90fd\u95ed\u5408\u7684\u533a\u95f4 [l, r]\n    int left = 0; \n    int right = nums.length - 1;\n\n    while(left <= right) {\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target)\n            return mid; \n        else if (nums[mid] < target)\n\t\t\t// \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n            left = mid + 1;\n        else if (nums[mid] > target)\n            // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid - 1]\n            right = mid - 1;\n    }\n    return -1;\n}\n"},{language:"java",text:"\npublic int binarySearchLeft(int[] nums, int target) {\n\t// \u641c\u7d22\u533a\u95f4\u4e3a [left, right]\n    int left = 0;\n    int right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] < target) {\n            // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n            left = mid + 1;\n        } else if (nums[mid] > target) {\n            // \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid-1]\n            right = mid - 1;\n        } else if (nums[mid] == target) {\n            // \u6536\u7f29\u53f3\u8fb9\u754c\n            right = mid - 1;\n        }\n    }\n    // \u68c0\u67e5\u662f\u5426\u8d8a\u754c\n    if (left >= nums.length || nums[left] != target)\n        return -1;\n    return left;\n}\n"},{language:"java",text:"\npublic int binarySearchRight(int[] nums, int target) {\n\t// \u641c\u7d22\u533a\u95f4\u4e3a [left, right]\n    int left = 0\n    int right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] < target) {\n\t\t\t// \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [mid+1, right]\n            left = mid + 1;\n        } else if (nums[mid] > target) {\n\t\t\t// \u641c\u7d22\u533a\u95f4\u53d8\u4e3a [left, mid-1]\n            right = mid - 1;\n        } else if (nums[mid] == target) {\n            // \u6536\u7f29\u5de6\u8fb9\u754c\n            left = mid + 1;\n        }\n    }\n    // \u68c0\u67e5\u662f\u5426\u8d8a\u754c\n    if (right < 0 || nums[right] != target)\n        return -1;\n    return right;\n}\n"},{language:"js",text:"\n\nfunction canEatAllBananas(piles, H, mid) {\n     let h = 0;\n     for(let pile of piles) {\n        h += Math.ceil(pile / mid);\n     }\n\n     return h <= H;\n }\n/**\n * @param {number[]} piles\n * @param {number} H\n * @return {number}\n */\nvar minEatingSpeed = function(piles, H) {\n    let lo = 1,\n    hi = Math.max(...piles);\n    // [l, r) \uff0c \u5de6\u95ed\u53f3\u5f00\u7684\u597d\u5904\u662f\u5982\u679c\u80fd\u627e\u5230\uff0c\u90a3\u4e48\u8fd4\u56de l \u548c r \u90fd\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a\u6700\u7ec8 l \u7b49\u4e8e r\u3002\n    while(lo <= hi) {\n        let mid = lo + ((hi - lo) >> 1);\n        if (canEatAllBananas(piles, H, mid)) {\n            hi = mid - 1;\n        } else {\n            lo = mid + 1;\n        }\n    }\n\n    return lo; //  \u4e0d\u80fd\u9009\u62e9hi\n};\n"},{language:"py",text:"\nclass Solution:\n    def canEatAllBananas(self, piles, H, K):\n        t = 0\n        for pile in piles:\n            t += math.ceil(pile / K)\n        return t <= H\n    def minEatingSpeed(self, piles: List[int], H: int) -> int:\n        l, r = 1, max(piles)\n        # [l, r) \uff0c \u5de6\u95ed\u53f3\u5f00\u7684\u597d\u5904\u662f\u5982\u679c\u80fd\u627e\u5230\uff0c\u90a3\u4e48\u8fd4\u56de l \u548c r \u90fd\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a\u6700\u7ec8 l \u7b49\u4e8e r\u3002 \n        while l < r:\n            mid = (l + r) >> 1\n            if self.canEatAllBananas(piles, H, mid):\n                r = mid\n            else:\n                l = mid + 1\n        return l\n\n"}]},"stone-game":{id:"877",name:"stone-game",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u53ef\u4ee5\u7528DP\uff08\u52a8\u6001\u89c4\u5212\uff09",link:null,color:"blue"},{text:"\u53ef\u4ee5\u4ece\u6570\u5b66\u7684\u89d2\u5ea6\u53bb\u5206\u6790>......(\ud83d\ude05)",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/877.stone-game.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/877.stone-game.md",code:[{language:"js",text:"\n/**\n * @param {number[]} piles\n * @return {boolean}\n */\nvar stoneGame = function(piles) {\n  return true;\n};\n"}]},"possible-bipartition":{id:"886",name:"possible-bipartition",pre:[{text:"\u56fe\u7684\u904d\u5386",link:null,color:"geekblue"},{text:"DFS",link:null,color:"red"}],keyPoints:[{text:"\u4e8c\u5206\u56fe",link:null,color:"blue"},{text:"\u67d3\u8272\u6cd5",link:null,color:"blue"},{text:"\u56fe\u7684\u5efa\u7acb\u548c\u904d\u5386",link:null,color:"blue"},{text:"colors\u6570\u7ec4",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/886.possible-bipartition.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/886.possible-bipartition.md",code:[{language:"py",text:"\n        graph = [[0] * N for i in range(N)]\n        for a, b in dislikes:\n            graph[a - 1][b - 1] = 1\n            graph[b - 1][a - 1] = 1\n"},{language:"py",text:"\n# \u5176\u4e2dj \u8868\u793a\u5f53\u524d\u662f\u7b2c\u51e0\u4e2a\u4eba\uff0cN\u8868\u793a\u603b\u4eba\u6570\u3002 dfs\u7684\u529f\u80fd\u5c31\u662f\u6839\u636ecolors\u548cgraph\u5206\u914d\u7ec4\uff0ctrue\u8868\u793a\u53ef\u4ee5\u5206\uff0cfalse\u8868\u793a\u4e0d\u53ef\u4ee5\uff0c\u5177\u4f53\u4ee3\u7801\u89c1\u4ee3\u7801\u533a\u3002\nif colors[j] == 0 and not self.dfs(graph, colors, j, -1 * color, N)\n"},{language:"py",text:"\nclass Solution:\n    def dfs(self, graph, colors, i, color, N):\n        colors[i] = color\n        for j in range(N):\n            # dislike eachother\n            if graph[i][j] == 1:\n                if colors[j] == color:\n                    return False\n                if colors[j] == 0 and not self.dfs(graph, colors, j, -1 * color, N):\n                    return False\n        return True\n\n    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:\n        graph = [[0] * N for i in range(N)]\n        colors = [0] * N\n        for a, b in dislikes:\n            graph[a - 1][b - 1] = 1\n            graph[b - 1][a - 1] = 1\n        for i in range(N):\n            if colors[i] == 0 and not self.dfs(graph, colors, i, 1, N):\n                return False\n        return True\n\n"}]},"super-egg-drop":{id:"887",name:"super-egg-drop",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"dp\u5efa\u6a21\u601d\u8def\u8981\u53d1\u751f\u53d8\u5316,\u5373`dp[M][K]meansthat,givenKeggsandMmoves\uff0cwhatisthemaximumnumberoffloorthatwecancheck.`",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/887.super-egg-drop.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/887.super-egg-drop.md",code:[{language:"js",text:"\nconst dp = Array(K + 1);\ndp[0] = Array(N + 1).fill(0);\nfor (let i = 1; i < K + 1; i++) {\n  dp[i] = [0];\n  for (let j = 1; j < N + 1; j++) {\n    // \u53ea\u6709\u4e00\u4e2a\u9e21\u86cb\n    if (i === 1) {\n      dp[i][j] = j;\n      continue;\n    }\n    // \u53ea\u6709\u4e00\u5c42\u697c\n    if (j === 1) {\n      dp[i][j] = 1;\n      continue;\n    }\n\n    // \u6bcf\u4e00\u5c42\u6211\u4eec\u90fd\u6a21\u62df\u4e00\u904d\n    const all = [];\n    for (let k = 1; k < j + 1; k++) {\n      const brokenCount = dp[i - 1][k - 1]; // \u5982\u679c\u788e\u4e86\n      const notBrokenCount = dp[i][j - k]; // \u5982\u679c\u6ca1\u788e\n      all.push(Math.max(brokenCount, notBrokenCount)); // \u6700\u574f\u7684\u53ef\u80fd\n    }\n    dp[i][j] = Math.min(...all) + 1; // \u6700\u574f\u7684\u96c6\u5408\u4e2d\u6211\u4eec\u53d6\u6700\u597d\u7684\u60c5\u51b5\n  }\n}\n\nreturn dp[K][N];\n"},{language:"js",text:"\n/**\n * @param {number} K\n * @param {number} N\n * @return {number}\n */\nvar superEggDrop = function (K, N) {\n  // \u4e0d\u9009\u62e9dp[K][M]\u7684\u539f\u56e0\u662fdp[M][K]\u53ef\u4ee5\u7b80\u5316\u64cd\u4f5c\n  const dp = Array(N + 1)\n    .fill(0)\n    .map((_) => Array(K + 1).fill(0));\n\n  let m = 0;\n  while (dp[m][K] < N) {\n    m++;\n    for (let k = 1; k <= K; ++k) dp[m][k] = dp[m - 1][k - 1] + 1 + dp[m - 1][k];\n  }\n  return m;\n};\n"}]},"maximum-frequency-stack":{id:"895",name:"maximum-frequency-stack",pre:[{text:"\u6808",link:null,color:"red"},{text:"\u54c8\u5e0c\u8868",link:null,color:"gold"}],keyPoints:[{text:"\u6808\u7684\u57fa\u672c\u6027\u8d28",link:null,color:"blue"},{text:"hashtable\u7684\u57fa\u672c\u6027\u8d28",link:null,color:"blue"},{text:"push\u548cpop\u7684\u65f6\u5019\u540c\u65f6\u66f4\u65b0fraq\uff0cmax_fraq\u548cfraq_stack\u3002",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/895.maximum-frequency-stack.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/895.maximum-frequency-stack.md",code:[{language:"py",text:"\nclass FreqStack:\n\n    def __init__(self):\n        self.fraq = collections.defaultdict(lambda: 0)\n        self.fraq_stack = collections.defaultdict(list)\n        self.max_fraq = 0\n        \n    def push(self, x: int) -> None:\n        self.fraq[x] += 1\n        if self.fraq[x] > self.max_fraq:\n            self.max_fraq = self.fraq[x]\n        self.fraq_stack[self.fraq[x]].append(x)    \n        \n    def pop(self) -> int:\n        ans = self.fraq_stack[self.max_fraq].pop()\n        self.fraq[ans] -= 1\n        if not self.fraq_stack[self.max_fraq]:\n            self.max_fraq -= 1\n        return ans\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack()\n# obj.push(x)\n# param_2 = obj.pop()\n"}]},"rle-iterator":{id:"900",name:"rle-iterator",pre:[{text:"\u54c8\u592b\u66fc\u7f16\u7801\u548c\u6e38\u7a0b\u7f16\u7801",link:null,color:"purple"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/900.rle-iterator.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/900.rle-iterator.md",code:[{language:"js",text:"\n/**\n * @param {number[]} A\n */\nvar RLEIterator = function(A) {\n    this.A = A;\n    this.current = 0;\n};\n\n\n/** \n * @param {number} n\n * @return {number}\n */\nRLEIterator.prototype.next = function(n) {\n    const A = this.A;\n    while(this.current < A.length && A[this.current] < n){\n        n = n - A[this.current];\n        this.current += 2;\n    }\n    \n    if(this.current >= A.length){\n        return -1;\n    }\n    \n    A[this.current] = A[this.current] - n; // \u66f4\u65b0Count\n    return A[this.current + 1]; // \u8fd4\u56deelement\n};\n\n/** \n * Your RLEIterator object will be instantiated and called as such:\n * var obj = new RLEIterator(A)\n * var param_1 = obj.next(n)\n */\n"}]},"sort-an-array":{id:"912",name:"sort-an-array",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[{text:"\u6392\u5e8f\u7b97\u6cd5",link:null,color:"blue"},{text:"\u6ce8\u610f\u9898\u76ee\u7684\u9650\u5236\u6761\u4ef6\u4ece\u800c\u9009\u62e9\u5408\u9002\u7684\u7b97\u6cd5",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u767e\u5ea6"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/912.sort-an-array.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/912.sort-an-array.md",code:[{language:"js",text:"\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArray = function(nums) {\n    const counts = Array(50000 * 2 + 1).fill(0);\n    const res = [];\n    for(const num of nums) counts[50000 + num] += 1;\n    for(let i in counts)  {\n        while(counts[i]--) {\n            res.push(i - 50000)\n        }\n    }\n    return res;\n};\n"},{language:"js",text:"\nfunction swap(nums, a, b) {\n    const temp = nums[a];\n    nums[a] = nums[b];\n    nums[b] = temp;\n}\n\nfunction helper(nums, start, end) {\n    if (start >= end) return;\n    const pivotIndex = start + ((end - start) >>> 1)\n    const pivot = nums[pivotIndex]\n    let i = start;\n    let j = end;\n    while (i <= j) {\n        while (nums[i] < pivot) i++;\n        while (nums[j] > pivot) j--;\n        if (i <= j) {\n            swap(nums, i, j);\n            i++;\n            j--;\n        }\n    }\n    helper(nums, start, j);\n    helper(nums, i, end);\n}\n\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArray = function(nums) {\n    helper(nums, 0, nums.length - 1);\n    return nums;\n};\n"}]},"knight-dialer":{id:"935",name:"knight-dialer",pre:[{text:"DFS",link:null,color:"red"},{text:"\u8bb0\u5fc6\u5316\u641c\u7d22",link:null,color:"lime"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/935.knight-dialer.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/935.knight-dialer.md",code:[{language:"py",text:"\nclass Solution:\n    def knightDialer(self, N: int) -> int:\n        cnt = 0\n        jump = [[4, 6], [6, 8], [7, 9], [4, 8], [\n            0, 3, 9], [], [0, 1, 7], [2, 6], [1, 3], [2, 4]]\n        visited = dict()\n\n        def helper(i, n):\n            if (i, n) in visited: return visited[(i, n)]\n            if n == 1:\n                return 1\n            cnt = 0\n            for j in jump[i]:\n                cnt += helper(j, n - 1)\n            visited[(i, n)] = cnt\n            return cnt\n        for i in range(10):\n            cnt += helper(i, N)\n        return cnt % (10**9 + 7)\n"},{language:"py",text:"\nclass Solution:\n    def knightDialer(self, N: int) -> int:\n        a0 = a1 = a2 = a3 = a4 = a5 = a6 = a7 = a8 = a9 = 1\n        for _ in range(N - 1):\n            a0, a1, a2, a3, a4, a5, a6, a7, a8, a9 = a4 + a6, a6 + a8, a7 + \\\n                a9, a4 + a8, a0 + a3 + a9, 0, a0 + a1 + a7, a2 + a6, a1 + a3, a2 + a4\n        return (a0 + a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9) % (10**9 + 7)\n"}]},"capacity-to-ship-packages-within-d-days-cn":{id:"1011",name:"capacity-to-ship-packages-within-d-days-cn",pre:[{text:"\u4e8c\u5206\u6cd5",link:null,color:"blue"}],keyPoints:[{text:"\u80fd\u591f\u8bc6\u522b\u51fa\u662f\u7ed9\u5b9a\u7684\u6709\u9650\u5e8f\u5217\u67e5\u627e\u4e00\u4e2a\u6570\u5b57\uff08\u4e8c\u5206\u67e5\u627e\uff09\uff0c\u8981\u6c42\u4f60\u5bf9\u4e8c\u5206\u67e5\u627e\u4ee5\u53ca\u53d8\u4f53\u5341\u5206\u719f\u6089",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1011.capacity-to-ship-packages-within-d-days-cn.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1011.capacity-to-ship-packages-within-d-days-cn.md",code:[{language:"js",text:"\n/**\n * @param {number[]} weights\n * @param {number} D\n * @return {number}\n */\nvar shipWithinDays = function(weights, D) {\n  let high = weights.reduce((acc, cur) => acc + cur)\n  let low = 0\n\n  while(low < high) {\n    let mid = Math.floor((high + low) / 2)\n    if (canShip(mid)) {\n      high = mid\n    } else {\n      low = mid + 1\n    }\n  }\n\n  return low\n\n  function canShip(opacity) {\n    let remain = opacity\n    let count = 1\n    for (let weight of weights) {\n      if (weight > opacity) {\n        return false\n      }\n      remain -= weight\n      if (remain < 0) {\n        count++\n        remain = opacity - weight\n      }\n      if (count > D) {\n        return false\n      }\n    }\n    return count <= D\n  }\n};\n"},{language:"py",text:"\ndef canShip(opacity):\n    # \u6307\u5b9a\u8239\u7684\u5bb9\u91cf\u662f\u5426\u53ef\u4ee5\u5728D\u5929\u8fd0\u5b8c\n    lo = 0\n    hi = total\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if canShip(mid):\n            hi = mid\n        else:\n            lo = mid + 1\n\n    return lo\n"},{language:"py",text:"\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        lo = 0\n        hi = 0\n\n        def canShip(opacity):\n            days = 1\n            remain = opacity\n            for weight in weights:\n                if weight > opacity:\n                    return False\n                remain -= weight\n                if remain < 0:\n                    days += 1\n                    remain = opacity - weight\n            return days <= D\n\n        for weight in weights:\n            hi += weight\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if canShip(mid):\n                hi = mid\n            else:\n                lo = mid + 1\n\n        return lo\n"}]},"best-sightseeing-pair":{id:"1014",name:"best-sightseeing-pair",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"},{text:"dp\u7a7a\u95f4\u4f18\u5316",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1014.best-sightseeing-pair.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1014.best-sightseeing-pair.md",code:[{language:"py",text:"\nclass Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) -> int:\n        n = len(A)\n        res = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                res = max(res, A[i] + A[j] + i - j)\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) -> int:\n        n = len(A)\n        dp = [float('-inf')] * (n + 1)\n        res = 0\n        for i in range(n):\n            dp[i + 1] = max(dp[i], A[i] + i)\n            res = max(res, dp[i] + A[i] - i)\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) -> int:\n        n = len(A)\n        pre = A[0] + 0\n        res = 0\n        for i in range(1, n):\n            res = max(res, pre + A[i] - i)\n            pre = max(pre, A[i] + i)\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def maxScoreSightseeingPair(self, A: List[int]) -> int:\n        n = len(A)\n        pre = A[0] + 0\n        res = 0\n        for i in range(1, n):\n            # res = max(res, pre + A[i] - i)\n            # pre = max(pre, A[i] + i)\n            res = res if res > pre + A[i] - i else pre + A[i] - i\n            pre = pre if pre > A[i] + i else A[i] + i\n        return res\n"}]},"smallest-integer-divisible-by-k":{id:"1015",name:"smallest-integer-divisible-by-k",pre:[{text:"\u5faa\u73af\u8282",link:null,color:"purple"}],keyPoints:[{text:"\u6570\u5b66\uff08\u65e0\u9650\u5faa\u73af\u4e0e\u5faa\u73af\u8282\uff09",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1015.smallest-integer-divisible-by-k.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1015.smallest-integer-divisible-by-k.md",code:[{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1015 lang=python3\n#\n# [1015] \u53ef\u88ab K \u6574\u9664\u7684\u6700\u5c0f\u6574\u6570\n#\n\n# @lc code=start\n\n\nclass Solution:\n    def smallestRepunitDivByK(self, K: int) -> int:\n        if K % 10 in [2, 4, 5, 6, 8]:\n            return - 1\n        seen = set()\n        mod = 0\n        for i in range(1, K + 1):\n            mod = (mod * 10 + 1) % K\n            if mod in seen:\n                return -1\n            if mod == 0:\n                return ix\n            seen.add(mod)\n\n        # @lc code=end\n\n\n"}]},"next-greater-node-in-linked-list":{id:"1019",name:"next-greater-node-in-linked-list",pre:[{text:"\u94fe\u8868",link:null,color:"magenta"},{text:"\u6808",link:null,color:"red"}],keyPoints:[{text:"\u5355\u8c03\u6808\uff08\u5355\u8c03\u9012\u51cf\u6808\uff09",link:null,color:"blue"},{text:"\u5355\u8c03\u6808\u7684\u4ee3\u7801\u6a21\u677f",link:null,color:"blue"}],companies:[{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1019.next-greater-node-in-linked-list.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1019.next-greater-node-in-linked-list.md",code:[{language:"py",text:"\ndef monoStack(list):\n    st = []\n    for v in list:\n        while len(st) > 0 and v > st[-1]:\n            st.pop()\n        st.append(v)\n    return st\nmonoStack([5, 4, 2, 1, 3]) # output: [5, 4, 3]\n"},{language:"py",text:"\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n     def nextLargerNodes(self, head):\n        res, st = [], []\n        while head:\n            while len(st) > 0 and head.val > st[-1][1]:\n                res[st.pop()[0]] = head.val\n            st.append((len(res), head.val))\n            res.append(0)\n            head = head.next\n        return res\n"}]},"number-of-enclaves":{id:"1020",name:"number-of-enclaves",pre:[{text:"DFS",link:null,color:"red"},{text:"hashset",link:null,color:"gold"}],keyPoints:[{text:"visited\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u9632\u6b62\u91cd\u590d\u8ba1\u7b97",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1020.number-of-enclaves.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1020.number-of-enclaves.md",code:[{language:"py",text:"\nclass Solution:\n    temp = 0\n    meetEdge = False\n\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        cnt = 0\n        m = len(A)\n        n = len(A[0])\n        visited = set()\n\n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or (i, j) in visited:\n                return\n            visited.add((i, j))\n            if A[i][j] == 1:\n                self.temp += 1\n            else:\n                return\n            if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                self.meetEdge = True\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        for i in range(m):\n            for j in range(n):\n                dfs(i, j)\n                if not self.meetEdge:\n                    cnt += self.temp\n                self.meetEdge = False\n                self.temp = 0\n        return cnt\n\n"},{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1020 lang=python3\n#\n# [1020] \u98de\u5730\u7684\u6570\u91cf\n#\n\n# @lc code=start\n\n\nclass Solution:\n\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        cnt = 0\n        m = len(A)\n        n = len(A[0])\n\n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or A[i][j] == 0:\n                return\n            A[i][j] = 0\n\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n        for j in range(1, n - 1):\n            dfs(0, j)\n            dfs(m - 1, j)\n        for i in range(m):\n            for j in range(n):\n                if A[i][j] == 1:\n                    cnt += 1\n        return cnt\n\n        # @lc code=end\n\n"}]},"camelcase-matching":{id:"1023",name:"camelcase-matching",pre:[{text:"\u53cc\u6307\u9488",link:null,color:"green"}],keyPoints:[{text:"\u53cc\u6307\u9488",link:null,color:"blue"},{text:"\u5b57\u7b26\u4e32\u5339\u914d",link:null,color:"blue"},{text:"\u5b50\u5e8f\u5217",link:null,color:"blue"},{text:"\u5b50\u4e32",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1023.camelcase-matching.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1023.camelcase-matching.md",code:[{language:"py",text:"\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        i = 0\n        j = 0\n        while j < len(t):\n            if i < len(s) and s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n            if i >= len (s):\n                return True\n        return i == len(s)\n"},{language:"py",text:"\nclass Solution:\n    def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:\n        res = []\n        for query in queries:\n            i = 0\n            j = 0\n            while i < len(query):\n                if j < len(pattern) and query[i] == pattern[j]:\n                    i += 1\n                    j += 1\n                elif query[i].islower():\n                    i += 1\n                else:\n                    break\n            if i == len(query) and j == len(pattern):\n                res.append(True)\n            else:\n                res.append(False)\n        return res\n"}]},"maximum-sum-of-two-non-overlapping-subarrays":{id:"1031",name:"maximum-sum-of-two-non-overlapping-subarrays",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"}],keyPoints:[{text:"\u89e3\u67901.\u6ce8\u610f\u56fe\u4e2d\u63cf\u8ff0\u7684\u90fd\u662fA[i",link:null,color:"blue"},{text:"1],\u800c\u4e0d\u662fA[i],\u56e0\u4e3abasecase\u4e3a\u7a7a\u6570\u7ec4,\u800c\u4e0d\u662fA[0];2.\u6c42\u89e3\u56fe\u4e2dASUM\u6570\u7ec4\u7684\u65f6\u5019,\u6ce8\u610f\u5b9a\u4e49\u7684\u662fASUM[i]=sum(A[0:i]),\u56e0\u6b64\u5f53i\u7b49\u4e8e0\u65f6,A[0:0]\u4e3a\u7a7a\u6570\u7ec4,\u5373:ASUM[0]\u4e3a0,\u800cASUM[1]\u624d\u7b49\u4e8eA[0];3.\u6c42\u89e3\u56fe\u4e2dMAXL\u6570\u7ec4\u65f6,\u6ce8\u610fi<L\u65f6,\u6ca1\u6709\u610f\u4e49,\u56e0\u4e3a\u957f\u5ea6\u4e0d\u591f,\u6240\u4ee5\u4ecei=L\u65f6\u624d\u5f00\u59cb\u6c42\u89e3;4.\u6c42\u89e3\u56fe\u4e2dMAXM\u6570\u7ec4\u65f6,\u4e5f\u4e00\u6837,\u8981\u4ecei=M\u65f6\u624d\u5f00\u59cb\u6c42\u89e3;5.\u6c42\u89e3\u56fe\u4e2dSUMM\u6570\u7ec4\u65f6,\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u4e00\u4e2aL\u5b50\u6570\u7ec4\u548c\u4e00\u4e2aM\u5b50\u6570\u7ec4,\u56e0\u6b64\u957f\u5ea6\u8981\u5927\u4e8e\u7b49\u4e8eL+M\u624d\u6709\u610f\u4e49,\u6240\u4ee5\u8981\u4ecei=L+M\u65f6\u5f00\u59cb\u6c42\u89e3.",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1031.maximum-sum-of-two-non-overlapping-subarrays.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1031.maximum-sum-of-two-non-overlapping-subarrays.md",code:[{language:"py",text:'\nclass Solution:\n    def maxSumTwoNoOverlap(self, a: List[int], l: int, m: int) -> int:\n        """\n\n        define asum[i] as the sum of subarray, a[0:i]\n        define maxl[i] as the maximum sum of l-length subarray in a[0:i]\n        define maxm[i] as the maximum sum of m-length subarray in a[0:i]\n        define msum[i] as the maximum sum of non-overlap l-length subarray and m-length subarray\n\n        case 1: a[i] is both not in l-length subarray and m-length subarray, then msum[i] = msum[i - 1]\n        case 2: a[i] is in l-length subarray, then msum[i] = asum[i] - asum[i-l] + maxm[i-l]\n        case 3: a[i] is in m-length subarray, then msum[i] = asum[i] - asum[i-m] + maxl[i-m]\n\n        so, msum[i] = max(msum[i - 1], asum[i] - asum[i-l] + maxl[i-l], asum[i] - asum[i-m] + maxm[i-m])\n        """\n\n        alen, tlen = len(a), l + m\n        asum = [0] * (alen + 1)\n        maxl = [0] * (alen + 1)\n        maxm = [0] * (alen + 1)\n        msum = [0] * (alen + 1)\n\n        for i in range(tlen):\n            if i == 1:\n                asum[i] = a[i - 1]\n            elif i > 1:\n                asum[i] = asum[i - 1] + a[i - 1]\n            if i >= l:\n                maxl[i] = max(maxl[i - 1], asum[i] - asum[i - l])\n            if i >= m:\n                maxm[i] = max(maxm[i - 1], asum[i] - asum[i - m])\n\n        for i in range(tlen, alen + 1):\n            asum[i] = asum[i - 1] + a[i - 1]\n            suml = asum[i] - asum[i - l]\n            summ = asum[i] - asum[i - m]\n            maxl[i] = max(maxl[i - 1], suml)\n            maxm[i] = max(maxm[i - 1], summ)\n            msum[i] = max(msum[i - 1], suml + maxm[i - l], summ + maxl[i - m])\n\n        return msum[-1]\n'}]},"stream-of-characters":{id:"1032",name:"stream-of-characters",pre:[{text:"\u524d\u7f00\u6811",link:null,color:"purple"}],keyPoints:[{text:"\u524d\u7f00\u6811\u6a21\u677f",link:null,color:"blue"},{text:"\u5012\u5e8f\u63d2\u5165",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1032.stream-of-characters.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1032.stream-of-characters.md",code:[{language:"js",text:'\nstreamChecker.query("a"); // stream\uff1a a\nstreamChecker.query("b"); // stream\uff1aba\nstreamChecker.query("c"); // stream\uff1acba\n'},{language:"py",text:"\nclass StreamChecker:\n\n    def __init__(self, words: List[str]):\n        self.trie = Trie()\n        self.stream = deque([])\n\n        for word in set(words):\n            self.trie.insert(word[::-1])\n\n    def query(self, letter: str) -> bool:\n        self.stream.appendleft(letter)\n        return self.trie.search(self.stream)\n"},{language:"py",text:'\nclass Trie:\n\n    def __init__(self):\n        """\n        Initialize your data structure here.\n        """\n        self.Trie = {}\n\n    def insert(self, word):\n        """\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n        curr[\'#\'] = 1\n\n    def search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        curr = self.Trie\n        for w in word:\n            if w not in curr:\n                return False\n            if "#" in curr[w]:\n                return True\n            curr = curr[w]\n        return False\n\n\nclass StreamChecker:\n\n    def __init__(self, words: List[str]):\n        self.trie = Trie()\n        self.stream = deque([])\n\n        for word in set(words):\n            self.trie.insert(word[::-1])\n\n    def query(self, letter: str) -> bool:\n        self.stream.appendleft(letter)\n        return self.trie.search(self.stream)\n\n\n'}]},"path-in-zigzag-labelled-binary-tree":{id:"1104",name:"path-in-zigzag-labelled-binary-tree",pre:[{text:"\u4e8c\u53c9\u6811",link:null,color:"geekblue"}],keyPoints:[{text:"\u6ee1\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff1a1.\u6700\u5c0f\u503c\u662f`2**(level",link:null,color:"blue"},{text:"1)`\uff0c\u6700\u5927\u503c\u662f`2**level",link:null,color:"blue"},{text:"1`\uff0c\u5176\u4e2dlevel\u662f\u6811\u7684\u6df1\u5ea6\u30022.\u5047\u5982\u7236\u8282\u70b9\u7684\u7d22\u5f15\u4e3ai\uff0c\u90a3\u4e48\u5de6\u5b50\u8282\u70b9\u5c31\u662f2\\*i\uff0c\u53f3\u8fb9\u5b50\u8282\u70b9\u5c31\u662f2\\*i+1\u30023.\u5047\u5982\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u662fi\uff0c\u90a3\u4e48\u7236\u8282\u70b9\u7684\u7d22\u5f15\u5c31\u662fi//2\u3002",link:null,color:"blue"},{text:"\u5148\u601d\u8003\u4e00\u822c\u60c5\u51b5\uff08\u4e0d\u662f\u4e4b\u5b57\u5f62\uff09\uff0c\u7136\u540e\u901a\u8fc7\u89c2\u5bdf\u627e\u51fa\u89c4\u5f8b",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1104.path-in-zigzag-labelled-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1104.path-in-zigzag-labelled-binary-tree.md",code:[{language:"py",text:"\nclass Solution:\n    def pathInZigZagTree(self, label: int) -> List[int]:\n        level = 0\n        res = []\n        # for each level, ranged from 2 ** (level - 1) to 2 ** level - 1\n        while 2 ** level - 1 < label:\n            level += 1\n\n        while level > 0:\n            res.insert(0, label)\n            label = 2 ** (level - 1) + 2 ** level - 1 - label\n            label //= 2\n            level -= 1\n        return res\n"}]},"maximum-of-absolute-value-expression":{id:"1131",name:"maximum-of-absolute-value-expression",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"}],keyPoints:[{text:"\u6570\u5b66\u5206\u6790",link:null,color:"blue"}],companies:[{name:"\u963f\u91cc\u5df4\u5df4"},{name:"\u817e\u8baf"},{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1131.maximum-of-absolute-value-expression.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1131.maximum-of-absolute-value-expression.md",code:[{language:"py",text:"\nclass Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        A = []\n        B = []\n        C = []\n        D = []\n        for i in range(len(arr1)):\n            a, b, c, d = arr1[i] + arr2[i] + i, arr1[i] - arr2[i] + \\\n                i, arr2[i] - arr1[i] + i, -1 * arr2[i] - arr1[i] + i\n            A.append(a)\n            B.append(b)\n            C.append(c)\n            D.append(d)\n        return max(max(A) - min(A), max(B) - min(B), max(C) - min(C), max(D) - min(D))\n"},{language:"py",text:"\nclass Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        # \u66fc\u54c8\u987f\u8ddd\u79bb\u6a21\u677f\u4ee3\u7801\n        sign = [1, -1]\n        n = len(arr1)\n        dists = []\n        # \u4e09\u7ef4\u6a21\u677f\n        for a in sign:\n            for b in sign:\n                for c in sign:\n                    maxDist = float('-inf')\n                    minDist = float('inf')\n                    # \u5206\u522b\u8ba1\u7b97\u6240\u6709\u70b9\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\n                    for i in range(n):\n                        dist = arr1[i] * a + arr2[i] * b + i * c\n                        maxDist = max(maxDist, dist)\n                        minDist = min(minDist, dist)\n                    # \u5c06\u6240\u6709\u7684\u70b9\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u653e\u5230dists\u4e2d\n                    dists.append(maxDist - minDist)\n        return max(dists)\n"}]},"optimize-water-distribution-in-a-village-cn":{id:"1168",name:"optimize-water-distribution-in-a-village-cn",pre:[{text:"\u56fe",link:null,color:"green"},{text:"\u6700\u5c0f\u751f\u6210\u6811",link:null,color:"gold"}],keyPoints:[{text:"\u5206\u67901.\u6784\u5efa\u56fe\uff0c\u5f97\u51fa\u6240\u6709\u8fb92.\u5bf9\u6240\u6709\u8fb9\u6392\u5e8f3.\u904d\u5386\u6240\u6709\u7684\u8fb9\uff08\u4ece\u5c0f\u5230\u5927\uff094.\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u8fde\u901a\uff0c\u82e5\u6ca1\u6709\u8fde\u901a\uff0c\u52a0\u4e0a\u8fb9\u4e0a\u7684\u503c\uff0c\u8fde\u901a\u4e24\u4e2a\u8282\u70b9\u3002\u82e5\u5df2\u8fde\u901a\uff0c\u8df3\u8fc7\u3002",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1168.optimize-water-distribution-in-a-village-cn.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1168.optimize-water-distribution-in-a-village-cn.md",code:[{language:"java",text:"\n  class OptimizeWaterDistribution {\n    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {\n      List<EdgeCost> costs = new ArrayList<>();\n      for (int i = 1; i <= n; i++) {\n        costs.add(new EdgeCost(0, i, wells[i - 1]));\n      }\n      for (int[] p : pipes) {\n        costs.add(new EdgeCost(p[0], p[1], p[2]));\n      }\n      Collections.sort(costs);\n      int minCosts = 0;\n      UnionFind uf = new UnionFind(n);\n      for (EdgeCost edge : costs) {\n        int rootX = uf.find(edge.node1);\n        int rootY = uf.find(edge.node2);\n        if (rootX == rootY) continue;\n        minCosts += edge.cost;\n        uf.union(edge.node1, edge.node2);\n        // for each union, we connnect one node\n        n--;\n        // if all nodes already connected, terminate early\n        if (n == 0) {\n          return minCosts;\n        }\n      }\n      return minCosts;\n    }\n  \n    class EdgeCost implements Comparable<EdgeCost> {\n      int node1;\n      int node2;\n      int cost;\n      public EdgeCost(int node1, int node2, int cost) {\n        this.node1 = node1;\n        this.node2 = node2;\n        this.cost = cost;\n      }\n  \n      @Override\n      public int compareTo(EdgeCost o) {\n        return this.cost - o.cost;\n      }\n    }\n    \n    class UnionFind {\n      int[] parent;\n      int[] rank;\n      public UnionFind(int n) {\n        parent = new int[n + 1];\n        for (int i = 0; i <= n; i++) {\n          parent[i] = i;\n        }\n        rank = new int[n + 1];\n      }\n      public int find(int x) {\n        return x == parent[x] ? x : find(parent[x]);\n      }\n      public void union(int x, int y) {\n        int px = find(x);\n        int py = find(y);\n        if (px == py) return;\n        if (rank[px] >= rank[py]) {\n          parent[py] = px;\n          rank[px] += rank[py];\n        } else {\n          parent[px] = py;\n          rank[py] += rank[px];\n        }\n      }\n    }\n  }\n"},{language:"py",text:"\nclass Solution:\n    def minCostToSupplyWater(self, n: int, wells: List[int], pipes: List[List[int]]) -> int:\n        union_find = {i: i for i in range(n + 1)}\n        \n        def find(x):\n            return x if x == union_find[x] else find(union_find[x])\n        \n        def union(x, y):\n            px = find(x)\n            py = find(y)\n            union_find[px] = py\n            \n        graph_wells = [[cost, 0, i] for i, cost in enumerate(wells, 1)]\n        graph_pipes = [[cost, i, j] for i, j, cost in pipes]\n        min_costs = 0\n        for cost, x, y in sorted(graph_wells + graph_pipes):\n            if find(x) == find(y):\n                continue\n            union(x, y)\n            min_costs += cost\n            n -= 1\n            if n == 0:\n                return min_costs\n"}]},"maximum-subarray-sum-with-one-deletion":{id:"1186",name:"maximum-subarray-sum-with-one-deletion",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u7a7a\u95f4\u6362\u65f6\u95f4",link:null,color:"blue"},{text:"\u5934\u5c3e\u53cc\u6570\u7ec4",link:null,color:"blue"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1186.maximum-subarray-sum-with-one-deletion.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1186.maximum-subarray-sum-with-one-deletion.md",code:[{language:"py",text:'\n  class Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n        res = arr[0]\n        def maxSubSum(arr, skip):\n            res = maxSub = float("-inf")\n           \n            for i in range(len(arr)):\n                if i == skip:\n                    continue\n                maxSub = max(arr[i], maxSub + arr[i])\n                res = max(res, maxSub)\n            return res\n\t\t# \u8fd9\u91cc\u5faa\u73af\u5230\u4e86len(arr)\u9879\uff0c\u8868\u793a\u7684\u662f\u4e00\u4e2a\u90fd\u4e0d\u5220\u9664\u7684\u60c5\u51b5\n        for i in range(len(arr) + 1):\n            res = max(res, maxSubSum(arr, i))\n        return res\n'},{language:"py",text:"\nclass Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n        n = len(arr)\n        l = [arr[0]] * n\n        r = [arr[n - 1]] * n\n        if n == 1:\n            return arr[0]\n        res = arr[0]\n        for i in range(1, n):\n            l[i] = max(l[i - 1] + arr[i], arr[i])\n            res = max(res, l[i])\n        for i in range(n - 2, -1, -1):\n            r[i] = max(r[i + 1] + arr[i], arr[i])\n            res = max(res, r[i])\n        for i in range(1, n - 1):\n            res = max(res, l[i - 1] + r[i + 1])\n      \n        return res\n\n"},{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1186 lang=python3\n#\n# [1186] \u5220\u9664\u4e00\u6b21\u5f97\u5230\u5b50\u6570\u7ec4\u6700\u5927\u548c\n#\n\n# @lc code=start\n\n\nclass Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n        # DP\n        max0 = arr[0]\n        max1 = arr[0]\n        res = arr[0]\n        n = len(arr)\n        if n == 1:\n            return max0\n\n        for i in range(1, n):\n            # \u5148\u66f4\u65b0max1\uff0c\u518d\u66f4\u65b0max0\uff0c\u56e0\u4e3amax1\u7528\u5230\u4e86\u4e0a\u4e00\u4e2amax0\n            max1 = max(max1 + arr[i], max0)\n            max0 = max(max0 + arr[i], arr[i])\n            res = max(res, max0, max1)\n        return res\n\n\n# @lc code=end\n\n\n"}]},"longest-arithmetic-subsequence-of-given-difference":{id:"1218",name:"longest-arithmetic-subsequence-of-given-difference",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[{text:"\u5c06`\u4ee5\u6bcf\u4e00\u4e2a\u5143\u7d20\u7ed3\u5c3e\u7684\u6700\u957f\u7b49\u5dee\u5b50\u5e8f\u5217\u7684\u957f\u5ea6`\u7edf\u7edf\u5b58\u8d77\u6765",link:null,color:"blue"}],companies:[{name:"\u817e\u8baf"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1218.longest-arithmetic-subsequence-of-given-difference.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1218.longest-arithmetic-subsequence-of-given-difference.md",code:[{language:"py",text:"\n  def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        n = len(arr)\n        res = 1\n        for i in range(n):\n            count = 1\n            for j in range(i + 1, n):\n                if arr[i] + difference * count == arr[j]:\n                    count += 1\n\n                if count > res:\n                    res = count\n\n        return res\n"},{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1218 lang=python3\n#\n# [1218] \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217\n#\n\n# @lc code=start\n\n\nclass Solution:\n\n    # \u52a8\u6001\u89c4\u5212\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        n = len(arr)\n        res = 1\n        dp = {}\n        for num in arr:\n            dp[num] = 1\n            if num - difference in dp:\n                dp[num] = dp[num - difference] + 1\n\n        return max(dp.values())\n\n# @lc code=end\n"}]},"airplane-seat-assignment-probability":{id:"1227",name:"airplane-seat-assignment-probability",pre:[{text:"\u8bb0\u5fc6\u5316\u641c\u7d22",link:null,color:"lime"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"}],keyPoints:[],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1227.airplane-seat-assignment-probability.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1227.airplane-seat-assignment-probability.md",code:[{language:"py",text:"\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0.5\n        res = 1 / n\n        for i in range(2, n):\n            res += self.nthPersonGetsNthSeat(n - i + 1) * 1 / n\n        return res\n"},{language:"py",text:"\nclass Solution:\n    seen = {}\n\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0.5\n        if n in self.seen:\n            return self.seen[n]\n        res = 1 / n\n        for i in range(2, n):\n            res += self.nthPersonGetsNthSeat(n - i + 1) * 1 / n\n        self.seen[n] = res\n        return res\n"},{language:"py",text:"\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0.5\n\n        dp = [1, .5] * n\n\n        for i in range(2, n):\n            dp[i] = 1 / n\n            for j in range(2, i):\n                dp[i] += dp[i - j + 1] * 1 / n\n        return dp[-1]\n"},{language:"py",text:"\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0.5\n\n        dp = [1, .5] * n\n\n        for i in range(2, n):\n            dp[i] = 1/n+(n-2)/n * dp[n-1]\n        return dp[-1]\n"},{language:"py",text:"\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        return 1 if n == 1 else .5\n\n"}]},"shift-2d-grid":{id:"1260",name:"shift-2d-grid",pre:[{text:"\u6570\u7ec4",link:"https://github.com/azl397985856/leetcode/blob/master/thinkings/basic-data-structure.md",color:"purple"},{text:"\u6570\u5b66",link:null,color:"geekblue"}],keyPoints:[],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1260.shift-2d-grid.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1260.shift-2d-grid.md",code:[{language:"py",text:"\nfrom copy import deepcopy\n\nclass Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        n = len(grid)\n        m = len(grid[0])\n        for _ in range(k):\n            old = deepcopy(grid)\n            for i in range(n):\n                for j in range(m):\n                    if j == m - 1:\n                            grid[(i + 1) % n][0] = old[i][j]\n                    elif i == n - 1 and j == m - 1:\n                        grid[0][0] = old[i][j]\n                    else:\n                        grid[i][j + 1] = old[i][j]\n        return grid\n"},{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1260 lang=python3\n#\n# [1260] \u4e8c\u7ef4\u7f51\u683c\u8fc1\u79fb\n#\n\n# @lc code=start\n\n\nclass Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        n = len(grid)\n        m = len(grid[0])\n        # \u4e8c\u7ef4\u5230\u4e00\u7ef4\n        arr = [grid[i][j] for i in range(n) for j in range(m)]\n        # \u53d6\u6a21\uff0c\u7f29\u5c0fk\u7684\u8303\u56f4\uff0c\u907f\u514d\u65e0\u610f\u4e49\u7684\u8fd0\u7b97\n        k %= m * n\n        res = []\n        # \u9996\u5c3e\u4ea4\u6362\u6cd5\n\n        def reverse(l, r):\n            while l < r:\n                t = arr[l]\n                arr[l] = arr[r]\n                arr[r] = t\n                l += 1\n                r -= 1\n        # \u4e09\u6b21\u65cb\u8f6c\n        reverse(0, m * n - k - 1)\n        reverse(m * n - k, m * n - 1)\n        reverse(0, m * n - 1)\n        # \u4e00\u7ef4\u5230\u4e8c\u7ef4\n        row = []\n        for i in range(m * n):\n            if i > 0 and i % m == 0:\n                res.append(row)\n                row = []\n            row.append(arr[i])\n        res.append(row)\n\n        return res\n\n# @lc code=end\n\n"}]},"find-elements-in-a-contaminated-binary-tree":{id:"1261",name:"find-elements-in-a-contaminated-binary-tree",pre:[{text:"\u4e8c\u8fdb\u5236",link:null,color:"volcano"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1261.find-elements-in-a-contaminated-binary-tree.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1261.find-elements-in-a-contaminated-binary-tree.md",code:[{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass FindElements:\n    node = None\n    def __init__(self, root: TreeNode):\n        def recover(node):\n            if not node:\n                return node;\n            if node.left:\n                node.left.val =  2 * node.val + 1\n            if node.right:\n                 node.right.val = 2 * node.val + 2\n            recover(node.left)\n            recover(node.right)\n            return node\n        root.val = 0\n        self.node = recover(root)\n\n\n    def find(self, target: int) -> bool:\n        def findInTree(node, target):\n            if not node:\n                return False\n            if node.val == target:\n                return True\n            return findInTree(node.left, target) or findInTree(node.right, target)\n        return findInTree(self.node, target)\n\n\n\n\n# Your FindElements object will be instantiated and called as such:\n# obj = FindElements(root)\n# param_1 = obj.find(target)\n"},{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass FindElements:\n    def __init__(self, root: TreeNode):\n        # set \u4e0d\u80fd\u653e\u5728init\u5916\u4fa7\u3002 \u56e0\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u95f4\u4e0d\u4f1a\u9500\u6bc1FindElements\u7684\u53d8\u91cf\n        self.seen = set()\n        def recover(node):\n            if not node:\n                return node;\n            if node.left:\n                node.left.val =  2 * node.val + 1\n                self.seen.add(node.left.val)\n            if node.right:\n                 node.right.val = 2 * node.val + 2\n                 self.seen.add(node.right.val)\n            recover(node.left)\n            recover(node.right)\n            return node\n        root.val = 0\n        self.seen.add(0)\n        self.node = recover(root)\n\n\n    def find(self, target: int) -> bool:\n        return target in self.seen\n\n\n\n\n# Your FindElements object will be instantiated and called as such:\n# obj = FindElements(root)\n# param_1 = obj.find(target)\n"},{language:"py",text:"\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass FindElements:\n    node = None\n    def __init__(self, root: TreeNode):\n        def recover(node):\n            if not node:\n                return node;\n            if node.left:\n                node.left.val =  2 * node.val + 1\n            if node.right:\n                 node.right.val = 2 * node.val + 2\n            recover(node.left)\n            recover(node.right)\n            return node\n        root.val = 0\n        self.node = recover(root)\n\n\n    def find(self, target: int) -> bool:\n        node = self.node\n        for bit in bin(target+1)[3:]:\n            node = node and (node.left, node.right)[int(bit)]\n        return bool(node)\n\n\n\n\n# Your FindElements object will be instantiated and called as such:\n# obj = FindElements(root)\n# param_1 = obj.find(target)\n"}]},"greatest-sum-divisible-by-three":{id:"1262",name:"greatest-sum-divisible-by-three",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u56de\u6eaf\u6cd5",link:null,color:"gold"},{text:"\u6392\u5e8f",link:null,color:"purple"}],keyPoints:[{text:"\u8d2a\u5a6a\u6cd5",link:null,color:"blue"},{text:"\u72b6\u6001\u673a",link:null,color:"blue"},{text:"\u6570\u5b66\u5206\u6790",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1262.greatest-sum-divisible-by-three.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1262.greatest-sum-divisible-by-three.md",code:[{language:"py",text:"\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        self.res = 0\n        def backtrack(temp, start):\n            total = sum(temp)\n            if total % 3 == 0:\n                self.res = max(self.res, total)\n            for i in range(start, len(nums)):\n                temp.append(nums[i])\n                backtrack(temp, i + 1)\n                temp.pop(-1)\n\n\n        backtrack([], 0)\n\n        return self.res\n"},{language:"py",text:"\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        one = []\n        two = []\n        total = 0\n\n        for num in nums:\n            total += num\n            if num % 3 == 1:\n                one.append(num)\n            if num % 3 == 2:\n                two.append(num)\n        one.sort()\n        two.sort()\n        if total % 3 == 0:\n            return total\n        elif total % 3 == 1 and one:\n            if len(two) >= 2 and one[0] > two[0] + two[1]:\n                return total - two[0] - two[1]\n            return total - one[0]\n        elif total % 3 == 2 and two:\n            if len(one) >= 2 and two[0] > one[0] + one[1]:\n                return total - one[0] - one[1]\n            return total - two[0]\n        return 0\n"},{language:"py",text:"\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        one = [float('inf')] * 2\n        two = [float('inf')] * 2\n        total = 0\n\n        for num in nums:\n            total += num\n            if num % 3 == 1:\n                if num < one[0]:\n                    t = one[0]\n                    one[0] = num\n                    one[1] = t\n                elif num < one[1]:\n                    one[1] = num\n            if num % 3 == 2:\n                if num < two[0]:\n                    t = two[0]\n                    two[0] = num\n                    two[1] = t\n                elif num < two[1]:\n                    two[1] = num\n        if total % 3 == 0:\n            return total\n        elif total % 3 == 1 and one:\n            if len(two) >= 2 and one[0] > two[0] + two[1]:\n                return total - two[0] - two[1]\n            return total - one[0]\n        elif total % 3 == 2 and two:\n            if len(one) >= 2 and two[0] > one[0] + one[1]:\n                return total - one[0] - one[1]\n            return total - two[0]\n        return 0\n"},{language:"py",text:"\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        state = [0, float('-inf'), float('-inf')]\n\n        for num in nums:\n            if num % 3 == 0:\n                state = [state[0] + num, state[1] + num, state[2] + num]\n            if num % 3 == 1:\n                a = max(state[2] + num, state[0])\n                b = max(state[0] + num, state[1])\n                c = max(state[1] + num, state[2])\n                state = [a, b, c]\n            if num % 3 == 2:\n                a = max(state[1] + num, state[0])\n                b = max(state[2] + num, state[1])\n                c = max(state[0] + num, state[2])\n                state = [a, b, c]\n        return state[0]\n"},{language:"py",text:"\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        state = [0, float('-inf'), float('-inf')]\n\n        for num in nums:\n            temp = [0] * 3\n            for i in range(3):\n                temp[(i + num) % 3] = max(state[(i + num) % 3], state[i] + num)\n            state = temp\n\n        return state[0]\n"}]},"maximum-number-of-occurrences-of-a-substring":{id:"1297",name:"maximum-number-of-occurrences-of-a-substring",pre:[{text:"\u5b57\u7b26\u4e32",link:null,color:"green"},{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"purple"}],keyPoints:[{text:"\u6ed1\u52a8\u7a97\u53e3",link:null,color:"blue"},{text:"\u8bc6\u522b\u9898\u76ee\u5e72\u6270\u4fe1\u606f",link:null,color:"blue"},{text:"\u770b\u9898\u76ee\u9650\u5236\u6761\u4ef6\uff0c\u5bf9\u4e8e\u672c\u9898\u6709\u7528\u7684\u4fe1\u606f\u662f`1<=maxLetters<=26`",link:null,color:"blue"}],companies:[{name:"\u5b57\u8282\u8df3\u52a8"}],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1297.maximum-number-of-occurrences-of-a-substring.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1297.maximum-number-of-occurrences-of-a-substring.md",code:[{language:"java",text:"\n public int maxFreq(String s, int maxLetters, int minSize, int maxSize) {\n    Map<String, Integer> counter = new HashMap<>();\n    int res = 0;\n    for (int i = 0; i < s.length() - minSize + 1; i++) {\n        String substr = s.substring(i, i + minSize);\n        if (checkNum(substr, maxLetters)) {\n            int newVal = counter.getOrDefault(substr, 0) + 1;\n            counter.put(substr, newVal);\n            res = Math.max(res, newVal);\n        }\n    }\n    return res;\n}\npublic boolean checkNum(String substr, int maxLetters) {\n    Set<Character> set = new HashSet<>();\n    for (int i = 0; i < substr.length(); i++)\n        set.add(substr.charAt(i));\n    return set.size() <= maxLetters;\n}\n\n"},{language:"py",text:"\nclass Solution:\n    def maxFreq(self, s: str, maxLetters: int, minSize: int, maxSize: int) -> int:\n        n = len(s)\n        letters = set()\n        cnts = dict()\n        res = 0\n        for i in range(n - minSize + 1):\n            length = minSize\n            while i + length <= n and length <= maxSize:\n                t = s[i:i + length]\n                for c in t:\n                    if len(letters) > maxLetters:\n                        break\n                    letters.add(c)\n                if len(letters) <= maxLetters:\n                    cnts[t] = cnts.get(t, 0) + 1\n                    res = max(res, cnts[t])\n                letters.clear()\n                length += 1\n        return res\n"},{language:"py",text:"\n def maxFreq(self, s: str, maxLetters: int, minSize: int, maxSize: int) -> int:\n        counter, res = {}, 0\n        for i in range(0, len(s) - minSize + 1):\n            sub = s[i : i + minSize]\n            if len(set(sub)) <= maxLetters:\n                counter[sub] = counter.get(sub, 0) + 1\n                res = max(res, counter[sub])\n        return res;\n\n# @lc code=end\n"}]},"xor-queries-of-a-subarray":{id:"1310",name:"xor-queries-of-a-subarray",pre:[{text:"\u524d\u7f00\u548c",link:null,color:"cyan"}],keyPoints:[{text:"\u5f02\u6216\u7684\u6027\u8d28x^y^x=y",link:null,color:"blue"},{text:"\u524d\u7f00\u8868\u8fbe\u5f0f",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1310.xor-queries-of-a-subarray.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1310.xor-queries-of-a-subarray.md",code:[{language:"java",text:"\n  public int[] xorQueries(int[] arr, int[][] queries) {\n\n        int[] preXor = new int[arr.length];\n        preXor[0] = 0;\n\n        for (int i = 1; i < arr.length; i++)\n            preXor[i] = preXor[i - 1] ^ arr[i - 1];\n\n        int[] res = new int[queries.length];\n\n        for (int i = 0; i < queries.length; i++) {\n\n            int left = queries[i][0], right = queries[i][1];\n            res[i] = arr[right] ^ preXor[right] ^ preXor[left];\n        }\n\n        return res;\n    }\n\n"},{language:"cpp",text:"\nclass Solution {\npublic:\n    vector<int> xorQueries(vector<int>& arr, vector<vector<int>>& queries) {\n        vector<int>res;\n        for(int i=1; i<arr.size(); ++i){\n            arr[i]^=arr[i-1];\n        }\n        for(vector<int>temp :queries){\n            if(temp[0]==0){\n                res.push_back(arr[temp[1]]);\n            }\n            else{\n                res.push_back(arr[temp[0]-1]^arr[temp[1]]);\n            }\n        }\n        return res;\n    }\n};\n"},{language:"py",text:"\n\nclass Solution:\n    def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]:\n \t\tres = []\n        for (L, R) in queries:\n            i = L\n            xor = 0\n            while i <= R:\n                xor ^= arr[i]\n                i += 1\n            res.append(xor)\n        return res\n"},{language:"py",text:"\n#\n# @lc app=leetcode.cn id=1218 lang=python3\n#\n# [1218] \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217\n#\n\n# @lc code=start\n\n\nclass Solution:\n    def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]:\n\t\tpre = [0]\n        res = []\n        for i in range(len(arr)):\n            pre.append(pre[i] ^ arr[i])\n        for (L, R) in queries:\n            res.append(pre[L] ^ pre[R + 1])\n        return res\n\n# @lc code=end\n"}]},"remove-palindromic-subsequences":{id:"1332",name:"remove-palindromic-subsequences",pre:[{text:"\u56de\u6587",link:null,color:"lime"}],keyPoints:[{text:"\u6ce8\u610f\u5ba1\u9898\u76ee\uff0c\u4e00\u5b9a\u8981\u5229\u7528\u9898\u76ee\u6761\u4ef6\u201c\u53ea\u542b\u6709a\u548cb\u4e24\u4e2a\u5b57\u7b26\u201d\u5426\u5219\u5bb9\u6613\u505a\u7684\u5f88\u9ebb\u70e6",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1332.remove-palindromic-subsequences.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1332.remove-palindromic-subsequences.md",code:[{language:"py",text:"\n\nclass Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == '':\n            return 0\n        def isPalindrome(s):\n            l = 0\n            r = len(s) - 1\n            while l < r:\n                if s[l] != s[r]:\n                    return False\n                l += 1\n                r -= 1\n            return True\n        return 1 if isPalindrome(s) else 2\n"},{language:"py",text:"\nclass Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        if s == '':\n            return 0\n        return 1 if s == s[::-1] else 2\n\n"}]},"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance":{id:"1334",name:"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",pre:[{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"},{text:"Floyd-Warshall",link:null,color:"purple"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1334.find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1334.find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance.md",code:[{language:"py",text:"\nclass Solution:\n    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:\n        # \u6784\u5efadist\u77e9\u9635\n        dist = [[float('inf')] * n for _ in  range(n)]\n        for i, j, w in edges:\n            dist[i][j] = w\n            dist[j][i] = w\n        for i in range(n):\n            dist[i][i] = 0\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n        # \u8fc7\u6ee4\n        res = 0\n        minCnt = float('inf')\n        for i in range(n):\n            cnt = 0\n            for d in dist[i]:\n                if d <= distanceThreshold:\n                    cnt += 1\n            if cnt <= minCnt:\n                minCnt = cnt\n                res = i\n        return res\n\n\n"}]},"find-the-longest-substring-containing-vowels-in-even-counts":{id:"1371",name:"find-the-longest-substring-containing-vowels-in-even-counts",pre:[{text:"\u524d\u7f00\u548c",link:null,color:"cyan"},{text:"\u72b6\u6001\u538b\u7f29",link:null,color:"green"}],keyPoints:[{text:"\u524d\u7f00\u548c",link:null,color:"blue"},{text:"\u72b6\u6001\u538b\u7f29",link:null,color:"blue"}],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1371.find-the-longest-substring-containing-vowels-in-even-counts.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1371.find-the-longest-substring-containing-vowels-in-even-counts.md",code:[{language:"java",text:"\nclass Solution {\n    public int findTheLongestSubstring(String s) {\n\n        int len = s.length();\n\n        if (len == 0)\n            return 0;\n\n        int[][] preSum = new int[len][5];\n        int start = getIndex(s.charAt(0));\n        if (start != -1)\n            preSum[0][start]++;\n\n        // preSum\n        for (int i = 1; i < len; i++) {\n\n            int idx = getIndex(s.charAt(i));\n\n            for (int j = 0; j < 5; j++) {\n\n                if (idx == j)\n                    preSum[i][j] = preSum[i - 1][j] + 1;\n                else\n                    preSum[i][j] = preSum[i - 1][j];\n            }\n        }\n\n        for (int i = len - 1; i >= 0; i--) {\n\n            for (int j = 0; j < len - i; j++) {\n                if (checkValid(preSum, s, j, i + j))\n                    return i + 1;\n            }\n        }\n        return 0;\n    }\n\n\n    public boolean checkValid(int[][] preSum, String s, int left, int right) {\n\n        int idx = getIndex(s.charAt(left));\n\n        for (int i = 0; i < 5; i++)\n            if (((preSum[right][i] - preSum[left][i] + (idx == i ? 1 : 0)) & 1) == 1)\n                return false;\n\n        return true;\n    }\n    public int getIndex(char ch) {\n\n        if (ch == 'a')\n            return 0;\n        else if (ch == 'e')\n            return 1;\n        else if (ch == 'i')\n            return 2;\n        else if (ch == 'o')\n            return 3;\n        else if (ch == 'u')\n            return 4;\n        else\n            return -1;\n    }\n}\n"},{language:"py",text:"\n\nclass Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        for i in range(len(s), 0, -1):\n            for j in range(len(s) - i + 1):\n                sub = s[j:j + i]\n                has_odd_vowel = False\n                for vowel in ['a', 'e', 'i', 'o', 'u']:\n                    if sub.count(vowel) % 2 != 0:\n                        has_odd_vowel = True\n                        break\n                if not has_odd_vowel: return  i\n        return 0\n\n"},{language:"py",text:'\nclass Solution:\n    i_mapper = {\n        "a": 0,\n        "e": 1,\n        "i": 2,\n        "o": 3,\n        "u": 4\n    }\n    def check(self, s, pre, l, r):\n        for i in range(5):\n            if s[l] in self.i_mapper and i == self.i_mapper[s[l]]: cnt = 1\n            else: cnt = 0\n            if (pre[r][i] - pre[l][i] + cnt) % 2 != 0: return False\n        return True\n    def findTheLongestSubstring(self, s: str) -> int:\n        n = len(s)\n\n        pre = [[0] * 5 for _ in range(n)]\n\n        # pre\n        for i in range(n):\n            for j in range(5):\n                if s[i] in self.i_mapper and self.i_mapper[s[i]] == j:\n                    pre[i][j] = pre[i - 1][j] + 1\n                else:\n                    pre[i][j] = pre[i - 1][j]\n        for i in range(n - 1, -1, -1):\n            for j in range(n - i):\n                if self.check(s, pre, j, i + j):\n                    return i + 1\n        return 0\n'},{language:"py",text:'\n\nclass Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        mapper = {\n            "a": 1,\n            "e": 2,\n            "i": 4,\n            "o": 8,\n            "u": 16\n        }\n        seen = {0: -1}\n        res = cur = 0\n\n        for i in range(len(s)):\n            if s[i] in mapper:\n                cur ^= mapper.get(s[i])\n            # \u5168\u90e8\u5947\u5076\u6027\u90fd\u76f8\u540c\uff0c\u76f8\u51cf\u4e00\u5b9a\u90fd\u662f\u5076\u6570\n            if cur in seen:\n                res = max(res, i - seen.get(cur))\n            else:\n                seen[cur] = i\n        return res\n\n'}]},"form-largest-integer-with-digits-that-add-up-to-target":{id:"1449",name:"form-largest-integer-with-digits-that-add-up-to-target",pre:[{text:"\u6570\u7ec4",link:null,color:"purple"},{text:"\u52a8\u6001\u89c4\u5212",link:null,color:"red"},{text:"\u80cc\u5305\u95ee\u9898",link:null,color:"red"}],keyPoints:[],companies:[],giteeSolution:"https://gitee.com/golong/leetcode/blob/master/problems/1449.form-largest-integer-with-digits-that-add-up-to-target.md",solution:"https://github.com/azl397985856/leetcode/blob/master/problems/1449.form-largest-integer-with-digits-that-add-up-to-target.md",code:[{language:"py",text:"\nfor i in 0 to N:\n    for j in 1 to V + 1:\n        dp[j] = max(dp[j], dp[j - cost[i])\n"},{language:"py",text:"\nfor i in 1 to N + 1:\n    # \u8fd9\u91cc\u662f\u5012\u5e8f\u7684\uff0c\u539f\u56e0\u5728\u4e8e\u8fd9\u91cc\u662f01\u80cc\u5305\u3002\n    for j in V to 0:\n        dp[j] = max(dp[j], dp[j - cost[i - 1])\n"},{language:"py",text:"\nfor i in 1 to N + 1:\n    # \u8fd9\u91cc\u4e0d\u662f\u5012\u5e8f\uff0c\u539f\u56e0\u662f\u6211\u4eec\u8fd9\u91cc\u662f\u5b8c\u5168\u80cc\u5305\u95ee\u9898\n    for j in 1 to V + 1:\n        dp[j] = max(dp[j], dp[j - cost[i - 1])\n\n"},{language:"py",text:"\nfor i in 1 to N + 1:\n    for j in V to 0:\n        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - cost[i - 1])\n"},{language:"py",text:"\nfor i in 1 to N + 1:\n   for j in 1 to V + 1:\n       dp[i][j] = max(dp[i - 1][j], dp[i][j - cost[i - 1])\n\n"},{language:"py",text:"\nclass Solution:\n    def largestNumber(self, cost: List[int], target: int) -> str:\n        dp = [0] + [float('-inf')] * target\n        for i in range(9, 0, -1):\n            for j in range(1, target+1):\n                if j >= cost[i - 1]:\n                    dp[j] = max(dp[j], (dp[j-cost[i - 1]] * 10) + i)\n        return str(dp[target]) if dp[target] > 0 else '0'\n\n"},{language:"py",text:"\nfor i in 1 to N + 1:\n    for j in V to 0:\n        ...\n\n"},{language:"py",text:"\nfor j in V to 0:\n    for i in 1 to N + 1:\n        ...\n\n"}]}},S="https://leetcode-cn.com",N="https://leetcode.com",_="https://github.com/azl397985856/leetcode-cheat/issues",L=(t(398),t(399),u.a.TabPane),T=m.a.Panel,z=j,A=Object.values(z);function M(n){var e=n.link,t=n.text,i=n.style,o=n.color;return null!==e?r.a.createElement(c.a,{type:"link",href:e,target:"_blank"},t):r.a.createElement("div",{style:Object(s.a)({display:"inline-block"},i)},r.a.createElement(d.a,{color:o},t))}var P=[{title:"\u9898\u76ee",dataIndex:"name",width:"300",align:"center",render:function(n,e){return r.a.createElement(c.a,{type:"link",href:"".concat(S,"/problems/").concat(n,"/"),target:"_blank"},e.id,".",n)}},{title:"\u6807\u7b7e",dataIndex:"pre",align:"center",render:function(n){return r.a.createElement("div",null,(n||[]).map((function(n){return r.a.createElement(M,{style:{width:"100px",display:"inline-block",margin:"4px 0"},key:n.id,text:n.text,link:n.link,color:n.color})})))}}];var q=function(){chrome.tabs&&chrome.tabs.query({active:!0,lastFocusedWindow:!0},(function(n){var e,t=n[0].url,i=t.match(/problems\/(.+?)\//),r=i&&i[1];o(r),h(!!z[r]),j((e=t,[S,N].some((function(n){return e.includes(n)}))))}));var n=Object(i.useState)(""),e=Object(a.a)(n,2),t=e[0],o=e[1],l=Object(i.useState)(!1),s=Object(a.a)(l,2),d=s[0],h=s[1],x=Object(i.useState)(!0),v=Object(a.a)(x,2),y=v[0],j=v[1];return y?r.a.createElement("div",{className:"container"},d?r.a.createElement(u.a,{defaultActiveKey:"0"},r.a.createElement(L,{tab:"\u524d\u7f6e\u77e5\u8bc6",key:"0"},z[t].pre.map((function(n){var e=n.id,t=n.link,i=n.text,o=n.color;return r.a.createElement(M,{key:e,text:i,link:t,color:o})}))),r.a.createElement(L,{tab:"\u5173\u952e\u70b9",key:"1"},0===z[t].keyPoints.length&&r.a.createElement(i.Fragment,null,"\u6682\u65e0\u5173\u952e\u70b9\uff0c",r.a.createElement("a",{href:_,target:"_blank"},"\u70b9\u51fb\u53cd\u9988")),z[t].keyPoints.map((function(n){n.id;var e=n.link,t=n.text,i=n.color;return r.a.createElement(M,{key:t,text:t,link:e,color:i,style:{marginBottom:6}})}))),r.a.createElement(L,{tab:"\u516c\u53f8",key:"4"},0===z[t].companies.length&&r.a.createElement(i.Fragment,null,"\u6682\u65e0\u516c\u53f8\u8d44\u6599\uff0c",r.a.createElement("a",{href:"https://github.com/azl397985856/leetcode-cheat/issues/1",target:"_blank"},"\u70b9\u51fb\u53cd\u9988")),z[t].companies.map((function(n){var e=n.name;return r.a.createElement(M,{key:e,text:e,link:null,color:w(e),style:{marginBottom:6}})}))),r.a.createElement(L,{tab:"\u9898\u89e3",key:"2"},r.a.createElement(c.a,{type:"link",href:z[t].solution,target:"_blank"},"\u524d\u5f80 github \u9898\u89e3\uff08\u56fd\u5916\uff09"),r.a.createElement(c.a,{type:"link",href:z[t].giteeSolution,target:"_blank"},"\u524d\u5f80 gitee \u9898\u89e3\uff08\u56fd\u5185\uff09")),r.a.createElement(L,{tab:"\u4ee3\u7801",key:"3"},r.a.createElement("div",{className:"code-block"},r.a.createElement(m.a,null,z[t].code.map((function(n){return r.a.createElement(T,{header:r.a.createElement("div",{key:n.text,className:"row",style:{marginTop:"10px"}},r.a.createElement("span",{className:"language language-js"},n.language),r.a.createElement(c.a,{type:"primary",size:"small",onClick:function(e){e.stopPropagation(),function(n,e){var t=document.createElement("textarea");t.textContent=n,document.body.appendChild(t),t.select(),document.execCommand("copy"),t.blur(),document.body.removeChild(t),e instanceof Function&&e()}(n.text,(function(){p.a.success("\u590d\u5236\u6210\u529f\uff5e")}))}},"\u590d\u5236"))},r.a.createElement("div",{dangerouslySetInnerHTML:{__html:b()((e=n.text,t=n.language,"```".concat(t,"\n").concat(e,"```\n")),{renderer:new b.a.Renderer,highlight:function(){var e=n.language;return k.a.highlight(e,n.text).value},pedantic:!1,gfm:!0,langPrefix:n.language,breaks:!1,sanitize:!1,smartLists:!0,smartypants:!1,xhtml:!1})}}));var e,t}))))),r.a.createElement(L,{tab:"\u53ef\u89c6\u5316\u8c03\u8bd5\uff08\u656c\u8bf7\u671f\u5f85\uff09",key:"5",disabled:!0}),r.a.createElement(L,{tab:"\u6211\u8981\u53cd\u9988",key:"6"},r.a.createElement("div",null,"\u5f53\u524d\u7248\u672c\uff1a V 0.1.0"),r.a.createElement("a",{href:_,target:"_blank",style:{marginRight:"20px"}},"\u6211\u60f3\u53cd\u9988\u95ee\u9898"),r.a.createElement("a",{href:"https://github.com/azl397985856/leetcode-cheat/issues/1",target:"_blank",style:{marginRight:"20px"}},"\u6211\u60f3\u8d21\u732e\u516c\u53f8\u548c\u5c97\u4f4d\u4fe1\u606f\uff08\u514d\u8d39\u83b7\u5f97\u9898\u76ee\u54a8\u8be2\u670d\u52a1\uff09"),r.a.createElement("a",{href:"https://tva1.sinaimg.cn/large/007S8ZIlly1gfcuzagjalj30p00dwabs.jpg",target:"_blank"},"\u5173\u6ce8\u66f4\u65b0"))):r.a.createElement("div",null,r.a.createElement(g.a,{description:"\u6b63\u5728\u64b0\u5199\u9898\u89e3..."},r.a.createElement("div",{className:"row",style:{marginTop:"20px"}},"\u6240\u6709\u5df2\u6536\u5f55\u7684\u9898\u76ee"),r.a.createElement(f.a,{pagination:{hideOnSinglePage:!0},dataSource:A,columns:P})))):r.a.createElement("div",{className:"container",style:{textAlign:"center"}},r.a.createElement("div",null,"\u5feb\u6253\u5f00\u529b\u6263\uff0c\u5f00\u59cb\u5237\u9898\u5427\uff5e"),r.a.createElement(c.a,{type:"link",href:S,target:"_blank"},"\u529b\u6263\u4e2d\u56fd"),r.a.createElement(c.a,{type:"link",href:N,target:"_blank"},"\u529b\u6263\u56fd\u9645"))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));l.a.render(r.a.createElement(r.a.StrictMode,null,r.a.createElement(q,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(n){n.unregister()})).catch((function(n){console.error(n.message)}))}},[[183,1,2]]]);
//# sourceMappingURL=main.17720429.chunk.js.map