


1. 结构化程序设计思维
	结构化程序设计者提倡: 将功能的实现封装成函数 ==> 功能函数
		一个函数就完成一个功能

	而一个设备工作,其实就是完成了该设备的一整套工程,
	因此,结构化程序设计者又提倡,将同一个设备的功能函数 编写在
	同一个源代码文件中 ==> 功能文件


	例如:
		1) 只用减法,判断a是否是b的倍数
			if(a % b == 0)
			{
				printf("a是b的倍数\n");
			}
			else
			{
				printf("a不是b的倍数\n")
			}

			a = a-b;
				a > b   : a = a-b;
				a == b	: printf("a是b的倍数\n");
				a < b	: printf("a不是b的倍数\n")

			===>
				while(1)
				{
					a = a - b;
					if(a == b)
					{
						printf("a是b的倍数\n");
						break;
					}
					else if(a < b)
					{
						printf("a不是b的倍数\n")
						break;
					}
				}
				 

		2) 判断 c 是否一个 质数(只能被1和本身整除的数)
			===> 只要在 2~c-1 之间,有一个数能把c整除,那么c就不是质数
				 否则,c是质数
			flag = 1;
			
			for(i=2;i<c;i++)
			{
				if(c%i==0)	//c能被i整除
				{
					flag = 0;
					printf("c不是质数\n");
					break;
				}
			}
		吴华超:
			if(flag == 1)
			{
				printf("c是质数\n");
			}

			if(c == i)
			{
				printf("c是质数\n");
			}
				
=========================================

	/*
		panduan_beishu: 功能是用来判断,a是否是b的倍数
			@a : 整数
			@b : 整数
		返回值:
			1	a是b的倍数
			0	a不是b的倍数
	*/
	int panduan_beishu(int a,int b)
	{
		while(1)
		{
			a = a - b;
			if(a == b)

				printf("a是b的倍数\n");
				return 1;
			}
			else if(a < b)
			{
				printf("a不是b的倍数\n")
				return 0;
			}
		}
	}


	int main(void)
	{

		int i;
		int c;
		scanf("%d",&c);

		for(i=2;i<c;i++)
		{
			// c是不是i的倍数
			ret = panduan_beishu(c,i);  //功能函数  
			if(  ret == 1)
			{
				printf("c 不是质数\n");
				break;
			}	
		}
		if(c == i)
		{
			printf("c是质数\n");
		}
	}			

		3) 找出 1 ~ 1000以内所有质数
			












