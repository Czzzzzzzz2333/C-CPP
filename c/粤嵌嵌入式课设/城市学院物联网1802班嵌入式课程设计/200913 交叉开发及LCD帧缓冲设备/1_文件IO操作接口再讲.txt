1.文件IO接口函数
	文件IO: File Input Output
			文件的输入输出操作
			==> 文件读写操作

		读写文件 和 把大象装冰箱 步骤是一样的!!
		
	打开 open:
		NAME
	       open - open and possibly create a file

		SYNOPSIS
		       #include <sys/types.h>
		       #include <sys/stat.h>
		       #include <fcntl.h>
					open用来打开或创建一个文件
		       int open(const char *pathname, int flags);
					@pathname: 带路径的文件名,比如 当前目录(./)下的 1.txt
							"./1.txt"
					@flags: 标志位,表示打开文件的方式
						O_RDONLY  只读打开,被打开的文件只能用来读取
						O_WRONLY  只写打开,被打开的文件只能用来写入
						O_RDWR	  读写打开,  万金油!!
				返回值:
					成功,返回最小可用文件描述符 
						==> 此时,该返回值就表示了这个被打开的文件
							后续读写操作,都是根据这个返回值(文件描述符)来
					失败,返回 -1,并且可以用perror函数打印错误信息

		===> 经常,要打开当前目录下的 1.txt,并且可读可写
			int  fd = 0;
			fd = open("./1.txt",O_RDWR);
			if(-1 == fd)
			{
				perror("open file error");
				return -1;
			}
			
			
	读 read:
		NAME
	       read - read from a file descriptor

		SYNOPSIS
	       #include <unistd.h>
					read用来从指定的文件描述符中,读取文件内容
	       ssize_t read(int fd, void *buf, size_t count);
	       		@fd: 文件描述符,此处表示 从哪个文件中读取
	       		@buf: 指向一块缓冲区,用来保存读取到的数据
	       		@count:指定读取的字节数,表示要读多少
	       				★★★注意: count 不能超过buf指定的缓冲区大小
	       	返回值:
	       		成功,返回实际读取到的字节数
	       			==> 0 表示没有读取到任何数据
	       		失败,返回 -1,并且errno被设置

	写 write:
		NAME
	       write - write to a file descriptor

		SYNOPSIS
	       #include <unistd.h>
				write用来向指定的文件描述符fd中写入数据
	       ssize_t write(int fd, const void *buf, size_t count);
	       		@fd:	写到哪去  文件描述符
	       		@buf:	写什么	  指向要写入的数据
	       		@count: 写多少	  要写入的字节数


		练习:
			新建一个空白的 2.txt文件
			编写程序,将"hello world"写入2.txt文件中

		步骤:
			1) 打开 2.txt文件
			2) 写入数据
			3) 关闭文件


			
	       		

	关闭 close:
		NAME
	       close - close a file descriptor

		SYNOPSIS
	       #include <unistd.h>
				close 用来关闭一个文件描述符
	       int close(int fd);
				@fd: 文件描述符,open的返回值
					表示要关闭的那个文件
			
		


※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
接口函数API: (函数接口)
	在有操作系统的情况下,进行程序设计
	操作系统会自带有大量的  库

	===> 库: 是事先编写好的一系列功能的实现代码的封装

	而,在库中的功能函数的实现,并不会公开 ==> 看不到函数实现的具体代码

	为了在这种情况下,能够让开发者了解 库中有什么功能可以被使用

	通常,库 会伴随有 相应的.h文件,而在.h文件中,就会对这些功能函数进行声明

	我们将这类型声明的函数,称为  接口函数


	也就是说,在程序设计中,只需要带上了 这些头文件,就能使用对应库中的
	功能函数了



	怎样去调用这些函数呢?????
		===> 函数的三要素
			1) 函数名 ==> 表示您要调用哪个功能函数
			2) 函数参数 ==>表示您调用这个函数时,应该要传递给该函数的数据
			3) 返回值 ==> 该函数执行完后,会返回一个怎样的数据 给您

	比如:
		NAME
	       write - write to a file descriptor

		SYNOPSIS
	       #include <unistd.h>
				write用来向指定的文件描述符fd中写入数据
	       ssize_t write(int fd, const void *buf, size_t count);
	       		@fd:	写到哪去  文件描述符
	       		@buf:	写什么	  指向要写入的数据
	       		@count: 写多少	  要写入的字节数
			返回值:
				成功返回实际写入的字节数
				失败返回 -1


	








※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※

